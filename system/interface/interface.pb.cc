// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interface.proto

#include "interface.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
extern PROTOBUF_INTERNAL_EXPORT_interface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_APPNP_interface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_interface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Binary_interface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_interface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleVec_interface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_interface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Eval_interface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_interface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Field_interface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_interface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatVec_interface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_interface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GAT_interface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_interface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntVec_interface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_interface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LongVec_interface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_interface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelInfo_interface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_interface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_interface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_interface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Record_interface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_interface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StrVec_interface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_interface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Table_interface_2eproto;
namespace dan {
class VoidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Void> _instance;
} _Void_default_instance_;
class IntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Int> _instance;
} _Int_default_instance_;
class IntVecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntVec> _instance;
} _IntVec_default_instance_;
class LongDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Long> _instance;
} _Long_default_instance_;
class LongVecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LongVec> _instance;
} _LongVec_default_instance_;
class FloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Float> _instance;
} _Float_default_instance_;
class FloatVecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatVec> _instance;
} _FloatVec_default_instance_;
class DoubleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Double> _instance;
} _Double_default_instance_;
class DoubleVecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleVec> _instance;
} _DoubleVec_default_instance_;
class StrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Str> _instance;
} _Str_default_instance_;
class StrVecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StrVec> _instance;
} _StrVec_default_instance_;
class EvalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Eval> _instance;
} _Eval_default_instance_;
class RecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Record> _instance;
} _Record_default_instance_;
class TableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Table> _instance;
} _Table_default_instance_;
class CodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Code> _instance;
} _Code_default_instance_;
class NodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfo> _instance;
} _NodeInfo_default_instance_;
class NodeInfoVecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfoVec> _instance;
} _NodeInfoVec_default_instance_;
class FieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Field> _instance;
} _Field_default_instance_;
class CreateTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTable> _instance;
} _CreateTable_default_instance_;
class CreateIndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateIndex> _instance;
} _CreateIndex_default_instance_;
class TablePartitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TablePartition> _instance;
} _TablePartition_default_instance_;
class TableInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableInfo> _instance;
} _TableInfo_default_instance_;
class CreateGraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateGraph> _instance;
} _CreateGraph_default_instance_;
class GraphPartitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphPartition> _instance;
} _GraphPartition_default_instance_;
class GraphInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphInfo> _instance;
} _GraphInfo_default_instance_;
class InsertRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertRecord> _instance;
} _InsertRecord_default_instance_;
class InsertRecordStrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertRecordStr> _instance;
} _InsertRecordStr_default_instance_;
class InsertRecordBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertRecordBatch> _instance;
} _InsertRecordBatch_default_instance_;
class DefineVertexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefineVertex> _instance;
} _DefineVertex_default_instance_;
class ImportVertexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImportVertex> _instance;
} _ImportVertex_default_instance_;
class InsertVertexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertVertex> _instance;
} _InsertVertex_default_instance_;
class InsertVertexBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertVertexBatch> _instance;
} _InsertVertexBatch_default_instance_;
class ImportEdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImportEdge> _instance;
} _ImportEdge_default_instance_;
class InsertEdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertEdge> _instance;
} _InsertEdge_default_instance_;
class InsertEdgeVPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertEdgeVP> _instance;
} _InsertEdgeVP_default_instance_;
class InsertEdgeNaiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertEdgeNaive> _instance;
} _InsertEdgeNaive_default_instance_;
class InsertEdgeBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertEdgeBatch> _instance;
} _InsertEdgeBatch_default_instance_;
class InsertEdgeBatchVPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertEdgeBatchVP> _instance;
} _InsertEdgeBatchVP_default_instance_;
class TableScanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableScan> _instance;
} _TableScan_default_instance_;
class IndexSearchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexSearch> _instance;
} _IndexSearch_default_instance_;
class AdjacentListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdjacentList> _instance;
} _AdjacentList_default_instance_;
class AdjacentListResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdjacentListResult> _instance;
} _AdjacentListResult_default_instance_;
class GetVertexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVertex> _instance;
} _GetVertex_default_instance_;
class VertexListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VertexList> _instance;
} _VertexList_default_instance_;
class EdgeListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EdgeList> _instance;
} _EdgeList_default_instance_;
class RemoteTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteTask> _instance;
} _RemoteTask_default_instance_;
class RemoteResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteResult> _instance;
} _RemoteResult_default_instance_;
class RemoteObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteObject> _instance;
} _RemoteObject_default_instance_;
class RemoteTaskResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteTaskResult> _instance;
} _RemoteTaskResult_default_instance_;
class RemoteObjectTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteObjectTask> _instance;
} _RemoteObjectTask_default_instance_;
class LoadGraphFromFolderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadGraphFromFolder> _instance;
} _LoadGraphFromFolder_default_instance_;
class VertexExistsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VertexExists> _instance;
} _VertexExists_default_instance_;
class TestStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestStream> _instance;
} _TestStream_default_instance_;
class HostInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostInfo> _instance;
} _HostInfo_default_instance_;
class BinaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Binary> _instance;
} _Binary_default_instance_;
class MergeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MergeInfo> _instance;
} _MergeInfo_default_instance_;
class TransferBinaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferBinary> _instance;
} _TransferBinary_default_instance_;
class MemoryStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryStat> _instance;
} _MemoryStat_default_instance_;
class APPNPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<APPNP> _instance;
} _APPNP_default_instance_;
class GATDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GAT> _instance;
} _GAT_default_instance_;
class ModelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelInfo> _instance;
} _ModelInfo_default_instance_;
class NodeClassifierInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeClassifierInfo> _instance;
} _NodeClassifierInfo_default_instance_;
}  // namespace dan
static void InitDefaultsscc_info_APPNP_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_APPNP_default_instance_;
    new (ptr) ::dan::APPNP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_APPNP_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_APPNP_interface_2eproto}, {}};

static void InitDefaultsscc_info_AdjacentList_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_AdjacentList_default_instance_;
    new (ptr) ::dan::AdjacentList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AdjacentList_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AdjacentList_interface_2eproto}, {
      &scc_info_Eval_interface_2eproto.base,
      &scc_info_IntVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_AdjacentListResult_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_AdjacentListResult_default_instance_;
    new (ptr) ::dan::AdjacentListResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AdjacentListResult_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AdjacentListResult_interface_2eproto}, {
      &scc_info_Table_interface_2eproto.base,
      &scc_info_Record_interface_2eproto.base,
      &scc_info_StrVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_Binary_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_Binary_default_instance_;
    new (ptr) ::dan::Binary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Binary_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Binary_interface_2eproto}, {}};

static void InitDefaultsscc_info_Code_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_Code_default_instance_;
    new (ptr) ::dan::Code();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Code_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Code_interface_2eproto}, {}};

static void InitDefaultsscc_info_CreateGraph_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_CreateGraph_default_instance_;
    new (ptr) ::dan::CreateGraph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateGraph_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateGraph_interface_2eproto}, {
      &scc_info_Field_interface_2eproto.base,
      &scc_info_StrVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_CreateIndex_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_CreateIndex_default_instance_;
    new (ptr) ::dan::CreateIndex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateIndex_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateIndex_interface_2eproto}, {}};

static void InitDefaultsscc_info_CreateTable_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_CreateTable_default_instance_;
    new (ptr) ::dan::CreateTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateTable_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateTable_interface_2eproto}, {
      &scc_info_Field_interface_2eproto.base,}};

static void InitDefaultsscc_info_DefineVertex_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_DefineVertex_default_instance_;
    new (ptr) ::dan::DefineVertex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DefineVertex_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DefineVertex_interface_2eproto}, {
      &scc_info_Field_interface_2eproto.base,}};

static void InitDefaultsscc_info_Double_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_Double_default_instance_;
    new (ptr) ::dan::Double();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Double_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Double_interface_2eproto}, {}};

static void InitDefaultsscc_info_DoubleVec_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_DoubleVec_default_instance_;
    new (ptr) ::dan::DoubleVec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleVec_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DoubleVec_interface_2eproto}, {}};

static void InitDefaultsscc_info_EdgeList_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_EdgeList_default_instance_;
    new (ptr) ::dan::EdgeList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EdgeList_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EdgeList_interface_2eproto}, {
      &scc_info_Record_interface_2eproto.base,}};

static void InitDefaultsscc_info_Eval_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_Eval_default_instance_;
    new (ptr) ::dan::Eval();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Eval_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Eval_interface_2eproto}, {
      &scc_info_IntVec_interface_2eproto.base,
      &scc_info_LongVec_interface_2eproto.base,
      &scc_info_FloatVec_interface_2eproto.base,
      &scc_info_DoubleVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_Field_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_Field_default_instance_;
    new (ptr) ::dan::Field();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Field_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Field_interface_2eproto}, {}};

static void InitDefaultsscc_info_Float_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_Float_default_instance_;
    new (ptr) ::dan::Float();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Float_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Float_interface_2eproto}, {}};

static void InitDefaultsscc_info_FloatVec_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_FloatVec_default_instance_;
    new (ptr) ::dan::FloatVec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatVec_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FloatVec_interface_2eproto}, {}};

static void InitDefaultsscc_info_GAT_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_GAT_default_instance_;
    new (ptr) ::dan::GAT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GAT_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GAT_interface_2eproto}, {}};

static void InitDefaultsscc_info_GetVertex_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_GetVertex_default_instance_;
    new (ptr) ::dan::GetVertex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetVertex_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetVertex_interface_2eproto}, {
      &scc_info_Eval_interface_2eproto.base,
      &scc_info_IntVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_GraphInfo_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_GraphInfo_default_instance_;
    new (ptr) ::dan::GraphInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphInfo_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphInfo_interface_2eproto}, {
      &scc_info_StrVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_GraphPartition_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_GraphPartition_default_instance_;
    new (ptr) ::dan::GraphPartition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphPartition_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphPartition_interface_2eproto}, {
      &scc_info_StrVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_HostInfo_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_HostInfo_default_instance_;
    new (ptr) ::dan::HostInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostInfo_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostInfo_interface_2eproto}, {}};

static void InitDefaultsscc_info_ImportEdge_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_ImportEdge_default_instance_;
    new (ptr) ::dan::ImportEdge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImportEdge_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImportEdge_interface_2eproto}, {}};

static void InitDefaultsscc_info_ImportVertex_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_ImportVertex_default_instance_;
    new (ptr) ::dan::ImportVertex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImportVertex_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImportVertex_interface_2eproto}, {}};

static void InitDefaultsscc_info_IndexSearch_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_IndexSearch_default_instance_;
    new (ptr) ::dan::IndexSearch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IndexSearch_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IndexSearch_interface_2eproto}, {
      &scc_info_Eval_interface_2eproto.base,
      &scc_info_IntVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_InsertEdge_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_InsertEdge_default_instance_;
    new (ptr) ::dan::InsertEdge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertEdge_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InsertEdge_interface_2eproto}, {
      &scc_info_Eval_interface_2eproto.base,
      &scc_info_Record_interface_2eproto.base,}};

static void InitDefaultsscc_info_InsertEdgeBatch_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_InsertEdgeBatch_default_instance_;
    new (ptr) ::dan::InsertEdgeBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InsertEdgeBatch_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_InsertEdgeBatch_interface_2eproto}, {
      &scc_info_Record_interface_2eproto.base,
      &scc_info_Table_interface_2eproto.base,
      &scc_info_IntVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_InsertEdgeBatchVP_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_InsertEdgeBatchVP_default_instance_;
    new (ptr) ::dan::InsertEdgeBatchVP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertEdgeBatchVP_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertEdgeBatchVP_interface_2eproto}, {
      &scc_info_Table_interface_2eproto.base,}};

static void InitDefaultsscc_info_InsertEdgeNaive_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_InsertEdgeNaive_default_instance_;
    new (ptr) ::dan::InsertEdgeNaive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertEdgeNaive_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertEdgeNaive_interface_2eproto}, {
      &scc_info_Record_interface_2eproto.base,}};

static void InitDefaultsscc_info_InsertEdgeVP_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_InsertEdgeVP_default_instance_;
    new (ptr) ::dan::InsertEdgeVP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertEdgeVP_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertEdgeVP_interface_2eproto}, {
      &scc_info_Record_interface_2eproto.base,}};

static void InitDefaultsscc_info_InsertRecord_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_InsertRecord_default_instance_;
    new (ptr) ::dan::InsertRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertRecord_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertRecord_interface_2eproto}, {
      &scc_info_Record_interface_2eproto.base,}};

static void InitDefaultsscc_info_InsertRecordBatch_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_InsertRecordBatch_default_instance_;
    new (ptr) ::dan::InsertRecordBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertRecordBatch_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertRecordBatch_interface_2eproto}, {
      &scc_info_Table_interface_2eproto.base,}};

static void InitDefaultsscc_info_InsertRecordStr_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_InsertRecordStr_default_instance_;
    new (ptr) ::dan::InsertRecordStr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertRecordStr_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertRecordStr_interface_2eproto}, {
      &scc_info_StrVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_InsertVertex_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_InsertVertex_default_instance_;
    new (ptr) ::dan::InsertVertex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertVertex_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertVertex_interface_2eproto}, {
      &scc_info_Record_interface_2eproto.base,}};

static void InitDefaultsscc_info_InsertVertexBatch_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_InsertVertexBatch_default_instance_;
    new (ptr) ::dan::InsertVertexBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertVertexBatch_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InsertVertexBatch_interface_2eproto}, {
      &scc_info_Table_interface_2eproto.base,
      &scc_info_IntVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_Int_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_Int_default_instance_;
    new (ptr) ::dan::Int();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Int_interface_2eproto}, {}};

static void InitDefaultsscc_info_IntVec_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_IntVec_default_instance_;
    new (ptr) ::dan::IntVec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntVec_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IntVec_interface_2eproto}, {}};

static void InitDefaultsscc_info_LoadGraphFromFolder_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_LoadGraphFromFolder_default_instance_;
    new (ptr) ::dan::LoadGraphFromFolder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoadGraphFromFolder_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LoadGraphFromFolder_interface_2eproto}, {
      &scc_info_Field_interface_2eproto.base,
      &scc_info_StrVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_Long_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_Long_default_instance_;
    new (ptr) ::dan::Long();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Long_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Long_interface_2eproto}, {}};

static void InitDefaultsscc_info_LongVec_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_LongVec_default_instance_;
    new (ptr) ::dan::LongVec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LongVec_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LongVec_interface_2eproto}, {}};

static void InitDefaultsscc_info_MemoryStat_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_MemoryStat_default_instance_;
    new (ptr) ::dan::MemoryStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemoryStat_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MemoryStat_interface_2eproto}, {
      &scc_info_StrVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_MergeInfo_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_MergeInfo_default_instance_;
    new (ptr) ::dan::MergeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MergeInfo_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MergeInfo_interface_2eproto}, {}};

static void InitDefaultsscc_info_ModelInfo_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_ModelInfo_default_instance_;
    new (ptr) ::dan::ModelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelInfo_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModelInfo_interface_2eproto}, {
      &scc_info_APPNP_interface_2eproto.base,
      &scc_info_GAT_interface_2eproto.base,}};

static void InitDefaultsscc_info_NodeClassifierInfo_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_NodeClassifierInfo_default_instance_;
    new (ptr) ::dan::NodeClassifierInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NodeClassifierInfo_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NodeClassifierInfo_interface_2eproto}, {
      &scc_info_IntVec_interface_2eproto.base,
      &scc_info_ModelInfo_interface_2eproto.base,}};

static void InitDefaultsscc_info_NodeInfo_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_NodeInfo_default_instance_;
    new (ptr) ::dan::NodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeInfo_interface_2eproto}, {}};

static void InitDefaultsscc_info_NodeInfoVec_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_NodeInfoVec_default_instance_;
    new (ptr) ::dan::NodeInfoVec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeInfoVec_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodeInfoVec_interface_2eproto}, {
      &scc_info_NodeInfo_interface_2eproto.base,}};

static void InitDefaultsscc_info_Record_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_Record_default_instance_;
    new (ptr) ::dan::Record();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Record_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Record_interface_2eproto}, {
      &scc_info_Eval_interface_2eproto.base,}};

static void InitDefaultsscc_info_RemoteObject_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_RemoteObject_default_instance_;
    new (ptr) ::dan::RemoteObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteObject_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteObject_interface_2eproto}, {}};

static void InitDefaultsscc_info_RemoteObjectTask_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_RemoteObjectTask_default_instance_;
    new (ptr) ::dan::RemoteObjectTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteObjectTask_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteObjectTask_interface_2eproto}, {}};

static void InitDefaultsscc_info_RemoteResult_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_RemoteResult_default_instance_;
    new (ptr) ::dan::RemoteResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteResult_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteResult_interface_2eproto}, {}};

static void InitDefaultsscc_info_RemoteTask_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_RemoteTask_default_instance_;
    new (ptr) ::dan::RemoteTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteTask_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteTask_interface_2eproto}, {}};

static void InitDefaultsscc_info_RemoteTaskResult_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_RemoteTaskResult_default_instance_;
    new (ptr) ::dan::RemoteTaskResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteTaskResult_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteTaskResult_interface_2eproto}, {}};

static void InitDefaultsscc_info_Str_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_Str_default_instance_;
    new (ptr) ::dan::Str();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Str_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Str_interface_2eproto}, {}};

static void InitDefaultsscc_info_StrVec_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_StrVec_default_instance_;
    new (ptr) ::dan::StrVec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StrVec_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StrVec_interface_2eproto}, {}};

static void InitDefaultsscc_info_Table_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_Table_default_instance_;
    new (ptr) ::dan::Table();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Table_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Table_interface_2eproto}, {
      &scc_info_Record_interface_2eproto.base,}};

static void InitDefaultsscc_info_TableInfo_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_TableInfo_default_instance_;
    new (ptr) ::dan::TableInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TableInfo_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TableInfo_interface_2eproto}, {
      &scc_info_StrVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_TablePartition_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_TablePartition_default_instance_;
    new (ptr) ::dan::TablePartition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TablePartition_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TablePartition_interface_2eproto}, {
      &scc_info_StrVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_TableScan_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_TableScan_default_instance_;
    new (ptr) ::dan::TableScan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TableScan_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TableScan_interface_2eproto}, {
      &scc_info_IntVec_interface_2eproto.base,}};

static void InitDefaultsscc_info_TestStream_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_TestStream_default_instance_;
    new (ptr) ::dan::TestStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestStream_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestStream_interface_2eproto}, {
      &scc_info_Table_interface_2eproto.base,}};

static void InitDefaultsscc_info_TransferBinary_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_TransferBinary_default_instance_;
    new (ptr) ::dan::TransferBinary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferBinary_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransferBinary_interface_2eproto}, {
      &scc_info_Binary_interface_2eproto.base,}};

static void InitDefaultsscc_info_VertexExists_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_VertexExists_default_instance_;
    new (ptr) ::dan::VertexExists();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VertexExists_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VertexExists_interface_2eproto}, {
      &scc_info_Eval_interface_2eproto.base,}};

static void InitDefaultsscc_info_VertexList_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_VertexList_default_instance_;
    new (ptr) ::dan::VertexList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VertexList_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_VertexList_interface_2eproto}, {
      &scc_info_Record_interface_2eproto.base,
      &scc_info_IntVec_interface_2eproto.base,
      &scc_info_Table_interface_2eproto.base,}};

static void InitDefaultsscc_info_Void_interface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dan::_Void_default_instance_;
    new (ptr) ::dan::Void();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Void_interface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Void_interface_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_interface_2eproto[62];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_interface_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_interface_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_interface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::Void, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::Int, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::IntVec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::IntVec, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::Long, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::Long, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::LongVec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::LongVec, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::Float, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::Float, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::FloatVec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::FloatVec, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::Double, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::Double, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::DoubleVec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::DoubleVec, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::Str, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::Str, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::StrVec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::StrVec, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::Eval, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dan::Eval, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::dan::Eval, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::Record, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::Table, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::Code, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::Code, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::NodeInfo, id_),
  PROTOBUF_FIELD_OFFSET(::dan::NodeInfo, host_),
  PROTOBUF_FIELD_OFFSET(::dan::NodeInfo, port_),
  PROTOBUF_FIELD_OFFSET(::dan::NodeInfo, head_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::NodeInfoVec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::NodeInfoVec, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::Field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::Field, fname_),
  PROTOBUF_FIELD_OFFSET(::dan::Field, ftype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::CreateTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::CreateTable, tname_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateTable, ttype_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateTable, inc_fid_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateTable, inc_start_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateTable, schema_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::CreateIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::CreateIndex, tname_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateIndex, fid_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateIndex, unique_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::TablePartition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::TablePartition, tname_),
  PROTOBUF_FIELD_OFFSET(::dan::TablePartition, fid_),
  PROTOBUF_FIELD_OFFSET(::dan::TablePartition, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::TableInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::TableInfo, fields_),
  PROTOBUF_FIELD_OFFSET(::dan::TableInfo, nodes_),
  PROTOBUF_FIELD_OFFSET(::dan::TableInfo, part_fid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::CreateGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::CreateGraph, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateGraph, vpname_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateGraph, vschema_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateGraph, vpfid_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateGraph, vptype_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateGraph, eschema_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateGraph, eptype_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateGraph, incoming_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateGraph, merge_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateGraph, is_partition_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateGraph, part_type_),
  PROTOBUF_FIELD_OFFSET(::dan::CreateGraph, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::GraphPartition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::GraphPartition, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::GraphPartition, ptype_),
  PROTOBUF_FIELD_OFFSET(::dan::GraphPartition, nodes_),
  PROTOBUF_FIELD_OFFSET(::dan::GraphPartition, dop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::GraphInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::GraphInfo, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::GraphInfo, vpname_),
  PROTOBUF_FIELD_OFFSET(::dan::GraphInfo, vpfields_),
  PROTOBUF_FIELD_OFFSET(::dan::GraphInfo, epfields_),
  PROTOBUF_FIELD_OFFSET(::dan::GraphInfo, incoming_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::InsertRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::InsertRecord, tname_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertRecord, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::InsertRecordStr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::InsertRecordStr, tname_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertRecordStr, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::InsertRecordBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::InsertRecordBatch, tname_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertRecordBatch, batch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::DefineVertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::DefineVertex, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::DefineVertex, vpname_),
  PROTOBUF_FIELD_OFFSET(::dan::DefineVertex, vschema_),
  PROTOBUF_FIELD_OFFSET(::dan::DefineVertex, vpfid_),
  PROTOBUF_FIELD_OFFSET(::dan::DefineVertex, vptype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::ImportVertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::ImportVertex, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::ImportVertex, vpname_),
  PROTOBUF_FIELD_OFFSET(::dan::ImportVertex, csv_),
  PROTOBUF_FIELD_OFFSET(::dan::ImportVertex, delim_),
  PROTOBUF_FIELD_OFFSET(::dan::ImportVertex, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::InsertVertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::InsertVertex, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertVertex, vprop_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertVertex, vpid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::InsertVertexBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::InsertVertexBatch, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertVertexBatch, vprop_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertVertexBatch, vpid_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertVertexBatch, vpids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::ImportEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::ImportEdge, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::ImportEdge, csv_),
  PROTOBUF_FIELD_OFFSET(::dan::ImportEdge, src_vpid_),
  PROTOBUF_FIELD_OFFSET(::dan::ImportEdge, dst_vpid_),
  PROTOBUF_FIELD_OFFSET(::dan::ImportEdge, delim_),
  PROTOBUF_FIELD_OFFSET(::dan::ImportEdge, header_),
  PROTOBUF_FIELD_OFFSET(::dan::ImportEdge, batch_),
  PROTOBUF_FIELD_OFFSET(::dan::ImportEdge, dop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdge, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdge, src_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdge, dest_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdge, src_vpid_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdge, dest_vpid_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdge, eprop_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdge, ignore_in_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdge, only_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeVP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeVP, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeVP, src_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeVP, dest_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeVP, src_vpid_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeVP, dest_vpid_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeVP, eprop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeNaive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeNaive, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeNaive, src_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeNaive, dest_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeNaive, eprop_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeNaive, ignore_in_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeNaive, only_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeBatch, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeBatch, src_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeBatch, dest_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeBatch, eprop_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeBatch, src_vpid_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeBatch, dest_vpid_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeBatch, ignore_in_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeBatch, only_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeBatchVP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeBatchVP, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeBatchVP, src_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeBatchVP, dest_),
  PROTOBUF_FIELD_OFFSET(::dan::InsertEdgeBatchVP, eprop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::TableScan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::TableScan, tname_),
  PROTOBUF_FIELD_OFFSET(::dan::TableScan, fids_),
  PROTOBUF_FIELD_OFFSET(::dan::TableScan, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::IndexSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::IndexSearch, tname_),
  PROTOBUF_FIELD_OFFSET(::dan::IndexSearch, fid_),
  PROTOBUF_FIELD_OFFSET(::dan::IndexSearch, val_),
  PROTOBUF_FIELD_OFFSET(::dan::IndexSearch, fids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::AdjacentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::AdjacentList, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::AdjacentList, src_),
  PROTOBUF_FIELD_OFFSET(::dan::AdjacentList, fids_),
  PROTOBUF_FIELD_OFFSET(::dan::AdjacentList, vpid_),
  PROTOBUF_FIELD_OFFSET(::dan::AdjacentList, incoming_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::AdjacentListResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::AdjacentListResult, dests_),
  PROTOBUF_FIELD_OFFSET(::dan::AdjacentListResult, eprops_),
  PROTOBUF_FIELD_OFFSET(::dan::AdjacentListResult, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::GetVertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::GetVertex, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::GetVertex, vkey_),
  PROTOBUF_FIELD_OFFSET(::dan::GetVertex, vpid_),
  PROTOBUF_FIELD_OFFSET(::dan::GetVertex, vid_),
  PROTOBUF_FIELD_OFFSET(::dan::GetVertex, fids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::VertexList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::VertexList, vkey_),
  PROTOBUF_FIELD_OFFSET(::dan::VertexList, vpid_),
  PROTOBUF_FIELD_OFFSET(::dan::VertexList, vprop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::EdgeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::EdgeList, src_),
  PROTOBUF_FIELD_OFFSET(::dan::EdgeList, dst_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::RemoteTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::RemoteTask, func_),
  PROTOBUF_FIELD_OFFSET(::dan::RemoteTask, args_),
  PROTOBUF_FIELD_OFFSET(::dan::RemoteTask, kargs_),
  PROTOBUF_FIELD_OFFSET(::dan::RemoteTask, immediate_return_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::RemoteResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::RemoteResult, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::RemoteObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::RemoteObject, cls_),
  PROTOBUF_FIELD_OFFSET(::dan::RemoteObject, args_),
  PROTOBUF_FIELD_OFFSET(::dan::RemoteObject, kargs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::RemoteTaskResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::RemoteTaskResult, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::RemoteObjectTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::RemoteObjectTask, object_id_),
  PROTOBUF_FIELD_OFFSET(::dan::RemoteObjectTask, fname_),
  PROTOBUF_FIELD_OFFSET(::dan::RemoteObjectTask, args_),
  PROTOBUF_FIELD_OFFSET(::dan::RemoteObjectTask, kargs_),
  PROTOBUF_FIELD_OFFSET(::dan::RemoteObjectTask, immediate_return_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::LoadGraphFromFolder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::LoadGraphFromFolder, folder_),
  PROTOBUF_FIELD_OFFSET(::dan::LoadGraphFromFolder, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::LoadGraphFromFolder, eschema_),
  PROTOBUF_FIELD_OFFSET(::dan::LoadGraphFromFolder, vptype_),
  PROTOBUF_FIELD_OFFSET(::dan::LoadGraphFromFolder, eptype_),
  PROTOBUF_FIELD_OFFSET(::dan::LoadGraphFromFolder, incoming_),
  PROTOBUF_FIELD_OFFSET(::dan::LoadGraphFromFolder, merge_),
  PROTOBUF_FIELD_OFFSET(::dan::LoadGraphFromFolder, is_partition_),
  PROTOBUF_FIELD_OFFSET(::dan::LoadGraphFromFolder, part_type_),
  PROTOBUF_FIELD_OFFSET(::dan::LoadGraphFromFolder, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::VertexExists, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::VertexExists, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::VertexExists, vkey_),
  PROTOBUF_FIELD_OFFSET(::dan::VertexExists, vpid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::TestStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::TestStream, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::HostInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::HostInfo, addr_),
  PROTOBUF_FIELD_OFFSET(::dan::HostInfo, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::Binary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::Binary, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::MergeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::MergeInfo, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::MergeInfo, least_),
  PROTOBUF_FIELD_OFFSET(::dan::MergeInfo, num_split_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::TransferBinary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::TransferBinary, type_),
  PROTOBUF_FIELD_OFFSET(::dan::TransferBinary, name_),
  PROTOBUF_FIELD_OFFSET(::dan::TransferBinary, pa_id_),
  PROTOBUF_FIELD_OFFSET(::dan::TransferBinary, sgmt_id_),
  PROTOBUF_FIELD_OFFSET(::dan::TransferBinary, binary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::MemoryStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::MemoryStat, verbose_),
  PROTOBUF_FIELD_OFFSET(::dan::MemoryStat, path_),
  PROTOBUF_FIELD_OFFSET(::dan::MemoryStat, level_),
  PROTOBUF_FIELD_OFFSET(::dan::MemoryStat, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::APPNP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::APPNP, alpha_),
  PROTOBUF_FIELD_OFFSET(::dan::APPNP, k_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::GAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::GAT, num_head_),
  PROTOBUF_FIELD_OFFSET(::dan::GAT, agg_),
  PROTOBUF_FIELD_OFFSET(::dan::GAT, importance_spl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::ModelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dan::ModelInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::dan::ModelInfo, m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dan::NodeClassifierInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dan::NodeClassifierInfo, gname_),
  PROTOBUF_FIELD_OFFSET(::dan::NodeClassifierInfo, fids_),
  PROTOBUF_FIELD_OFFSET(::dan::NodeClassifierInfo, input_size_),
  PROTOBUF_FIELD_OFFSET(::dan::NodeClassifierInfo, hidden_size_),
  PROTOBUF_FIELD_OFFSET(::dan::NodeClassifierInfo, num_class_),
  PROTOBUF_FIELD_OFFSET(::dan::NodeClassifierInfo, dropout_),
  PROTOBUF_FIELD_OFFSET(::dan::NodeClassifierInfo, learning_rate_),
  PROTOBUF_FIELD_OFFSET(::dan::NodeClassifierInfo, data_update_interval_),
  PROTOBUF_FIELD_OFFSET(::dan::NodeClassifierInfo, merge_manually_),
  PROTOBUF_FIELD_OFFSET(::dan::NodeClassifierInfo, num_epochs_),
  PROTOBUF_FIELD_OFFSET(::dan::NodeClassifierInfo, model_info_),
  PROTOBUF_FIELD_OFFSET(::dan::NodeClassifierInfo, log_file_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dan::Void)},
  { 5, -1, sizeof(::dan::Int)},
  { 11, -1, sizeof(::dan::IntVec)},
  { 17, -1, sizeof(::dan::Long)},
  { 23, -1, sizeof(::dan::LongVec)},
  { 29, -1, sizeof(::dan::Float)},
  { 35, -1, sizeof(::dan::FloatVec)},
  { 41, -1, sizeof(::dan::Double)},
  { 47, -1, sizeof(::dan::DoubleVec)},
  { 53, -1, sizeof(::dan::Str)},
  { 59, -1, sizeof(::dan::StrVec)},
  { 65, -1, sizeof(::dan::Eval)},
  { 79, -1, sizeof(::dan::Record)},
  { 85, -1, sizeof(::dan::Table)},
  { 91, -1, sizeof(::dan::Code)},
  { 97, -1, sizeof(::dan::NodeInfo)},
  { 106, -1, sizeof(::dan::NodeInfoVec)},
  { 112, -1, sizeof(::dan::Field)},
  { 119, -1, sizeof(::dan::CreateTable)},
  { 129, -1, sizeof(::dan::CreateIndex)},
  { 137, -1, sizeof(::dan::TablePartition)},
  { 145, -1, sizeof(::dan::TableInfo)},
  { 153, -1, sizeof(::dan::CreateGraph)},
  { 170, -1, sizeof(::dan::GraphPartition)},
  { 179, -1, sizeof(::dan::GraphInfo)},
  { 189, -1, sizeof(::dan::InsertRecord)},
  { 196, -1, sizeof(::dan::InsertRecordStr)},
  { 203, -1, sizeof(::dan::InsertRecordBatch)},
  { 210, -1, sizeof(::dan::DefineVertex)},
  { 220, -1, sizeof(::dan::ImportVertex)},
  { 230, -1, sizeof(::dan::InsertVertex)},
  { 238, -1, sizeof(::dan::InsertVertexBatch)},
  { 247, -1, sizeof(::dan::ImportEdge)},
  { 260, -1, sizeof(::dan::InsertEdge)},
  { 273, -1, sizeof(::dan::InsertEdgeVP)},
  { 284, -1, sizeof(::dan::InsertEdgeNaive)},
  { 295, -1, sizeof(::dan::InsertEdgeBatch)},
  { 308, -1, sizeof(::dan::InsertEdgeBatchVP)},
  { 317, -1, sizeof(::dan::TableScan)},
  { 325, -1, sizeof(::dan::IndexSearch)},
  { 334, -1, sizeof(::dan::AdjacentList)},
  { 344, -1, sizeof(::dan::AdjacentListResult)},
  { 352, -1, sizeof(::dan::GetVertex)},
  { 362, -1, sizeof(::dan::VertexList)},
  { 370, -1, sizeof(::dan::EdgeList)},
  { 377, -1, sizeof(::dan::RemoteTask)},
  { 386, -1, sizeof(::dan::RemoteResult)},
  { 392, -1, sizeof(::dan::RemoteObject)},
  { 400, -1, sizeof(::dan::RemoteTaskResult)},
  { 406, -1, sizeof(::dan::RemoteObjectTask)},
  { 416, -1, sizeof(::dan::LoadGraphFromFolder)},
  { 431, -1, sizeof(::dan::VertexExists)},
  { 439, -1, sizeof(::dan::TestStream)},
  { 445, -1, sizeof(::dan::HostInfo)},
  { 452, -1, sizeof(::dan::Binary)},
  { 458, -1, sizeof(::dan::MergeInfo)},
  { 466, -1, sizeof(::dan::TransferBinary)},
  { 476, -1, sizeof(::dan::MemoryStat)},
  { 485, -1, sizeof(::dan::APPNP)},
  { 492, -1, sizeof(::dan::GAT)},
  { 500, -1, sizeof(::dan::ModelInfo)},
  { 508, -1, sizeof(::dan::NodeClassifierInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_Void_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_Int_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_IntVec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_Long_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_LongVec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_Float_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_FloatVec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_Double_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_DoubleVec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_Str_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_StrVec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_Eval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_Record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_Table_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_Code_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_NodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_NodeInfoVec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_Field_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_CreateTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_CreateIndex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_TablePartition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_TableInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_CreateGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_GraphPartition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_GraphInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_InsertRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_InsertRecordStr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_InsertRecordBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_DefineVertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_ImportVertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_InsertVertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_InsertVertexBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_ImportEdge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_InsertEdge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_InsertEdgeVP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_InsertEdgeNaive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_InsertEdgeBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_InsertEdgeBatchVP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_TableScan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_IndexSearch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_AdjacentList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_AdjacentListResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_GetVertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_VertexList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_EdgeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_RemoteTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_RemoteResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_RemoteObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_RemoteTaskResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_RemoteObjectTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_LoadGraphFromFolder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_VertexExists_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_TestStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_HostInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_Binary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_MergeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_TransferBinary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_MemoryStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_APPNP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_GAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_ModelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dan::_NodeClassifierInfo_default_instance_),
};

const char descriptor_table_protodef_interface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017interface.proto\022\003dan\"\006\n\004Void\"\020\n\003Int\022\t\n"
  "\001v\030\001 \001(\005\"\023\n\006IntVec\022\t\n\001v\030\001 \003(\005\"\021\n\004Long\022\t\n"
  "\001v\030\001 \001(\003\"\024\n\007LongVec\022\t\n\001v\030\001 \003(\003\"\022\n\005Float\022"
  "\t\n\001v\030\001 \001(\002\"\025\n\010FloatVec\022\t\n\001v\030\001 \003(\002\"\023\n\006Dou"
  "ble\022\t\n\001v\030\001 \001(\001\"\026\n\tDoubleVec\022\t\n\001v\030\001 \003(\001\"\020"
  "\n\003Str\022\t\n\001v\030\001 \001(\t\"\023\n\006StrVec\022\t\n\001v\030\001 \003(\t\"\261\001"
  "\n\004Eval\022\013\n\001l\030\001 \001(\003H\000\022\013\n\001d\030\002 \001(\001H\000\022\013\n\001s\030\003 "
  "\001(\tH\000\022\013\n\001b\030\004 \001(\010H\000\022\031\n\002il\030\005 \001(\0132\013.dan.Int"
  "VecH\000\022\032\n\002ll\030\006 \001(\0132\014.dan.LongVecH\000\022\033\n\002fl\030"
  "\007 \001(\0132\r.dan.FloatVecH\000\022\034\n\002dl\030\010 \001(\0132\016.dan"
  ".DoubleVecH\000B\003\n\001v\"\036\n\006Record\022\024\n\001v\030\001 \003(\0132\t"
  ".dan.Eval\"\037\n\005Table\022\026\n\001v\030\001 \003(\0132\013.dan.Reco"
  "rd\"\367\006\n\004Code\022\035\n\003msg\030\001 \001(\0162\020.dan.Code.Stat"
  "us\"\317\006\n\006Status\022\006\n\002OK\020\000\022\021\n\rARCHIVE_ERROR\020\001"
  "\022\022\n\016RECOVERY_ERROR\020\002\022\030\n\024NODE_REIGISTER_E"
  "RROR\020\003\022\026\n\022INVALID_TABLE_TYPE\020\004\022\026\n\022CREATE"
  "_TABLE_ERROR\020\005\022\024\n\020DROP_TABLE_ERROR\020\006\022\024\n\020"
  "LOAD_TABLE_ERROR\020\007\022\031\n\025DUPLICATED_TABLE_N"
  "AME\020\010\022\023\n\017TABLE_NOT_FOUND\020\t\022\026\n\022CREATE_IND"
  "EX_ERROR\020\n\022\031\n\025TABLE_PARTITION_ERROR\020\013\022\035\n"
  "\031TABLE_ALREADY_PARTITIONED\020\014\022\027\n\023INSERT_R"
  "ECORD_ERROR\020\r\022\024\n\020TABLE_SCAN_ERROR\020\016\022\026\n\022I"
  "NDEX_SEARCH_ERROR\020\017\022\026\n\022CREATE_GRAPH_ERRO"
  "R\020\020\022\024\n\020DROP_GRAPH_ERROR\020\021\022\031\n\025DUPLICATED_"
  "GRAPH_NAME\020\022\022\023\n\017GRAPH_NOT_FOUND\020\023\022\031\n\025GRA"
  "PH_PARTITION_ERROR\020\024\022\033\n\027GRAPH_ALREADY_PA"
  "RTIONED\020\025\022\025\n\021GRAPH_MERGE_ERROR\020\026\022\027\n\023DEFI"
  "NE_VERTEX_ERROR\020\027\022\027\n\023IMPORT_VERTEX_ERROR"
  "\020\030\022\027\n\023INSERT_VERTEX_ERROR\020\031\022\025\n\021IMPORT_ED"
  "GE_ERROR\020\032\022\025\n\021INSERT_EDGE_ERROR\020\033\022\027\n\023ADJ"
  "ACENT_LIST_ERROR\020\034\022\024\n\020GET_VERTEX_ERROR\020\035"
  "\022\027\n\023DATA_TRANSFER_ERROR\020\036\022\032\n\026INVALID_PAR"
  "TITION_TYPE\020\037\022\024\n\020OBJECT_NOT_FOUND\020 \022\033\n\027S"
  "YSTEM_MONITORING_ERROR\020!\022\032\n\026CAUSAL_DISCO"
  "VERY_ERROR\020\"\"@\n\010NodeInfo\022\n\n\002id\030\001 \001(\005\022\014\n\004"
  "host\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\014\n\004head\030\004 \001(\010\"\'"
  "\n\013NodeInfoVec\022\030\n\001v\030\001 \003(\0132\r.dan.NodeInfo\""
  "%\n\005Field\022\r\n\005fname\030\001 \001(\t\022\r\n\005ftype\030\002 \001(\t\"k"
  "\n\013CreateTable\022\r\n\005tname\030\001 \001(\t\022\r\n\005ttype\030\002 "
  "\001(\t\022\017\n\007inc_fid\030\003 \001(\005\022\021\n\tinc_start\030\004 \001(\005\022"
  "\032\n\006schema\030\005 \003(\0132\n.dan.Field\"9\n\013CreateInd"
  "ex\022\r\n\005tname\030\001 \001(\t\022\013\n\003fid\030\002 \001(\005\022\016\n\006unique"
  "\030\003 \001(\010\"H\n\016TablePartition\022\r\n\005tname\030\001 \001(\t\022"
  "\013\n\003fid\030\002 \001(\005\022\032\n\005nodes\030\003 \001(\0132\013.dan.StrVec"
  "\"V\n\tTableInfo\022\033\n\006fields\030\001 \001(\0132\013.dan.StrV"
  "ec\022\032\n\005nodes\030\002 \001(\0132\013.dan.StrVec\022\020\n\010part_f"
  "id\030\003 \001(\005\"\373\001\n\013CreateGraph\022\r\n\005gname\030\001 \001(\t\022"
  "\016\n\006vpname\030\002 \001(\t\022\033\n\007vschema\030\003 \003(\0132\n.dan.F"
  "ield\022\r\n\005vpfid\030\004 \001(\005\022\016\n\006vptype\030\005 \001(\t\022\033\n\007e"
  "schema\030\006 \003(\0132\n.dan.Field\022\016\n\006eptype\030\007 \001(\t"
  "\022\020\n\010incoming\030\010 \001(\010\022\r\n\005merge\030\t \001(\010\022\024\n\014is_"
  "partition\030\n \001(\010\022\021\n\tpart_type\030\013 \001(\005\022\032\n\005no"
  "des\030\014 \001(\0132\013.dan.StrVec\"W\n\016GraphPartition"
  "\022\r\n\005gname\030\001 \001(\t\022\r\n\005ptype\030\002 \001(\t\022\032\n\005nodes\030"
  "\003 \001(\0132\013.dan.StrVec\022\013\n\003dop\030\004 \001(\005\"\207\001\n\tGrap"
  "hInfo\022\r\n\005gname\030\001 \001(\t\022\033\n\006vpname\030\002 \001(\0132\013.d"
  "an.StrVec\022\035\n\010vpfields\030\003 \003(\0132\013.dan.StrVec"
  "\022\035\n\010epfields\030\004 \001(\0132\013.dan.StrVec\022\020\n\010incom"
  "ing\030\005 \001(\010\":\n\014InsertRecord\022\r\n\005tname\030\001 \001(\t"
  "\022\033\n\006values\030\002 \001(\0132\013.dan.Record\"=\n\017InsertR"
  "ecordStr\022\r\n\005tname\030\001 \001(\t\022\033\n\006values\030\002 \001(\0132"
  "\013.dan.StrVec\"=\n\021InsertRecordBatch\022\r\n\005tna"
  "me\030\001 \001(\t\022\031\n\005batch\030\002 \001(\0132\n.dan.Table\"i\n\014D"
  "efineVertex\022\r\n\005gname\030\001 \001(\t\022\016\n\006vpname\030\002 \001"
  "(\t\022\033\n\007vschema\030\003 \003(\0132\n.dan.Field\022\r\n\005vpfid"
  "\030\004 \001(\005\022\016\n\006vptype\030\005 \001(\t\"Y\n\014ImportVertex\022\r"
  "\n\005gname\030\001 \001(\t\022\016\n\006vpname\030\002 \001(\t\022\013\n\003csv\030\003 \001"
  "(\t\022\r\n\005delim\030\004 \001(\t\022\016\n\006header\030\005 \001(\010\"G\n\014Ins"
  "ertVertex\022\r\n\005gname\030\001 \001(\t\022\032\n\005vprop\030\002 \001(\0132"
  "\013.dan.Record\022\014\n\004vpid\030\003 \001(\005\"g\n\021InsertVert"
  "exBatch\022\r\n\005gname\030\001 \001(\t\022\031\n\005vprop\030\002 \001(\0132\n."
  "dan.Table\022\014\n\004vpid\030\003 \001(\005\022\032\n\005vpids\030\004 \001(\0132\013"
  ".dan.IntVec\"\207\001\n\nImportEdge\022\r\n\005gname\030\001 \001("
  "\t\022\013\n\003csv\030\002 \001(\t\022\020\n\010src_vpid\030\003 \001(\005\022\020\n\010dst_"
  "vpid\030\004 \001(\005\022\r\n\005delim\030\005 \001(\t\022\016\n\006header\030\006 \001("
  "\010\022\r\n\005batch\030\007 \001(\005\022\013\n\003dop\030\010 \001(\005\"\261\001\n\nInsert"
  "Edge\022\r\n\005gname\030\001 \001(\t\022\026\n\003src\030\002 \001(\0132\t.dan.E"
  "val\022\027\n\004dest\030\003 \001(\0132\t.dan.Eval\022\020\n\010src_vpid"
  "\030\004 \001(\005\022\021\n\tdest_vpid\030\005 \001(\005\022\032\n\005eprop\030\006 \001(\013"
  "2\013.dan.Record\022\021\n\tignore_in\030\007 \001(\010\022\017\n\007only"
  "_in\030\010 \001(\010\"\223\001\n\014InsertEdgeVP\022\r\n\005gname\030\001 \001("
  "\t\022\030\n\003src\030\002 \001(\0132\013.dan.Record\022\031\n\004dest\030\003 \001("
  "\0132\013.dan.Record\022\020\n\010src_vpid\030\004 \001(\005\022\021\n\tdest"
  "_vpid\030\005 \001(\005\022\032\n\005eprop\030\006 \001(\0132\013.dan.Record\""
  "{\n\017InsertEdgeNaive\022\r\n\005gname\030\001 \001(\t\022\013\n\003src"
  "\030\002 \001(\003\022\014\n\004dest\030\003 \001(\003\022\032\n\005eprop\030\004 \001(\0132\013.da"
  "n.Record\022\021\n\tignore_in\030\005 \001(\010\022\017\n\007only_in\030\006"
  " \001(\010\"\323\001\n\017InsertEdgeBatch\022\r\n\005gname\030\001 \001(\t\022"
  "\030\n\003src\030\002 \001(\0132\013.dan.Record\022\031\n\004dest\030\003 \001(\0132"
  "\013.dan.Record\022\031\n\005eprop\030\004 \001(\0132\n.dan.Table\022"
  "\035\n\010src_vpid\030\005 \001(\0132\013.dan.IntVec\022\036\n\tdest_v"
  "pid\030\006 \001(\0132\013.dan.IntVec\022\021\n\tignore_in\030\007 \001("
  "\010\022\017\n\007only_in\030\010 \001(\010\"p\n\021InsertEdgeBatchVP\022"
  "\r\n\005gname\030\001 \001(\t\022\027\n\003src\030\002 \001(\0132\n.dan.Table\022"
  "\030\n\004dest\030\003 \001(\0132\n.dan.Table\022\031\n\005eprop\030\004 \001(\013"
  "2\n.dan.Table\"D\n\tTableScan\022\r\n\005tname\030\001 \001(\t"
  "\022\031\n\004fids\030\002 \001(\0132\013.dan.IntVec\022\r\n\005limit\030\003 \001"
  "(\003\"\\\n\013IndexSearch\022\r\n\005tname\030\001 \001(\t\022\013\n\003fid\030"
  "\002 \001(\003\022\026\n\003val\030\003 \001(\0132\t.dan.Eval\022\031\n\004fids\030\004 "
  "\001(\0132\013.dan.IntVec\"p\n\014AdjacentList\022\r\n\005gnam"
  "e\030\001 \001(\t\022\026\n\003src\030\002 \001(\0132\t.dan.Eval\022\031\n\004fids\030"
  "\003 \001(\0132\013.dan.IntVec\022\014\n\004vpid\030\004 \001(\005\022\020\n\010inco"
  "ming\030\005 \001(\010\"h\n\022AdjacentListResult\022\031\n\005dest"
  "s\030\001 \001(\0132\n.dan.Table\022\033\n\006eprops\030\002 \001(\0132\013.da"
  "n.Record\022\032\n\005nodes\030\003 \001(\0132\013.dan.StrVec\"i\n\t"
  "GetVertex\022\r\n\005gname\030\001 \001(\t\022\027\n\004vkey\030\002 \001(\0132\t"
  ".dan.Eval\022\014\n\004vpid\030\003 \001(\005\022\013\n\003vid\030\004 \001(\003\022\031\n\004"
  "fids\030\005 \001(\0132\013.dan.IntVec\"]\n\nVertexList\022\031\n"
  "\004vkey\030\001 \001(\0132\013.dan.Record\022\031\n\004vpid\030\002 \001(\0132\013"
  ".dan.IntVec\022\031\n\005vprop\030\003 \001(\0132\n.dan.Table\">"
  "\n\010EdgeList\022\030\n\003src\030\001 \001(\0132\013.dan.Record\022\030\n\003"
  "dst\030\002 \001(\0132\013.dan.Record\"Q\n\nRemoteTask\022\014\n\004"
  "func\030\001 \001(\014\022\014\n\004args\030\002 \001(\014\022\r\n\005kargs\030\003 \001(\014\022"
  "\030\n\020immediate_return\030\004 \001(\010\"\037\n\014RemoteResul"
  "t\022\017\n\007results\030\001 \001(\014\"8\n\014RemoteObject\022\013\n\003cl"
  "s\030\001 \001(\014\022\014\n\004args\030\002 \001(\014\022\r\n\005kargs\030\003 \001(\014\"%\n\020"
  "RemoteTaskResult\022\021\n\tobject_id\030\001 \001(\003\"k\n\020R"
  "emoteObjectTask\022\021\n\tobject_id\030\001 \001(\003\022\r\n\005fn"
  "ame\030\002 \001(\t\022\014\n\004args\030\003 \001(\014\022\r\n\005kargs\030\004 \001(\014\022\030"
  "\n\020immediate_return\030\005 \001(\010\"\327\001\n\023LoadGraphFr"
  "omFolder\022\016\n\006folder\030\001 \001(\t\022\r\n\005gname\030\002 \001(\t\022"
  "\033\n\007eschema\030\003 \003(\0132\n.dan.Field\022\016\n\006vptype\030\004"
  " \001(\t\022\016\n\006eptype\030\005 \001(\t\022\020\n\010incoming\030\006 \001(\010\022\r"
  "\n\005merge\030\007 \001(\010\022\024\n\014is_partition\030\010 \001(\010\022\021\n\tp"
  "art_type\030\t \001(\005\022\032\n\005nodes\030\n \001(\0132\013.dan.StrV"
  "ec\"D\n\014VertexExists\022\r\n\005gname\030\001 \001(\t\022\027\n\004vke"
  "y\030\002 \001(\0132\t.dan.Eval\022\014\n\004vpid\030\003 \001(\005\"&\n\nTest"
  "Stream\022\030\n\004data\030\001 \001(\0132\n.dan.Table\"&\n\010Host"
  "Info\022\014\n\004addr\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\"\023\n\006Bina"
  "ry\022\t\n\001v\030\001 \001(\014\"<\n\tMergeInfo\022\r\n\005gname\030\001 \001("
  "\t\022\r\n\005least\030\002 \001(\005\022\021\n\tnum_split\030\003 \001(\005\"i\n\016T"
  "ransferBinary\022\014\n\004type\030\001 \001(\005\022\014\n\004name\030\002 \001("
  "\t\022\r\n\005pa_id\030\003 \001(\005\022\017\n\007sgmt_id\030\004 \001(\005\022\033\n\006bin"
  "ary\030\005 \001(\0132\013.dan.Binary\"V\n\nMemoryStat\022\017\n\007"
  "verbose\030\001 \001(\010\022\014\n\004path\030\002 \001(\t\022\r\n\005level\030\003 \001"
  "(\005\022\032\n\005nodes\030\004 \001(\0132\013.dan.StrVec\"!\n\005APPNP\022"
  "\r\n\005alpha\030\001 \001(\002\022\t\n\001k\030\002 \001(\005\"<\n\003GAT\022\020\n\010num_"
  "head\030\001 \001(\005\022\013\n\003agg\030\002 \001(\010\022\026\n\016importance_sp"
  "l\030\003 \001(\005\"F\n\tModelInfo\022\033\n\005appnp\030\001 \001(\0132\n.da"
  "n.APPNPH\000\022\027\n\003gat\030\002 \001(\0132\010.dan.GATH\000B\003\n\001m\""
  "\242\002\n\022NodeClassifierInfo\022\r\n\005gname\030\001 \001(\t\022\031\n"
  "\004fids\030\002 \001(\0132\013.dan.IntVec\022\022\n\ninput_size\030\003"
  " \001(\005\022\023\n\013hidden_size\030\004 \001(\005\022\021\n\tnum_class\030\005"
  " \001(\005\022\017\n\007dropout\030\006 \001(\002\022\025\n\rlearning_rate\030\007"
  " \001(\002\022\034\n\024data_update_interval\030\010 \001(\005\022\026\n\016me"
  "rge_manually\030\t \001(\010\022\022\n\nnum_epochs\030\n \001(\005\022\""
  "\n\nmodel_info\030\013 \001(\0132\016.dan.ModelInfo\022\020\n\010lo"
  "g_file\030\014 \001(\t2\240\025\n\014DANInterface\022\036\n\004ping\022\t."
  "dan.Void\032\t.dan.Code\"\000\022-\n\013test_stream\022\017.d"
  "an.TestStream\032\t.dan.Code\"\000(\001\022/\n\017test_mul"
  "tiunary\022\017.dan.TestStream\032\t.dan.Code\"\000\022-\n"
  "\ttest_size\022\016.dan.DoubleVec\032\016.dan.DoubleV"
  "ec\"\000\022 \n\007archive\022\010.dan.Str\032\t.dan.Code\"\000\022 "
  "\n\007recover\022\010.dan.Str\032\t.dan.Code\"\000\0222\n\021requ"
  "est_node_list\022\t.dan.Void\032\020.dan.NodeInfoV"
  "ec\"\000\022.\n\025request_register_node\022\010.dan.Str\032"
  "\t.dan.Code\"\000\022,\n\016request_socket\022\t.dan.Voi"
  "d\032\r.dan.HostInfo\"\000\0221\n\021memory_statistics\022"
  "\017.dan.MemoryStat\032\t.dan.Code\"\000\022-\n\014create_"
  "table\022\020.dan.CreateTable\032\t.dan.Code\"\000\022#\n\n"
  "drop_table\022\010.dan.Str\032\t.dan.Code\"\000\022-\n\024dro"
  "p_table_if_exists\022\010.dan.Str\032\t.dan.Code\"\000"
  "\022&\n\nload_table\022\013.dan.StrVec\032\t.dan.Code\"\000"
  "\022-\n\014create_index\022\020.dan.CreateIndex\032\t.dan"
  ".Code\"\000\0223\n\017table_partition\022\023.dan.TablePa"
  "rtition\032\t.dan.Code\"\000\022&\n\rset_partition\022\010."
  "dan.Str\032\t.dan.Code\"\000\022-\n\014create_graph\022\020.d"
  "an.CreateGraph\032\t.dan.Code\"\000\022#\n\ndrop_grap"
  "h\022\010.dan.Str\032\t.dan.Code\"\000\022-\n\024drop_graph_i"
  "f_exists\022\010.dan.Str\032\t.dan.Code\"\000\022/\n\rdefin"
  "e_vertex\022\021.dan.DefineVertex\032\t.dan.Code\"\000"
  "\0223\n\017graph_partition\022\023.dan.GraphPartition"
  "\032\t.dan.Code\"\000\022*\n\013graph_merge\022\016.dan.Merge"
  "Info\032\t.dan.Code\"\000\0221\n\rtransfer_data\022\023.dan"
  ".TransferBinary\032\t.dan.Code\"\000\022.\n\rinsert_r"
  "ecord\022\021.dan.InsertRecord\032\010.dan.Str\"\000\022:\n\023"
  "insert_record_batch\022\026.dan.InsertRecordBa"
  "tch\032\t.dan.Code\"\000\022/\n\rimport_vertex\022\021.dan."
  "ImportVertex\032\t.dan.Code\"\000\022/\n\rinsert_vert"
  "ex\022\021.dan.InsertVertex\032\t.dan.Long\"\000\022:\n\023in"
  "sert_vertex_batch\022\026.dan.InsertVertexBatc"
  "h\032\t.dan.Code\"\000\022+\n\013import_edge\022\017.dan.Impo"
  "rtEdge\032\t.dan.Code\"\000\022+\n\013insert_edge\022\017.dan"
  ".InsertEdge\032\t.dan.Code\"\000\0220\n\016insert_edge_"
  "vp\022\021.dan.InsertEdgeVP\032\t.dan.Code\"\000\0226\n\021in"
  "sert_edge_naive\022\024.dan.InsertEdgeNaive\032\t."
  "dan.Code\"\000\0226\n\021insert_edge_batch\022\024.dan.In"
  "sertEdgeBatch\032\t.dan.Code\"\000\022;\n\024insert_edg"
  "e_batch_vp\022\026.dan.InsertEdgeBatchVP\032\t.dan"
  ".Code\"\000\022,\n\016get_table_info\022\010.dan.Str\032\016.da"
  "n.TableInfo\"\000\022(\n\017get_num_records\022\010.dan.S"
  "tr\032\t.dan.Long\"\000\022*\n\ntable_scan\022\016.dan.Tabl"
  "eScan\032\n.dan.Table\"\000\022.\n\014index_search\022\020.da"
  "n.IndexSearch\032\n.dan.Table\"\000\022,\n\016get_graph"
  "_info\022\010.dan.Str\032\016.dan.GraphInfo\"\000\022\'\n\016get"
  "_num_vertex\022\010.dan.Str\032\t.dan.Long\"\000\022&\n\rge"
  "t_num_edges\022\010.dan.Str\032\t.dan.Long\"\000\022=\n\rad"
  "jacent_list\022\021.dan.AdjacentList\032\027.dan.Adj"
  "acentListResult\"\000\022,\n\rget_edge_list\022\010.dan"
  ".Str\032\r.dan.EdgeList\"\0000\001\022+\n\nget_vertex\022\016."
  "dan.GetVertex\032\013.dan.Record\"\000\0220\n\017get_vert"
  "ex_list\022\010.dan.Str\032\017.dan.VertexList\"\0000\001\022/"
  "\n\rvertex_exists\022\021.dan.VertexExists\032\t.dan"
  ".Code\"\000\0223\n\013remote_task\022\017.dan.RemoteTask\032"
  "\021.dan.RemoteResult\"\000\0227\n\rremote_object\022\021."
  "dan.RemoteObject\032\021.dan.RemoteResult\"\000\022:\n"
  "\024remove_remote_object\022\025.dan.RemoteTaskRe"
  "sult\032\t.dan.Code\"\000\022@\n\022remote_object_task\022"
  "\025.dan.RemoteObjectTask\032\021.dan.RemoteResul"
  "t\"\000\022@\n\022remote_task_result\022\025.dan.RemoteTa"
  "skResult\032\021.dan.RemoteResult\"\000\0228\n\022remove_"
  "task_result\022\025.dan.RemoteTaskResult\032\t.dan"
  ".Code\"\000\022\?\n\026load_graph_from_folder\022\030.dan."
  "LoadGraphFromFolder\032\t.dan.Code\"\000\022=\n\025trai"
  "n_node_classifier\022\027.dan.NodeClassifierIn"
  "fo\032\t.dan.Code\"\000B\006\242\002\003DANb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_interface_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_interface_2eproto_sccs[62] = {
  &scc_info_APPNP_interface_2eproto.base,
  &scc_info_AdjacentList_interface_2eproto.base,
  &scc_info_AdjacentListResult_interface_2eproto.base,
  &scc_info_Binary_interface_2eproto.base,
  &scc_info_Code_interface_2eproto.base,
  &scc_info_CreateGraph_interface_2eproto.base,
  &scc_info_CreateIndex_interface_2eproto.base,
  &scc_info_CreateTable_interface_2eproto.base,
  &scc_info_DefineVertex_interface_2eproto.base,
  &scc_info_Double_interface_2eproto.base,
  &scc_info_DoubleVec_interface_2eproto.base,
  &scc_info_EdgeList_interface_2eproto.base,
  &scc_info_Eval_interface_2eproto.base,
  &scc_info_Field_interface_2eproto.base,
  &scc_info_Float_interface_2eproto.base,
  &scc_info_FloatVec_interface_2eproto.base,
  &scc_info_GAT_interface_2eproto.base,
  &scc_info_GetVertex_interface_2eproto.base,
  &scc_info_GraphInfo_interface_2eproto.base,
  &scc_info_GraphPartition_interface_2eproto.base,
  &scc_info_HostInfo_interface_2eproto.base,
  &scc_info_ImportEdge_interface_2eproto.base,
  &scc_info_ImportVertex_interface_2eproto.base,
  &scc_info_IndexSearch_interface_2eproto.base,
  &scc_info_InsertEdge_interface_2eproto.base,
  &scc_info_InsertEdgeBatch_interface_2eproto.base,
  &scc_info_InsertEdgeBatchVP_interface_2eproto.base,
  &scc_info_InsertEdgeNaive_interface_2eproto.base,
  &scc_info_InsertEdgeVP_interface_2eproto.base,
  &scc_info_InsertRecord_interface_2eproto.base,
  &scc_info_InsertRecordBatch_interface_2eproto.base,
  &scc_info_InsertRecordStr_interface_2eproto.base,
  &scc_info_InsertVertex_interface_2eproto.base,
  &scc_info_InsertVertexBatch_interface_2eproto.base,
  &scc_info_Int_interface_2eproto.base,
  &scc_info_IntVec_interface_2eproto.base,
  &scc_info_LoadGraphFromFolder_interface_2eproto.base,
  &scc_info_Long_interface_2eproto.base,
  &scc_info_LongVec_interface_2eproto.base,
  &scc_info_MemoryStat_interface_2eproto.base,
  &scc_info_MergeInfo_interface_2eproto.base,
  &scc_info_ModelInfo_interface_2eproto.base,
  &scc_info_NodeClassifierInfo_interface_2eproto.base,
  &scc_info_NodeInfo_interface_2eproto.base,
  &scc_info_NodeInfoVec_interface_2eproto.base,
  &scc_info_Record_interface_2eproto.base,
  &scc_info_RemoteObject_interface_2eproto.base,
  &scc_info_RemoteObjectTask_interface_2eproto.base,
  &scc_info_RemoteResult_interface_2eproto.base,
  &scc_info_RemoteTask_interface_2eproto.base,
  &scc_info_RemoteTaskResult_interface_2eproto.base,
  &scc_info_Str_interface_2eproto.base,
  &scc_info_StrVec_interface_2eproto.base,
  &scc_info_Table_interface_2eproto.base,
  &scc_info_TableInfo_interface_2eproto.base,
  &scc_info_TablePartition_interface_2eproto.base,
  &scc_info_TableScan_interface_2eproto.base,
  &scc_info_TestStream_interface_2eproto.base,
  &scc_info_TransferBinary_interface_2eproto.base,
  &scc_info_VertexExists_interface_2eproto.base,
  &scc_info_VertexList_interface_2eproto.base,
  &scc_info_Void_interface_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_interface_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_interface_2eproto = {
  false, false, descriptor_table_protodef_interface_2eproto, "interface.proto", 8631,
  &descriptor_table_interface_2eproto_once, descriptor_table_interface_2eproto_sccs, descriptor_table_interface_2eproto_deps, 62, 0,
  schemas, file_default_instances, TableStruct_interface_2eproto::offsets,
  file_level_metadata_interface_2eproto, 62, file_level_enum_descriptors_interface_2eproto, file_level_service_descriptors_interface_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_interface_2eproto(&descriptor_table_interface_2eproto);
namespace dan {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Code_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_interface_2eproto);
  return file_level_enum_descriptors_interface_2eproto[0];
}
bool Code_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Code_Status Code::OK;
constexpr Code_Status Code::ARCHIVE_ERROR;
constexpr Code_Status Code::RECOVERY_ERROR;
constexpr Code_Status Code::NODE_REIGISTER_ERROR;
constexpr Code_Status Code::INVALID_TABLE_TYPE;
constexpr Code_Status Code::CREATE_TABLE_ERROR;
constexpr Code_Status Code::DROP_TABLE_ERROR;
constexpr Code_Status Code::LOAD_TABLE_ERROR;
constexpr Code_Status Code::DUPLICATED_TABLE_NAME;
constexpr Code_Status Code::TABLE_NOT_FOUND;
constexpr Code_Status Code::CREATE_INDEX_ERROR;
constexpr Code_Status Code::TABLE_PARTITION_ERROR;
constexpr Code_Status Code::TABLE_ALREADY_PARTITIONED;
constexpr Code_Status Code::INSERT_RECORD_ERROR;
constexpr Code_Status Code::TABLE_SCAN_ERROR;
constexpr Code_Status Code::INDEX_SEARCH_ERROR;
constexpr Code_Status Code::CREATE_GRAPH_ERROR;
constexpr Code_Status Code::DROP_GRAPH_ERROR;
constexpr Code_Status Code::DUPLICATED_GRAPH_NAME;
constexpr Code_Status Code::GRAPH_NOT_FOUND;
constexpr Code_Status Code::GRAPH_PARTITION_ERROR;
constexpr Code_Status Code::GRAPH_ALREADY_PARTIONED;
constexpr Code_Status Code::GRAPH_MERGE_ERROR;
constexpr Code_Status Code::DEFINE_VERTEX_ERROR;
constexpr Code_Status Code::IMPORT_VERTEX_ERROR;
constexpr Code_Status Code::INSERT_VERTEX_ERROR;
constexpr Code_Status Code::IMPORT_EDGE_ERROR;
constexpr Code_Status Code::INSERT_EDGE_ERROR;
constexpr Code_Status Code::ADJACENT_LIST_ERROR;
constexpr Code_Status Code::GET_VERTEX_ERROR;
constexpr Code_Status Code::DATA_TRANSFER_ERROR;
constexpr Code_Status Code::INVALID_PARTITION_TYPE;
constexpr Code_Status Code::OBJECT_NOT_FOUND;
constexpr Code_Status Code::SYSTEM_MONITORING_ERROR;
constexpr Code_Status Code::CAUSAL_DISCOVERY_ERROR;
constexpr Code_Status Code::Status_MIN;
constexpr Code_Status Code::Status_MAX;
constexpr int Code::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Void::_Internal {
 public:
};

Void::Void(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.Void)
}
Void::Void(const Void& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dan.Void)
}

void Void::SharedCtor() {
}

Void::~Void() {
  // @@protoc_insertion_point(destructor:dan.Void)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Void::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Void::ArenaDtor(void* object) {
  Void* _this = reinterpret_cast< Void* >(object);
  (void)_this;
}
void Void::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Void::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Void& Void::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Void_interface_2eproto.base);
  return *internal_default_instance();
}


void Void::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.Void)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Void::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Void::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.Void)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.Void)
  return target;
}

size_t Void::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.Void)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Void::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.Void)
  GOOGLE_DCHECK_NE(&from, this);
  const Void* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Void>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.Void)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.Void)
    MergeFrom(*source);
  }
}

void Void::MergeFrom(const Void& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.Void)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Void::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.Void)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Void::CopyFrom(const Void& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.Void)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Void::IsInitialized() const {
  return true;
}

void Void::InternalSwap(Void* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Void::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Int::_Internal {
 public:
};

Int::Int(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.Int)
}
Int::Int(const Int& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v_ = from.v_;
  // @@protoc_insertion_point(copy_constructor:dan.Int)
}

void Int::SharedCtor() {
  v_ = 0;
}

Int::~Int() {
  // @@protoc_insertion_point(destructor:dan.Int)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Int::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Int::ArenaDtor(void* object) {
  Int* _this = reinterpret_cast< Int* >(object);
  (void)_this;
}
void Int::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Int& Int::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Int_interface_2eproto.base);
  return *internal_default_instance();
}


void Int::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.Int)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Int::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Int::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.Int)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 v = 1;
  if (this->v() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.Int)
  return target;
}

size_t Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.Int)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 v = 1;
  if (this->v() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.Int)
  GOOGLE_DCHECK_NE(&from, this);
  const Int* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Int>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.Int)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.Int)
    MergeFrom(*source);
  }
}

void Int::MergeFrom(const Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v() != 0) {
    _internal_set_v(from._internal_v());
  }
}

void Int::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int::CopyFrom(const Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int::IsInitialized() const {
  return true;
}

void Int::InternalSwap(Int* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(v_, other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Int::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntVec::_Internal {
 public:
};

IntVec::IntVec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  v_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.IntVec)
}
IntVec::IntVec(const IntVec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      v_(from.v_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dan.IntVec)
}

void IntVec::SharedCtor() {
}

IntVec::~IntVec() {
  // @@protoc_insertion_point(destructor:dan.IntVec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntVec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntVec::ArenaDtor(void* object) {
  IntVec* _this = reinterpret_cast< IntVec* >(object);
  (void)_this;
}
void IntVec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntVec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntVec& IntVec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntVec_interface_2eproto.base);
  return *internal_default_instance();
}


void IntVec::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.IntVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntVec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_v(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_v(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntVec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.IntVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 v = 1;
  {
    int byte_size = _v_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_v(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.IntVec)
  return target;
}

size_t IntVec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.IntVec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 v = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->v_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _v_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntVec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.IntVec)
  GOOGLE_DCHECK_NE(&from, this);
  const IntVec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntVec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.IntVec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.IntVec)
    MergeFrom(*source);
  }
}

void IntVec::MergeFrom(const IntVec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.IntVec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_.MergeFrom(from.v_);
}

void IntVec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.IntVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntVec::CopyFrom(const IntVec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.IntVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntVec::IsInitialized() const {
  return true;
}

void IntVec::InternalSwap(IntVec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v_.InternalSwap(&other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntVec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Long::_Internal {
 public:
};

Long::Long(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.Long)
}
Long::Long(const Long& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v_ = from.v_;
  // @@protoc_insertion_point(copy_constructor:dan.Long)
}

void Long::SharedCtor() {
  v_ = PROTOBUF_LONGLONG(0);
}

Long::~Long() {
  // @@protoc_insertion_point(destructor:dan.Long)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Long::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Long::ArenaDtor(void* object) {
  Long* _this = reinterpret_cast< Long* >(object);
  (void)_this;
}
void Long::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Long::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Long& Long::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Long_interface_2eproto.base);
  return *internal_default_instance();
}


void Long::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.Long)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Long::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Long::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.Long)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 v = 1;
  if (this->v() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.Long)
  return target;
}

size_t Long::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.Long)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 v = 1;
  if (this->v() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_v());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Long::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.Long)
  GOOGLE_DCHECK_NE(&from, this);
  const Long* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Long>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.Long)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.Long)
    MergeFrom(*source);
  }
}

void Long::MergeFrom(const Long& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.Long)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v() != 0) {
    _internal_set_v(from._internal_v());
  }
}

void Long::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.Long)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Long::CopyFrom(const Long& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.Long)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Long::IsInitialized() const {
  return true;
}

void Long::InternalSwap(Long* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(v_, other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Long::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LongVec::_Internal {
 public:
};

LongVec::LongVec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  v_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.LongVec)
}
LongVec::LongVec(const LongVec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      v_(from.v_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dan.LongVec)
}

void LongVec::SharedCtor() {
}

LongVec::~LongVec() {
  // @@protoc_insertion_point(destructor:dan.LongVec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LongVec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LongVec::ArenaDtor(void* object) {
  LongVec* _this = reinterpret_cast< LongVec* >(object);
  (void)_this;
}
void LongVec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LongVec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LongVec& LongVec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LongVec_interface_2eproto.base);
  return *internal_default_instance();
}


void LongVec::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.LongVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongVec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_v(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_v(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LongVec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.LongVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 v = 1;
  {
    int byte_size = _v_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_v(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.LongVec)
  return target;
}

size_t LongVec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.LongVec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 v = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->v_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _v_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongVec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.LongVec)
  GOOGLE_DCHECK_NE(&from, this);
  const LongVec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LongVec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.LongVec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.LongVec)
    MergeFrom(*source);
  }
}

void LongVec::MergeFrom(const LongVec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.LongVec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_.MergeFrom(from.v_);
}

void LongVec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.LongVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongVec::CopyFrom(const LongVec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.LongVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongVec::IsInitialized() const {
  return true;
}

void LongVec::InternalSwap(LongVec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v_.InternalSwap(&other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LongVec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Float::_Internal {
 public:
};

Float::Float(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.Float)
}
Float::Float(const Float& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v_ = from.v_;
  // @@protoc_insertion_point(copy_constructor:dan.Float)
}

void Float::SharedCtor() {
  v_ = 0;
}

Float::~Float() {
  // @@protoc_insertion_point(destructor:dan.Float)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Float::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Float::ArenaDtor(void* object) {
  Float* _this = reinterpret_cast< Float* >(object);
  (void)_this;
}
void Float::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Float::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Float& Float::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Float_interface_2eproto.base);
  return *internal_default_instance();
}


void Float::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.Float)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Float::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Float::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.Float)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float v = 1;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.Float)
  return target;
}

size_t Float::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.Float)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float v = 1;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Float::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.Float)
  GOOGLE_DCHECK_NE(&from, this);
  const Float* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Float>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.Float)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.Float)
    MergeFrom(*source);
  }
}

void Float::MergeFrom(const Float& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.Float)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.v() <= 0 && from.v() >= 0)) {
    _internal_set_v(from._internal_v());
  }
}

void Float::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.Float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Float::CopyFrom(const Float& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.Float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float::IsInitialized() const {
  return true;
}

void Float::InternalSwap(Float* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(v_, other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Float::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FloatVec::_Internal {
 public:
};

FloatVec::FloatVec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  v_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.FloatVec)
}
FloatVec::FloatVec(const FloatVec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      v_(from.v_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dan.FloatVec)
}

void FloatVec::SharedCtor() {
}

FloatVec::~FloatVec() {
  // @@protoc_insertion_point(destructor:dan.FloatVec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FloatVec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FloatVec::ArenaDtor(void* object) {
  FloatVec* _this = reinterpret_cast< FloatVec* >(object);
  (void)_this;
}
void FloatVec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatVec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatVec& FloatVec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatVec_interface_2eproto.base);
  return *internal_default_instance();
}


void FloatVec::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.FloatVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatVec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_v(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_v(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatVec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.FloatVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float v = 1;
  if (this->_internal_v_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.FloatVec)
  return target;
}

size_t FloatVec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.FloatVec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float v = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_v_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _v_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatVec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.FloatVec)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatVec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatVec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.FloatVec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.FloatVec)
    MergeFrom(*source);
  }
}

void FloatVec::MergeFrom(const FloatVec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.FloatVec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_.MergeFrom(from.v_);
}

void FloatVec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.FloatVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatVec::CopyFrom(const FloatVec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.FloatVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatVec::IsInitialized() const {
  return true;
}

void FloatVec::InternalSwap(FloatVec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v_.InternalSwap(&other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatVec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Double::_Internal {
 public:
};

Double::Double(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.Double)
}
Double::Double(const Double& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v_ = from.v_;
  // @@protoc_insertion_point(copy_constructor:dan.Double)
}

void Double::SharedCtor() {
  v_ = 0;
}

Double::~Double() {
  // @@protoc_insertion_point(destructor:dan.Double)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Double::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Double::ArenaDtor(void* object) {
  Double* _this = reinterpret_cast< Double* >(object);
  (void)_this;
}
void Double::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Double::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Double& Double::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Double_interface_2eproto.base);
  return *internal_default_instance();
}


void Double::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.Double)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Double::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Double::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.Double)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double v = 1;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.Double)
  return target;
}

size_t Double::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.Double)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double v = 1;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Double::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.Double)
  GOOGLE_DCHECK_NE(&from, this);
  const Double* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Double>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.Double)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.Double)
    MergeFrom(*source);
  }
}

void Double::MergeFrom(const Double& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.Double)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.v() <= 0 && from.v() >= 0)) {
    _internal_set_v(from._internal_v());
  }
}

void Double::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.Double)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Double::CopyFrom(const Double& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.Double)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Double::IsInitialized() const {
  return true;
}

void Double::InternalSwap(Double* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(v_, other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Double::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DoubleVec::_Internal {
 public:
};

DoubleVec::DoubleVec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  v_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.DoubleVec)
}
DoubleVec::DoubleVec(const DoubleVec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      v_(from.v_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dan.DoubleVec)
}

void DoubleVec::SharedCtor() {
}

DoubleVec::~DoubleVec() {
  // @@protoc_insertion_point(destructor:dan.DoubleVec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoubleVec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoubleVec::ArenaDtor(void* object) {
  DoubleVec* _this = reinterpret_cast< DoubleVec* >(object);
  (void)_this;
}
void DoubleVec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleVec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleVec& DoubleVec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleVec_interface_2eproto.base);
  return *internal_default_instance();
}


void DoubleVec::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.DoubleVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleVec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_v(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_v(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleVec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.DoubleVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double v = 1;
  if (this->_internal_v_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.DoubleVec)
  return target;
}

size_t DoubleVec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.DoubleVec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double v = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_v_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _v_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleVec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.DoubleVec)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleVec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleVec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.DoubleVec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.DoubleVec)
    MergeFrom(*source);
  }
}

void DoubleVec::MergeFrom(const DoubleVec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.DoubleVec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_.MergeFrom(from.v_);
}

void DoubleVec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.DoubleVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleVec::CopyFrom(const DoubleVec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.DoubleVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleVec::IsInitialized() const {
  return true;
}

void DoubleVec::InternalSwap(DoubleVec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v_.InternalSwap(&other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleVec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Str::_Internal {
 public:
};

Str::Str(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.Str)
}
Str::Str(const Str& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v().empty()) {
    v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_v(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:dan.Str)
}

void Str::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Str_interface_2eproto.base);
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Str::~Str() {
  // @@protoc_insertion_point(destructor:dan.Str)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Str::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  v_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Str::ArenaDtor(void* object) {
  Str* _this = reinterpret_cast< Str* >(object);
  (void)_this;
}
void Str::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Str::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Str& Str::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Str_interface_2eproto.base);
  return *internal_default_instance();
}


void Str::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.Str)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Str::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_v();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.Str.v"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Str::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.Str)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string v = 1;
  if (this->v().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v().data(), static_cast<int>(this->_internal_v().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.Str.v");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.Str)
  return target;
}

size_t Str::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.Str)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string v = 1;
  if (this->v().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Str::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.Str)
  GOOGLE_DCHECK_NE(&from, this);
  const Str* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Str>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.Str)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.Str)
    MergeFrom(*source);
  }
}

void Str::MergeFrom(const Str& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.Str)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v().size() > 0) {
    _internal_set_v(from._internal_v());
  }
}

void Str::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.Str)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Str::CopyFrom(const Str& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.Str)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Str::IsInitialized() const {
  return true;
}

void Str::InternalSwap(Str* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v_.Swap(&other->v_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Str::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StrVec::_Internal {
 public:
};

StrVec::StrVec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  v_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.StrVec)
}
StrVec::StrVec(const StrVec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      v_(from.v_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dan.StrVec)
}

void StrVec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StrVec_interface_2eproto.base);
}

StrVec::~StrVec() {
  // @@protoc_insertion_point(destructor:dan.StrVec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StrVec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StrVec::ArenaDtor(void* object) {
  StrVec* _this = reinterpret_cast< StrVec* >(object);
  (void)_this;
}
void StrVec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StrVec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StrVec& StrVec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StrVec_interface_2eproto.base);
  return *internal_default_instance();
}


void StrVec::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.StrVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrVec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_v();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.StrVec.v"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StrVec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.StrVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string v = 1;
  for (int i = 0, n = this->_internal_v_size(); i < n; i++) {
    const auto& s = this->_internal_v(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.StrVec.v");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.StrVec)
  return target;
}

size_t StrVec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.StrVec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string v = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(v_.size());
  for (int i = 0, n = v_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      v_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StrVec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.StrVec)
  GOOGLE_DCHECK_NE(&from, this);
  const StrVec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StrVec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.StrVec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.StrVec)
    MergeFrom(*source);
  }
}

void StrVec::MergeFrom(const StrVec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.StrVec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_.MergeFrom(from.v_);
}

void StrVec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.StrVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrVec::CopyFrom(const StrVec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.StrVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrVec::IsInitialized() const {
  return true;
}

void StrVec::InternalSwap(StrVec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v_.InternalSwap(&other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StrVec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Eval::_Internal {
 public:
  static const ::dan::IntVec& il(const Eval* msg);
  static const ::dan::LongVec& ll(const Eval* msg);
  static const ::dan::FloatVec& fl(const Eval* msg);
  static const ::dan::DoubleVec& dl(const Eval* msg);
};

const ::dan::IntVec&
Eval::_Internal::il(const Eval* msg) {
  return *msg->v_.il_;
}
const ::dan::LongVec&
Eval::_Internal::ll(const Eval* msg) {
  return *msg->v_.ll_;
}
const ::dan::FloatVec&
Eval::_Internal::fl(const Eval* msg) {
  return *msg->v_.fl_;
}
const ::dan::DoubleVec&
Eval::_Internal::dl(const Eval* msg) {
  return *msg->v_.dl_;
}
void Eval::set_allocated_il(::dan::IntVec* il) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_v();
  if (il) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(il);
    if (message_arena != submessage_arena) {
      il = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, il, submessage_arena);
    }
    set_has_il();
    v_.il_ = il;
  }
  // @@protoc_insertion_point(field_set_allocated:dan.Eval.il)
}
void Eval::set_allocated_ll(::dan::LongVec* ll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_v();
  if (ll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ll);
    if (message_arena != submessage_arena) {
      ll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ll, submessage_arena);
    }
    set_has_ll();
    v_.ll_ = ll;
  }
  // @@protoc_insertion_point(field_set_allocated:dan.Eval.ll)
}
void Eval::set_allocated_fl(::dan::FloatVec* fl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_v();
  if (fl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fl);
    if (message_arena != submessage_arena) {
      fl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fl, submessage_arena);
    }
    set_has_fl();
    v_.fl_ = fl;
  }
  // @@protoc_insertion_point(field_set_allocated:dan.Eval.fl)
}
void Eval::set_allocated_dl(::dan::DoubleVec* dl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_v();
  if (dl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dl);
    if (message_arena != submessage_arena) {
      dl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dl, submessage_arena);
    }
    set_has_dl();
    v_.dl_ = dl;
  }
  // @@protoc_insertion_point(field_set_allocated:dan.Eval.dl)
}
Eval::Eval(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.Eval)
}
Eval::Eval(const Eval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_v();
  switch (from.v_case()) {
    case kL: {
      _internal_set_l(from._internal_l());
      break;
    }
    case kD: {
      _internal_set_d(from._internal_d());
      break;
    }
    case kS: {
      _internal_set_s(from._internal_s());
      break;
    }
    case kB: {
      _internal_set_b(from._internal_b());
      break;
    }
    case kIl: {
      _internal_mutable_il()->::dan::IntVec::MergeFrom(from._internal_il());
      break;
    }
    case kLl: {
      _internal_mutable_ll()->::dan::LongVec::MergeFrom(from._internal_ll());
      break;
    }
    case kFl: {
      _internal_mutable_fl()->::dan::FloatVec::MergeFrom(from._internal_fl());
      break;
    }
    case kDl: {
      _internal_mutable_dl()->::dan::DoubleVec::MergeFrom(from._internal_dl());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dan.Eval)
}

void Eval::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Eval_interface_2eproto.base);
  clear_has_v();
}

Eval::~Eval() {
  // @@protoc_insertion_point(destructor:dan.Eval)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Eval::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_v()) {
    clear_v();
  }
}

void Eval::ArenaDtor(void* object) {
  Eval* _this = reinterpret_cast< Eval* >(object);
  (void)_this;
}
void Eval::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Eval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Eval& Eval::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Eval_interface_2eproto.base);
  return *internal_default_instance();
}


void Eval::clear_v() {
// @@protoc_insertion_point(one_of_clear_start:dan.Eval)
  switch (v_case()) {
    case kL: {
      // No need to clear
      break;
    }
    case kD: {
      // No need to clear
      break;
    }
    case kS: {
      v_.s_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kB: {
      // No need to clear
      break;
    }
    case kIl: {
      if (GetArena() == nullptr) {
        delete v_.il_;
      }
      break;
    }
    case kLl: {
      if (GetArena() == nullptr) {
        delete v_.ll_;
      }
      break;
    }
    case kFl: {
      if (GetArena() == nullptr) {
        delete v_.fl_;
      }
      break;
    }
    case kDl: {
      if (GetArena() == nullptr) {
        delete v_.dl_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = V_NOT_SET;
}


void Eval::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.Eval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_v();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Eval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 l = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_l(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _internal_set_d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.Eval.s"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool b = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_b(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.IntVec il = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_il(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.LongVec ll = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.FloatVec fl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_fl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.DoubleVec dl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Eval::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.Eval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 l = 1;
  if (_internal_has_l()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_l(), target);
  }

  // double d = 2;
  if (_internal_has_d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_d(), target);
  }

  // string s = 3;
  if (_internal_has_s()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.Eval.s");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_s(), target);
  }

  // bool b = 4;
  if (_internal_has_b()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_b(), target);
  }

  // .dan.IntVec il = 5;
  if (_internal_has_il()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::il(this), target, stream);
  }

  // .dan.LongVec ll = 6;
  if (_internal_has_ll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ll(this), target, stream);
  }

  // .dan.FloatVec fl = 7;
  if (_internal_has_fl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::fl(this), target, stream);
  }

  // .dan.DoubleVec dl = 8;
  if (_internal_has_dl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::dl(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.Eval)
  return target;
}

size_t Eval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.Eval)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (v_case()) {
    // int64 l = 1;
    case kL: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_l());
      break;
    }
    // double d = 2;
    case kD: {
      total_size += 1 + 8;
      break;
    }
    // string s = 3;
    case kS: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_s());
      break;
    }
    // bool b = 4;
    case kB: {
      total_size += 1 + 1;
      break;
    }
    // .dan.IntVec il = 5;
    case kIl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v_.il_);
      break;
    }
    // .dan.LongVec ll = 6;
    case kLl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v_.ll_);
      break;
    }
    // .dan.FloatVec fl = 7;
    case kFl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v_.fl_);
      break;
    }
    // .dan.DoubleVec dl = 8;
    case kDl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v_.dl_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Eval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.Eval)
  GOOGLE_DCHECK_NE(&from, this);
  const Eval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Eval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.Eval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.Eval)
    MergeFrom(*source);
  }
}

void Eval::MergeFrom(const Eval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.Eval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.v_case()) {
    case kL: {
      _internal_set_l(from._internal_l());
      break;
    }
    case kD: {
      _internal_set_d(from._internal_d());
      break;
    }
    case kS: {
      _internal_set_s(from._internal_s());
      break;
    }
    case kB: {
      _internal_set_b(from._internal_b());
      break;
    }
    case kIl: {
      _internal_mutable_il()->::dan::IntVec::MergeFrom(from._internal_il());
      break;
    }
    case kLl: {
      _internal_mutable_ll()->::dan::LongVec::MergeFrom(from._internal_ll());
      break;
    }
    case kFl: {
      _internal_mutable_fl()->::dan::FloatVec::MergeFrom(from._internal_fl());
      break;
    }
    case kDl: {
      _internal_mutable_dl()->::dan::DoubleVec::MergeFrom(from._internal_dl());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
}

void Eval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.Eval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Eval::CopyFrom(const Eval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.Eval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eval::IsInitialized() const {
  return true;
}

void Eval::InternalSwap(Eval* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(v_, other->v_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Eval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Record::_Internal {
 public:
};

Record::Record(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  v_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.Record)
}
Record::Record(const Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      v_(from.v_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dan.Record)
}

void Record::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Record_interface_2eproto.base);
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:dan.Record)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Record::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Record::ArenaDtor(void* object) {
  Record* _this = reinterpret_cast< Record* >(object);
  (void)_this;
}
void Record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Record& Record::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Record_interface_2eproto.base);
  return *internal_default_instance();
}


void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .dan.Eval v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_v(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dan.Eval v = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_v_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_v(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.Record)
  return target;
}

size_t Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.Record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dan.Eval v = 1;
  total_size += 1UL * this->_internal_v_size();
  for (const auto& msg : this->v_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Record::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const Record* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Record>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.Record)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.Record)
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_.MergeFrom(from.v_);
}

void Record::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  return true;
}

void Record::InternalSwap(Record* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v_.InternalSwap(&other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Record::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Table::_Internal {
 public:
};

Table::Table(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  v_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.Table)
}
Table::Table(const Table& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      v_(from.v_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dan.Table)
}

void Table::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Table_interface_2eproto.base);
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:dan.Table)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Table::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Table::ArenaDtor(void* object) {
  Table* _this = reinterpret_cast< Table* >(object);
  (void)_this;
}
void Table::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Table::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Table& Table::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Table_interface_2eproto.base);
  return *internal_default_instance();
}


void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.Table)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Table::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .dan.Record v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_v(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Table::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.Table)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dan.Record v = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_v_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_v(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.Table)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dan.Record v = 1;
  total_size += 1UL * this->_internal_v_size();
  for (const auto& msg : this->v_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Table::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const Table* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Table>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.Table)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_.MergeFrom(from.v_);
}

void Table::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::InternalSwap(Table* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v_.InternalSwap(&other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Table::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Code::_Internal {
 public:
};

Code::Code(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.Code)
}
Code::Code(const Code& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_ = from.msg_;
  // @@protoc_insertion_point(copy_constructor:dan.Code)
}

void Code::SharedCtor() {
  msg_ = 0;
}

Code::~Code() {
  // @@protoc_insertion_point(destructor:dan.Code)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Code::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Code::ArenaDtor(void* object) {
  Code* _this = reinterpret_cast< Code* >(object);
  (void)_this;
}
void Code::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Code::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Code& Code::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Code_interface_2eproto.base);
  return *internal_default_instance();
}


void Code::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.Code)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Code::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dan.Code.Status msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg(static_cast<::dan::Code_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Code::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.Code)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dan.Code.Status msg = 1;
  if (this->msg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.Code)
  return target;
}

size_t Code::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.Code)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dan.Code.Status msg = 1;
  if (this->msg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Code::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.Code)
  GOOGLE_DCHECK_NE(&from, this);
  const Code* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Code>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.Code)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.Code)
    MergeFrom(*source);
  }
}

void Code::MergeFrom(const Code& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.Code)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg() != 0) {
    _internal_set_msg(from._internal_msg());
  }
}

void Code::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.Code)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Code::CopyFrom(const Code& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.Code)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Code::IsInitialized() const {
  return true;
}

void Code::InternalSwap(Code* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Code::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeInfo::_Internal {
 public:
};

NodeInfo::NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&head_) -
    reinterpret_cast<char*>(&id_)) + sizeof(head_));
  // @@protoc_insertion_point(copy_constructor:dan.NodeInfo)
}

void NodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfo_interface_2eproto.base);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&head_) -
      reinterpret_cast<char*>(&id_)) + sizeof(head_));
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:dan.NodeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo::ArenaDtor(void* object) {
  NodeInfo* _this = reinterpret_cast< NodeInfo* >(object);
  (void)_this;
}
void NodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfo& NodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfo_interface_2eproto.base);
  return *internal_default_instance();
}


void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_) -
      reinterpret_cast<char*>(&id_)) + sizeof(head_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.NodeInfo.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool head = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          head_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.NodeInfo.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // bool head = 4;
  if (this->head() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_head(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.NodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // bool head = 4;
  if (this->head() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.NodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.head() != 0) {
    _internal_set_head(from._internal_head());
  }
}

void NodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfo, head_)
      + sizeof(NodeInfo::head_)
      - PROTOBUF_FIELD_OFFSET(NodeInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeInfoVec::_Internal {
 public:
};

NodeInfoVec::NodeInfoVec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  v_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.NodeInfoVec)
}
NodeInfoVec::NodeInfoVec(const NodeInfoVec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      v_(from.v_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dan.NodeInfoVec)
}

void NodeInfoVec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfoVec_interface_2eproto.base);
}

NodeInfoVec::~NodeInfoVec() {
  // @@protoc_insertion_point(destructor:dan.NodeInfoVec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeInfoVec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeInfoVec::ArenaDtor(void* object) {
  NodeInfoVec* _this = reinterpret_cast< NodeInfoVec* >(object);
  (void)_this;
}
void NodeInfoVec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfoVec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfoVec& NodeInfoVec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfoVec_interface_2eproto.base);
  return *internal_default_instance();
}


void NodeInfoVec::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.NodeInfoVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfoVec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .dan.NodeInfo v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_v(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfoVec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.NodeInfoVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dan.NodeInfo v = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_v_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_v(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.NodeInfoVec)
  return target;
}

size_t NodeInfoVec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.NodeInfoVec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dan.NodeInfo v = 1;
  total_size += 1UL * this->_internal_v_size();
  for (const auto& msg : this->v_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfoVec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.NodeInfoVec)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfoVec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfoVec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.NodeInfoVec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.NodeInfoVec)
    MergeFrom(*source);
  }
}

void NodeInfoVec::MergeFrom(const NodeInfoVec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.NodeInfoVec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_.MergeFrom(from.v_);
}

void NodeInfoVec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.NodeInfoVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfoVec::CopyFrom(const NodeInfoVec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.NodeInfoVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoVec::IsInitialized() const {
  return true;
}

void NodeInfoVec::InternalSwap(NodeInfoVec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v_.InternalSwap(&other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfoVec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Field::_Internal {
 public:
};

Field::Field(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.Field)
}
Field::Field(const Field& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fname().empty()) {
    fname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fname(), 
      GetArena());
  }
  ftype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ftype().empty()) {
    ftype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ftype(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:dan.Field)
}

void Field::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Field_interface_2eproto.base);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ftype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:dan.Field)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Field::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ftype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Field::ArenaDtor(void* object) {
  Field* _this = reinterpret_cast< Field* >(object);
  (void)_this;
}
void Field::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Field& Field::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Field_interface_2eproto.base);
  return *internal_default_instance();
}


void Field::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fname_.ClearToEmpty();
  ftype_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Field::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.Field.fname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ftype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ftype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.Field.ftype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Field::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fname = 1;
  if (this->fname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fname().data(), static_cast<int>(this->_internal_fname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.Field.fname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fname(), target);
  }

  // string ftype = 2;
  if (this->ftype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ftype().data(), static_cast<int>(this->_internal_ftype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.Field.ftype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ftype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.Field)
  return target;
}

size_t Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.Field)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fname = 1;
  if (this->fname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fname());
  }

  // string ftype = 2;
  if (this->ftype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ftype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Field::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.Field)
  GOOGLE_DCHECK_NE(&from, this);
  const Field* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Field>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.Field)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.Field)
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fname().size() > 0) {
    _internal_set_fname(from._internal_fname());
  }
  if (from.ftype().size() > 0) {
    _internal_set_ftype(from._internal_ftype());
  }
}

void Field::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {
  return true;
}

void Field::InternalSwap(Field* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fname_.Swap(&other->fname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ftype_.Swap(&other->ftype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Field::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateTable::_Internal {
 public:
};

CreateTable::CreateTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  schema_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.CreateTable)
}
CreateTable::CreateTable(const CreateTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      schema_(from.schema_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tname().empty()) {
    tname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tname(), 
      GetArena());
  }
  ttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ttype().empty()) {
    ttype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ttype(), 
      GetArena());
  }
  ::memcpy(&inc_fid_, &from.inc_fid_,
    static_cast<size_t>(reinterpret_cast<char*>(&inc_start_) -
    reinterpret_cast<char*>(&inc_fid_)) + sizeof(inc_start_));
  // @@protoc_insertion_point(copy_constructor:dan.CreateTable)
}

void CreateTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTable_interface_2eproto.base);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&inc_fid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&inc_start_) -
      reinterpret_cast<char*>(&inc_fid_)) + sizeof(inc_start_));
}

CreateTable::~CreateTable() {
  // @@protoc_insertion_point(destructor:dan.CreateTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateTable::ArenaDtor(void* object) {
  CreateTable* _this = reinterpret_cast< CreateTable* >(object);
  (void)_this;
}
void CreateTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTable& CreateTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTable_interface_2eproto.base);
  return *internal_default_instance();
}


void CreateTable::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.CreateTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schema_.Clear();
  tname_.ClearToEmpty();
  ttype_.ClearToEmpty();
  ::memset(&inc_fid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inc_start_) -
      reinterpret_cast<char*>(&inc_fid_)) + sizeof(inc_start_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.CreateTable.tname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ttype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.CreateTable.ttype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 inc_fid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          inc_fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 inc_start = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          inc_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dan.Field schema = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_schema(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.CreateTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tname = 1;
  if (this->tname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tname().data(), static_cast<int>(this->_internal_tname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.CreateTable.tname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tname(), target);
  }

  // string ttype = 2;
  if (this->ttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ttype().data(), static_cast<int>(this->_internal_ttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.CreateTable.ttype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ttype(), target);
  }

  // int32 inc_fid = 3;
  if (this->inc_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_inc_fid(), target);
  }

  // int32 inc_start = 4;
  if (this->inc_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_inc_start(), target);
  }

  // repeated .dan.Field schema = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_schema_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_schema(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.CreateTable)
  return target;
}

size_t CreateTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.CreateTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dan.Field schema = 5;
  total_size += 1UL * this->_internal_schema_size();
  for (const auto& msg : this->schema_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tname = 1;
  if (this->tname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tname());
  }

  // string ttype = 2;
  if (this->ttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ttype());
  }

  // int32 inc_fid = 3;
  if (this->inc_fid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inc_fid());
  }

  // int32 inc_start = 4;
  if (this->inc_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inc_start());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.CreateTable)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.CreateTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.CreateTable)
    MergeFrom(*source);
  }
}

void CreateTable::MergeFrom(const CreateTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.CreateTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  schema_.MergeFrom(from.schema_);
  if (from.tname().size() > 0) {
    _internal_set_tname(from._internal_tname());
  }
  if (from.ttype().size() > 0) {
    _internal_set_ttype(from._internal_ttype());
  }
  if (from.inc_fid() != 0) {
    _internal_set_inc_fid(from._internal_inc_fid());
  }
  if (from.inc_start() != 0) {
    _internal_set_inc_start(from._internal_inc_start());
  }
}

void CreateTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.CreateTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTable::CopyFrom(const CreateTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.CreateTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTable::IsInitialized() const {
  return true;
}

void CreateTable::InternalSwap(CreateTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  schema_.InternalSwap(&other->schema_);
  tname_.Swap(&other->tname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ttype_.Swap(&other->ttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateTable, inc_start_)
      + sizeof(CreateTable::inc_start_)
      - PROTOBUF_FIELD_OFFSET(CreateTable, inc_fid_)>(
          reinterpret_cast<char*>(&inc_fid_),
          reinterpret_cast<char*>(&other->inc_fid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateIndex::_Internal {
 public:
};

CreateIndex::CreateIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.CreateIndex)
}
CreateIndex::CreateIndex(const CreateIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tname().empty()) {
    tname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tname(), 
      GetArena());
  }
  ::memcpy(&fid_, &from.fid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unique_) -
    reinterpret_cast<char*>(&fid_)) + sizeof(unique_));
  // @@protoc_insertion_point(copy_constructor:dan.CreateIndex)
}

void CreateIndex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateIndex_interface_2eproto.base);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&unique_) -
      reinterpret_cast<char*>(&fid_)) + sizeof(unique_));
}

CreateIndex::~CreateIndex() {
  // @@protoc_insertion_point(destructor:dan.CreateIndex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateIndex::ArenaDtor(void* object) {
  CreateIndex* _this = reinterpret_cast< CreateIndex* >(object);
  (void)_this;
}
void CreateIndex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateIndex& CreateIndex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateIndex_interface_2eproto.base);
  return *internal_default_instance();
}


void CreateIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.CreateIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tname_.ClearToEmpty();
  ::memset(&fid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_) -
      reinterpret_cast<char*>(&fid_)) + sizeof(unique_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.CreateIndex.tname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool unique = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          unique_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateIndex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.CreateIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tname = 1;
  if (this->tname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tname().data(), static_cast<int>(this->_internal_tname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.CreateIndex.tname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tname(), target);
  }

  // int32 fid = 2;
  if (this->fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fid(), target);
  }

  // bool unique = 3;
  if (this->unique() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_unique(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.CreateIndex)
  return target;
}

size_t CreateIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.CreateIndex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tname = 1;
  if (this->tname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tname());
  }

  // int32 fid = 2;
  if (this->fid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fid());
  }

  // bool unique = 3;
  if (this->unique() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateIndex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.CreateIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateIndex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.CreateIndex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.CreateIndex)
    MergeFrom(*source);
  }
}

void CreateIndex::MergeFrom(const CreateIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.CreateIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tname().size() > 0) {
    _internal_set_tname(from._internal_tname());
  }
  if (from.fid() != 0) {
    _internal_set_fid(from._internal_fid());
  }
  if (from.unique() != 0) {
    _internal_set_unique(from._internal_unique());
  }
}

void CreateIndex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.CreateIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateIndex::CopyFrom(const CreateIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.CreateIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIndex::IsInitialized() const {
  return true;
}

void CreateIndex::InternalSwap(CreateIndex* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tname_.Swap(&other->tname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateIndex, unique_)
      + sizeof(CreateIndex::unique_)
      - PROTOBUF_FIELD_OFFSET(CreateIndex, fid_)>(
          reinterpret_cast<char*>(&fid_),
          reinterpret_cast<char*>(&other->fid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateIndex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TablePartition::_Internal {
 public:
  static const ::dan::StrVec& nodes(const TablePartition* msg);
};

const ::dan::StrVec&
TablePartition::_Internal::nodes(const TablePartition* msg) {
  return *msg->nodes_;
}
TablePartition::TablePartition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.TablePartition)
}
TablePartition::TablePartition(const TablePartition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tname().empty()) {
    tname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tname(), 
      GetArena());
  }
  if (from._internal_has_nodes()) {
    nodes_ = new ::dan::StrVec(*from.nodes_);
  } else {
    nodes_ = nullptr;
  }
  fid_ = from.fid_;
  // @@protoc_insertion_point(copy_constructor:dan.TablePartition)
}

void TablePartition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TablePartition_interface_2eproto.base);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nodes_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fid_) -
      reinterpret_cast<char*>(&nodes_)) + sizeof(fid_));
}

TablePartition::~TablePartition() {
  // @@protoc_insertion_point(destructor:dan.TablePartition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TablePartition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nodes_;
}

void TablePartition::ArenaDtor(void* object) {
  TablePartition* _this = reinterpret_cast< TablePartition* >(object);
  (void)_this;
}
void TablePartition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TablePartition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TablePartition& TablePartition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TablePartition_interface_2eproto.base);
  return *internal_default_instance();
}


void TablePartition::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.TablePartition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tname_.ClearToEmpty();
  if (GetArena() == nullptr && nodes_ != nullptr) {
    delete nodes_;
  }
  nodes_ = nullptr;
  fid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TablePartition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.TablePartition.tname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.StrVec nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TablePartition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.TablePartition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tname = 1;
  if (this->tname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tname().data(), static_cast<int>(this->_internal_tname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.TablePartition.tname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tname(), target);
  }

  // int32 fid = 2;
  if (this->fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fid(), target);
  }

  // .dan.StrVec nodes = 3;
  if (this->has_nodes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::nodes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.TablePartition)
  return target;
}

size_t TablePartition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.TablePartition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tname = 1;
  if (this->tname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tname());
  }

  // .dan.StrVec nodes = 3;
  if (this->has_nodes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodes_);
  }

  // int32 fid = 2;
  if (this->fid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TablePartition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.TablePartition)
  GOOGLE_DCHECK_NE(&from, this);
  const TablePartition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TablePartition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.TablePartition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.TablePartition)
    MergeFrom(*source);
  }
}

void TablePartition::MergeFrom(const TablePartition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.TablePartition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tname().size() > 0) {
    _internal_set_tname(from._internal_tname());
  }
  if (from.has_nodes()) {
    _internal_mutable_nodes()->::dan::StrVec::MergeFrom(from._internal_nodes());
  }
  if (from.fid() != 0) {
    _internal_set_fid(from._internal_fid());
  }
}

void TablePartition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.TablePartition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TablePartition::CopyFrom(const TablePartition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.TablePartition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TablePartition::IsInitialized() const {
  return true;
}

void TablePartition::InternalSwap(TablePartition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tname_.Swap(&other->tname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TablePartition, fid_)
      + sizeof(TablePartition::fid_)
      - PROTOBUF_FIELD_OFFSET(TablePartition, nodes_)>(
          reinterpret_cast<char*>(&nodes_),
          reinterpret_cast<char*>(&other->nodes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TablePartition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TableInfo::_Internal {
 public:
  static const ::dan::StrVec& fields(const TableInfo* msg);
  static const ::dan::StrVec& nodes(const TableInfo* msg);
};

const ::dan::StrVec&
TableInfo::_Internal::fields(const TableInfo* msg) {
  return *msg->fields_;
}
const ::dan::StrVec&
TableInfo::_Internal::nodes(const TableInfo* msg) {
  return *msg->nodes_;
}
TableInfo::TableInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.TableInfo)
}
TableInfo::TableInfo(const TableInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fields()) {
    fields_ = new ::dan::StrVec(*from.fields_);
  } else {
    fields_ = nullptr;
  }
  if (from._internal_has_nodes()) {
    nodes_ = new ::dan::StrVec(*from.nodes_);
  } else {
    nodes_ = nullptr;
  }
  part_fid_ = from.part_fid_;
  // @@protoc_insertion_point(copy_constructor:dan.TableInfo)
}

void TableInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TableInfo_interface_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fields_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&part_fid_) -
      reinterpret_cast<char*>(&fields_)) + sizeof(part_fid_));
}

TableInfo::~TableInfo() {
  // @@protoc_insertion_point(destructor:dan.TableInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fields_;
  if (this != internal_default_instance()) delete nodes_;
}

void TableInfo::ArenaDtor(void* object) {
  TableInfo* _this = reinterpret_cast< TableInfo* >(object);
  (void)_this;
}
void TableInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableInfo& TableInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableInfo_interface_2eproto.base);
  return *internal_default_instance();
}


void TableInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.TableInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fields_ != nullptr) {
    delete fields_;
  }
  fields_ = nullptr;
  if (GetArena() == nullptr && nodes_ != nullptr) {
    delete nodes_;
  }
  nodes_ = nullptr;
  part_fid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dan.StrVec fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.StrVec nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 part_fid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          part_fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.TableInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dan.StrVec fields = 1;
  if (this->has_fields()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fields(this), target, stream);
  }

  // .dan.StrVec nodes = 2;
  if (this->has_nodes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nodes(this), target, stream);
  }

  // int32 part_fid = 3;
  if (this->part_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_part_fid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.TableInfo)
  return target;
}

size_t TableInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.TableInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dan.StrVec fields = 1;
  if (this->has_fields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fields_);
  }

  // .dan.StrVec nodes = 2;
  if (this->has_nodes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodes_);
  }

  // int32 part_fid = 3;
  if (this->part_fid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_part_fid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.TableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TableInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.TableInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.TableInfo)
    MergeFrom(*source);
  }
}

void TableInfo::MergeFrom(const TableInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.TableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fields()) {
    _internal_mutable_fields()->::dan::StrVec::MergeFrom(from._internal_fields());
  }
  if (from.has_nodes()) {
    _internal_mutable_nodes()->::dan::StrVec::MergeFrom(from._internal_nodes());
  }
  if (from.part_fid() != 0) {
    _internal_set_part_fid(from._internal_part_fid());
  }
}

void TableInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.TableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableInfo::CopyFrom(const TableInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.TableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInfo::IsInitialized() const {
  return true;
}

void TableInfo::InternalSwap(TableInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableInfo, part_fid_)
      + sizeof(TableInfo::part_fid_)
      - PROTOBUF_FIELD_OFFSET(TableInfo, fields_)>(
          reinterpret_cast<char*>(&fields_),
          reinterpret_cast<char*>(&other->fields_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateGraph::_Internal {
 public:
  static const ::dan::StrVec& nodes(const CreateGraph* msg);
};

const ::dan::StrVec&
CreateGraph::_Internal::nodes(const CreateGraph* msg) {
  return *msg->nodes_;
}
CreateGraph::CreateGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vschema_(arena),
  eschema_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.CreateGraph)
}
CreateGraph::CreateGraph(const CreateGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vschema_(from.vschema_),
      eschema_(from.eschema_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  vpname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vpname().empty()) {
    vpname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vpname(), 
      GetArena());
  }
  vptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vptype().empty()) {
    vptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vptype(), 
      GetArena());
  }
  eptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_eptype().empty()) {
    eptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_eptype(), 
      GetArena());
  }
  if (from._internal_has_nodes()) {
    nodes_ = new ::dan::StrVec(*from.nodes_);
  } else {
    nodes_ = nullptr;
  }
  ::memcpy(&vpfid_, &from.vpfid_,
    static_cast<size_t>(reinterpret_cast<char*>(&part_type_) -
    reinterpret_cast<char*>(&vpfid_)) + sizeof(part_type_));
  // @@protoc_insertion_point(copy_constructor:dan.CreateGraph)
}

void CreateGraph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateGraph_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vpname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nodes_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&part_type_) -
      reinterpret_cast<char*>(&nodes_)) + sizeof(part_type_));
}

CreateGraph::~CreateGraph() {
  // @@protoc_insertion_point(destructor:dan.CreateGraph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vpname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vptype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eptype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nodes_;
}

void CreateGraph::ArenaDtor(void* object) {
  CreateGraph* _this = reinterpret_cast< CreateGraph* >(object);
  (void)_this;
}
void CreateGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateGraph& CreateGraph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateGraph_interface_2eproto.base);
  return *internal_default_instance();
}


void CreateGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.CreateGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vschema_.Clear();
  eschema_.Clear();
  gname_.ClearToEmpty();
  vpname_.ClearToEmpty();
  vptype_.ClearToEmpty();
  eptype_.ClearToEmpty();
  if (GetArena() == nullptr && nodes_ != nullptr) {
    delete nodes_;
  }
  nodes_ = nullptr;
  ::memset(&vpfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&part_type_) -
      reinterpret_cast<char*>(&vpfid_)) + sizeof(part_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.CreateGraph.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vpname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vpname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.CreateGraph.vpname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dan.Field vschema = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vschema(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 vpfid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vpfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vptype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_vptype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.CreateGraph.vptype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dan.Field eschema = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_eschema(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string eptype = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_eptype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.CreateGraph.eptype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool incoming = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          incoming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool merge = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          merge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_partition = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_partition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 part_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          part_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.StrVec nodes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateGraph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.CreateGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.CreateGraph.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // string vpname = 2;
  if (this->vpname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vpname().data(), static_cast<int>(this->_internal_vpname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.CreateGraph.vpname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vpname(), target);
  }

  // repeated .dan.Field vschema = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vschema_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_vschema(i), target, stream);
  }

  // int32 vpfid = 4;
  if (this->vpfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_vpfid(), target);
  }

  // string vptype = 5;
  if (this->vptype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vptype().data(), static_cast<int>(this->_internal_vptype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.CreateGraph.vptype");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_vptype(), target);
  }

  // repeated .dan.Field eschema = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_eschema_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_eschema(i), target, stream);
  }

  // string eptype = 7;
  if (this->eptype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eptype().data(), static_cast<int>(this->_internal_eptype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.CreateGraph.eptype");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_eptype(), target);
  }

  // bool incoming = 8;
  if (this->incoming() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_incoming(), target);
  }

  // bool merge = 9;
  if (this->merge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_merge(), target);
  }

  // bool is_partition = 10;
  if (this->is_partition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_partition(), target);
  }

  // int32 part_type = 11;
  if (this->part_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_part_type(), target);
  }

  // .dan.StrVec nodes = 12;
  if (this->has_nodes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::nodes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.CreateGraph)
  return target;
}

size_t CreateGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.CreateGraph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dan.Field vschema = 3;
  total_size += 1UL * this->_internal_vschema_size();
  for (const auto& msg : this->vschema_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dan.Field eschema = 6;
  total_size += 1UL * this->_internal_eschema_size();
  for (const auto& msg : this->eschema_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // string vpname = 2;
  if (this->vpname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vpname());
  }

  // string vptype = 5;
  if (this->vptype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vptype());
  }

  // string eptype = 7;
  if (this->eptype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eptype());
  }

  // .dan.StrVec nodes = 12;
  if (this->has_nodes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodes_);
  }

  // int32 vpfid = 4;
  if (this->vpfid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vpfid());
  }

  // bool incoming = 8;
  if (this->incoming() != 0) {
    total_size += 1 + 1;
  }

  // bool merge = 9;
  if (this->merge() != 0) {
    total_size += 1 + 1;
  }

  // bool is_partition = 10;
  if (this->is_partition() != 0) {
    total_size += 1 + 1;
  }

  // int32 part_type = 11;
  if (this->part_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_part_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateGraph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.CreateGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateGraph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.CreateGraph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.CreateGraph)
    MergeFrom(*source);
  }
}

void CreateGraph::MergeFrom(const CreateGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.CreateGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vschema_.MergeFrom(from.vschema_);
  eschema_.MergeFrom(from.eschema_);
  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.vpname().size() > 0) {
    _internal_set_vpname(from._internal_vpname());
  }
  if (from.vptype().size() > 0) {
    _internal_set_vptype(from._internal_vptype());
  }
  if (from.eptype().size() > 0) {
    _internal_set_eptype(from._internal_eptype());
  }
  if (from.has_nodes()) {
    _internal_mutable_nodes()->::dan::StrVec::MergeFrom(from._internal_nodes());
  }
  if (from.vpfid() != 0) {
    _internal_set_vpfid(from._internal_vpfid());
  }
  if (from.incoming() != 0) {
    _internal_set_incoming(from._internal_incoming());
  }
  if (from.merge() != 0) {
    _internal_set_merge(from._internal_merge());
  }
  if (from.is_partition() != 0) {
    _internal_set_is_partition(from._internal_is_partition());
  }
  if (from.part_type() != 0) {
    _internal_set_part_type(from._internal_part_type());
  }
}

void CreateGraph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.CreateGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGraph::CopyFrom(const CreateGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.CreateGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGraph::IsInitialized() const {
  return true;
}

void CreateGraph::InternalSwap(CreateGraph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vschema_.InternalSwap(&other->vschema_);
  eschema_.InternalSwap(&other->eschema_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vpname_.Swap(&other->vpname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vptype_.Swap(&other->vptype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  eptype_.Swap(&other->eptype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateGraph, part_type_)
      + sizeof(CreateGraph::part_type_)
      - PROTOBUF_FIELD_OFFSET(CreateGraph, nodes_)>(
          reinterpret_cast<char*>(&nodes_),
          reinterpret_cast<char*>(&other->nodes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGraph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GraphPartition::_Internal {
 public:
  static const ::dan::StrVec& nodes(const GraphPartition* msg);
};

const ::dan::StrVec&
GraphPartition::_Internal::nodes(const GraphPartition* msg) {
  return *msg->nodes_;
}
GraphPartition::GraphPartition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.GraphPartition)
}
GraphPartition::GraphPartition(const GraphPartition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  ptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ptype().empty()) {
    ptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ptype(), 
      GetArena());
  }
  if (from._internal_has_nodes()) {
    nodes_ = new ::dan::StrVec(*from.nodes_);
  } else {
    nodes_ = nullptr;
  }
  dop_ = from.dop_;
  // @@protoc_insertion_point(copy_constructor:dan.GraphPartition)
}

void GraphPartition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphPartition_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nodes_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dop_) -
      reinterpret_cast<char*>(&nodes_)) + sizeof(dop_));
}

GraphPartition::~GraphPartition() {
  // @@protoc_insertion_point(destructor:dan.GraphPartition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GraphPartition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ptype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nodes_;
}

void GraphPartition::ArenaDtor(void* object) {
  GraphPartition* _this = reinterpret_cast< GraphPartition* >(object);
  (void)_this;
}
void GraphPartition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphPartition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphPartition& GraphPartition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphPartition_interface_2eproto.base);
  return *internal_default_instance();
}


void GraphPartition::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.GraphPartition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gname_.ClearToEmpty();
  ptype_.ClearToEmpty();
  if (GetArena() == nullptr && nodes_ != nullptr) {
    delete nodes_;
  }
  nodes_ = nullptr;
  dop_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphPartition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.GraphPartition.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ptype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ptype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.GraphPartition.ptype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.StrVec nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphPartition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.GraphPartition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.GraphPartition.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // string ptype = 2;
  if (this->ptype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ptype().data(), static_cast<int>(this->_internal_ptype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.GraphPartition.ptype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ptype(), target);
  }

  // .dan.StrVec nodes = 3;
  if (this->has_nodes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::nodes(this), target, stream);
  }

  // int32 dop = 4;
  if (this->dop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_dop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.GraphPartition)
  return target;
}

size_t GraphPartition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.GraphPartition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // string ptype = 2;
  if (this->ptype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ptype());
  }

  // .dan.StrVec nodes = 3;
  if (this->has_nodes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodes_);
  }

  // int32 dop = 4;
  if (this->dop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dop());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphPartition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.GraphPartition)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphPartition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphPartition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.GraphPartition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.GraphPartition)
    MergeFrom(*source);
  }
}

void GraphPartition::MergeFrom(const GraphPartition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.GraphPartition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.ptype().size() > 0) {
    _internal_set_ptype(from._internal_ptype());
  }
  if (from.has_nodes()) {
    _internal_mutable_nodes()->::dan::StrVec::MergeFrom(from._internal_nodes());
  }
  if (from.dop() != 0) {
    _internal_set_dop(from._internal_dop());
  }
}

void GraphPartition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.GraphPartition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphPartition::CopyFrom(const GraphPartition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.GraphPartition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphPartition::IsInitialized() const {
  return true;
}

void GraphPartition::InternalSwap(GraphPartition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ptype_.Swap(&other->ptype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphPartition, dop_)
      + sizeof(GraphPartition::dop_)
      - PROTOBUF_FIELD_OFFSET(GraphPartition, nodes_)>(
          reinterpret_cast<char*>(&nodes_),
          reinterpret_cast<char*>(&other->nodes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphPartition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GraphInfo::_Internal {
 public:
  static const ::dan::StrVec& vpname(const GraphInfo* msg);
  static const ::dan::StrVec& epfields(const GraphInfo* msg);
};

const ::dan::StrVec&
GraphInfo::_Internal::vpname(const GraphInfo* msg) {
  return *msg->vpname_;
}
const ::dan::StrVec&
GraphInfo::_Internal::epfields(const GraphInfo* msg) {
  return *msg->epfields_;
}
GraphInfo::GraphInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vpfields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.GraphInfo)
}
GraphInfo::GraphInfo(const GraphInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vpfields_(from.vpfields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  if (from._internal_has_vpname()) {
    vpname_ = new ::dan::StrVec(*from.vpname_);
  } else {
    vpname_ = nullptr;
  }
  if (from._internal_has_epfields()) {
    epfields_ = new ::dan::StrVec(*from.epfields_);
  } else {
    epfields_ = nullptr;
  }
  incoming_ = from.incoming_;
  // @@protoc_insertion_point(copy_constructor:dan.GraphInfo)
}

void GraphInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphInfo_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vpname_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&incoming_) -
      reinterpret_cast<char*>(&vpname_)) + sizeof(incoming_));
}

GraphInfo::~GraphInfo() {
  // @@protoc_insertion_point(destructor:dan.GraphInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GraphInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vpname_;
  if (this != internal_default_instance()) delete epfields_;
}

void GraphInfo::ArenaDtor(void* object) {
  GraphInfo* _this = reinterpret_cast< GraphInfo* >(object);
  (void)_this;
}
void GraphInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphInfo& GraphInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphInfo_interface_2eproto.base);
  return *internal_default_instance();
}


void GraphInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.GraphInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vpfields_.Clear();
  gname_.ClearToEmpty();
  if (GetArena() == nullptr && vpname_ != nullptr) {
    delete vpname_;
  }
  vpname_ = nullptr;
  if (GetArena() == nullptr && epfields_ != nullptr) {
    delete epfields_;
  }
  epfields_ = nullptr;
  incoming_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.GraphInfo.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.StrVec vpname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dan.StrVec vpfields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vpfields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .dan.StrVec epfields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_epfields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool incoming = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          incoming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.GraphInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.GraphInfo.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // .dan.StrVec vpname = 2;
  if (this->has_vpname()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vpname(this), target, stream);
  }

  // repeated .dan.StrVec vpfields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vpfields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_vpfields(i), target, stream);
  }

  // .dan.StrVec epfields = 4;
  if (this->has_epfields()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::epfields(this), target, stream);
  }

  // bool incoming = 5;
  if (this->incoming() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_incoming(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.GraphInfo)
  return target;
}

size_t GraphInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.GraphInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dan.StrVec vpfields = 3;
  total_size += 1UL * this->_internal_vpfields_size();
  for (const auto& msg : this->vpfields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // .dan.StrVec vpname = 2;
  if (this->has_vpname()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vpname_);
  }

  // .dan.StrVec epfields = 4;
  if (this->has_epfields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *epfields_);
  }

  // bool incoming = 5;
  if (this->incoming() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.GraphInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.GraphInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.GraphInfo)
    MergeFrom(*source);
  }
}

void GraphInfo::MergeFrom(const GraphInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.GraphInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vpfields_.MergeFrom(from.vpfields_);
  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.has_vpname()) {
    _internal_mutable_vpname()->::dan::StrVec::MergeFrom(from._internal_vpname());
  }
  if (from.has_epfields()) {
    _internal_mutable_epfields()->::dan::StrVec::MergeFrom(from._internal_epfields());
  }
  if (from.incoming() != 0) {
    _internal_set_incoming(from._internal_incoming());
  }
}

void GraphInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.GraphInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphInfo::CopyFrom(const GraphInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.GraphInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphInfo::IsInitialized() const {
  return true;
}

void GraphInfo::InternalSwap(GraphInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vpfields_.InternalSwap(&other->vpfields_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphInfo, incoming_)
      + sizeof(GraphInfo::incoming_)
      - PROTOBUF_FIELD_OFFSET(GraphInfo, vpname_)>(
          reinterpret_cast<char*>(&vpname_),
          reinterpret_cast<char*>(&other->vpname_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertRecord::_Internal {
 public:
  static const ::dan::Record& values(const InsertRecord* msg);
};

const ::dan::Record&
InsertRecord::_Internal::values(const InsertRecord* msg) {
  return *msg->values_;
}
InsertRecord::InsertRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.InsertRecord)
}
InsertRecord::InsertRecord(const InsertRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tname().empty()) {
    tname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tname(), 
      GetArena());
  }
  if (from._internal_has_values()) {
    values_ = new ::dan::Record(*from.values_);
  } else {
    values_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dan.InsertRecord)
}

void InsertRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertRecord_interface_2eproto.base);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  values_ = nullptr;
}

InsertRecord::~InsertRecord() {
  // @@protoc_insertion_point(destructor:dan.InsertRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete values_;
}

void InsertRecord::ArenaDtor(void* object) {
  InsertRecord* _this = reinterpret_cast< InsertRecord* >(object);
  (void)_this;
}
void InsertRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertRecord& InsertRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertRecord_interface_2eproto.base);
  return *internal_default_instance();
}


void InsertRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.InsertRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tname_.ClearToEmpty();
  if (GetArena() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.InsertRecord.tname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Record values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.InsertRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tname = 1;
  if (this->tname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tname().data(), static_cast<int>(this->_internal_tname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.InsertRecord.tname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tname(), target);
  }

  // .dan.Record values = 2;
  if (this->has_values()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::values(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.InsertRecord)
  return target;
}

size_t InsertRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.InsertRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tname = 1;
  if (this->tname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tname());
  }

  // .dan.Record values = 2;
  if (this->has_values()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *values_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.InsertRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.InsertRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.InsertRecord)
    MergeFrom(*source);
  }
}

void InsertRecord::MergeFrom(const InsertRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.InsertRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tname().size() > 0) {
    _internal_set_tname(from._internal_tname());
  }
  if (from.has_values()) {
    _internal_mutable_values()->::dan::Record::MergeFrom(from._internal_values());
  }
}

void InsertRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.InsertRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertRecord::CopyFrom(const InsertRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.InsertRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRecord::IsInitialized() const {
  return true;
}

void InsertRecord::InternalSwap(InsertRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tname_.Swap(&other->tname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(values_, other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertRecordStr::_Internal {
 public:
  static const ::dan::StrVec& values(const InsertRecordStr* msg);
};

const ::dan::StrVec&
InsertRecordStr::_Internal::values(const InsertRecordStr* msg) {
  return *msg->values_;
}
InsertRecordStr::InsertRecordStr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.InsertRecordStr)
}
InsertRecordStr::InsertRecordStr(const InsertRecordStr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tname().empty()) {
    tname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tname(), 
      GetArena());
  }
  if (from._internal_has_values()) {
    values_ = new ::dan::StrVec(*from.values_);
  } else {
    values_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dan.InsertRecordStr)
}

void InsertRecordStr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertRecordStr_interface_2eproto.base);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  values_ = nullptr;
}

InsertRecordStr::~InsertRecordStr() {
  // @@protoc_insertion_point(destructor:dan.InsertRecordStr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertRecordStr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete values_;
}

void InsertRecordStr::ArenaDtor(void* object) {
  InsertRecordStr* _this = reinterpret_cast< InsertRecordStr* >(object);
  (void)_this;
}
void InsertRecordStr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertRecordStr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertRecordStr& InsertRecordStr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertRecordStr_interface_2eproto.base);
  return *internal_default_instance();
}


void InsertRecordStr::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.InsertRecordStr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tname_.ClearToEmpty();
  if (GetArena() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRecordStr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.InsertRecordStr.tname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.StrVec values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertRecordStr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.InsertRecordStr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tname = 1;
  if (this->tname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tname().data(), static_cast<int>(this->_internal_tname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.InsertRecordStr.tname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tname(), target);
  }

  // .dan.StrVec values = 2;
  if (this->has_values()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::values(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.InsertRecordStr)
  return target;
}

size_t InsertRecordStr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.InsertRecordStr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tname = 1;
  if (this->tname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tname());
  }

  // .dan.StrVec values = 2;
  if (this->has_values()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *values_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertRecordStr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.InsertRecordStr)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertRecordStr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertRecordStr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.InsertRecordStr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.InsertRecordStr)
    MergeFrom(*source);
  }
}

void InsertRecordStr::MergeFrom(const InsertRecordStr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.InsertRecordStr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tname().size() > 0) {
    _internal_set_tname(from._internal_tname());
  }
  if (from.has_values()) {
    _internal_mutable_values()->::dan::StrVec::MergeFrom(from._internal_values());
  }
}

void InsertRecordStr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.InsertRecordStr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertRecordStr::CopyFrom(const InsertRecordStr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.InsertRecordStr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRecordStr::IsInitialized() const {
  return true;
}

void InsertRecordStr::InternalSwap(InsertRecordStr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tname_.Swap(&other->tname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(values_, other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRecordStr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertRecordBatch::_Internal {
 public:
  static const ::dan::Table& batch(const InsertRecordBatch* msg);
};

const ::dan::Table&
InsertRecordBatch::_Internal::batch(const InsertRecordBatch* msg) {
  return *msg->batch_;
}
InsertRecordBatch::InsertRecordBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.InsertRecordBatch)
}
InsertRecordBatch::InsertRecordBatch(const InsertRecordBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tname().empty()) {
    tname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tname(), 
      GetArena());
  }
  if (from._internal_has_batch()) {
    batch_ = new ::dan::Table(*from.batch_);
  } else {
    batch_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dan.InsertRecordBatch)
}

void InsertRecordBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertRecordBatch_interface_2eproto.base);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_ = nullptr;
}

InsertRecordBatch::~InsertRecordBatch() {
  // @@protoc_insertion_point(destructor:dan.InsertRecordBatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertRecordBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete batch_;
}

void InsertRecordBatch::ArenaDtor(void* object) {
  InsertRecordBatch* _this = reinterpret_cast< InsertRecordBatch* >(object);
  (void)_this;
}
void InsertRecordBatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertRecordBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertRecordBatch& InsertRecordBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertRecordBatch_interface_2eproto.base);
  return *internal_default_instance();
}


void InsertRecordBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.InsertRecordBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tname_.ClearToEmpty();
  if (GetArena() == nullptr && batch_ != nullptr) {
    delete batch_;
  }
  batch_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRecordBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.InsertRecordBatch.tname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Table batch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertRecordBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.InsertRecordBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tname = 1;
  if (this->tname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tname().data(), static_cast<int>(this->_internal_tname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.InsertRecordBatch.tname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tname(), target);
  }

  // .dan.Table batch = 2;
  if (this->has_batch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::batch(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.InsertRecordBatch)
  return target;
}

size_t InsertRecordBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.InsertRecordBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tname = 1;
  if (this->tname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tname());
  }

  // .dan.Table batch = 2;
  if (this->has_batch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *batch_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertRecordBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.InsertRecordBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertRecordBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertRecordBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.InsertRecordBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.InsertRecordBatch)
    MergeFrom(*source);
  }
}

void InsertRecordBatch::MergeFrom(const InsertRecordBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.InsertRecordBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tname().size() > 0) {
    _internal_set_tname(from._internal_tname());
  }
  if (from.has_batch()) {
    _internal_mutable_batch()->::dan::Table::MergeFrom(from._internal_batch());
  }
}

void InsertRecordBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.InsertRecordBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertRecordBatch::CopyFrom(const InsertRecordBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.InsertRecordBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRecordBatch::IsInitialized() const {
  return true;
}

void InsertRecordBatch::InternalSwap(InsertRecordBatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tname_.Swap(&other->tname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(batch_, other->batch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRecordBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DefineVertex::_Internal {
 public:
};

DefineVertex::DefineVertex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vschema_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.DefineVertex)
}
DefineVertex::DefineVertex(const DefineVertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vschema_(from.vschema_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  vpname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vpname().empty()) {
    vpname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vpname(), 
      GetArena());
  }
  vptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vptype().empty()) {
    vptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vptype(), 
      GetArena());
  }
  vpfid_ = from.vpfid_;
  // @@protoc_insertion_point(copy_constructor:dan.DefineVertex)
}

void DefineVertex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DefineVertex_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vpname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vpfid_ = 0;
}

DefineVertex::~DefineVertex() {
  // @@protoc_insertion_point(destructor:dan.DefineVertex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DefineVertex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vpname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vptype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DefineVertex::ArenaDtor(void* object) {
  DefineVertex* _this = reinterpret_cast< DefineVertex* >(object);
  (void)_this;
}
void DefineVertex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefineVertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefineVertex& DefineVertex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefineVertex_interface_2eproto.base);
  return *internal_default_instance();
}


void DefineVertex::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.DefineVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vschema_.Clear();
  gname_.ClearToEmpty();
  vpname_.ClearToEmpty();
  vptype_.ClearToEmpty();
  vpfid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefineVertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.DefineVertex.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vpname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vpname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.DefineVertex.vpname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dan.Field vschema = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vschema(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 vpfid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vpfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vptype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_vptype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.DefineVertex.vptype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefineVertex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.DefineVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.DefineVertex.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // string vpname = 2;
  if (this->vpname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vpname().data(), static_cast<int>(this->_internal_vpname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.DefineVertex.vpname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vpname(), target);
  }

  // repeated .dan.Field vschema = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vschema_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_vschema(i), target, stream);
  }

  // int32 vpfid = 4;
  if (this->vpfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_vpfid(), target);
  }

  // string vptype = 5;
  if (this->vptype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vptype().data(), static_cast<int>(this->_internal_vptype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.DefineVertex.vptype");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_vptype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.DefineVertex)
  return target;
}

size_t DefineVertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.DefineVertex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dan.Field vschema = 3;
  total_size += 1UL * this->_internal_vschema_size();
  for (const auto& msg : this->vschema_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // string vpname = 2;
  if (this->vpname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vpname());
  }

  // string vptype = 5;
  if (this->vptype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vptype());
  }

  // int32 vpfid = 4;
  if (this->vpfid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vpfid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefineVertex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.DefineVertex)
  GOOGLE_DCHECK_NE(&from, this);
  const DefineVertex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefineVertex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.DefineVertex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.DefineVertex)
    MergeFrom(*source);
  }
}

void DefineVertex::MergeFrom(const DefineVertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.DefineVertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vschema_.MergeFrom(from.vschema_);
  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.vpname().size() > 0) {
    _internal_set_vpname(from._internal_vpname());
  }
  if (from.vptype().size() > 0) {
    _internal_set_vptype(from._internal_vptype());
  }
  if (from.vpfid() != 0) {
    _internal_set_vpfid(from._internal_vpfid());
  }
}

void DefineVertex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.DefineVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefineVertex::CopyFrom(const DefineVertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.DefineVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefineVertex::IsInitialized() const {
  return true;
}

void DefineVertex::InternalSwap(DefineVertex* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vschema_.InternalSwap(&other->vschema_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vpname_.Swap(&other->vpname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vptype_.Swap(&other->vptype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(vpfid_, other->vpfid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefineVertex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImportVertex::_Internal {
 public:
};

ImportVertex::ImportVertex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.ImportVertex)
}
ImportVertex::ImportVertex(const ImportVertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  vpname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vpname().empty()) {
    vpname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vpname(), 
      GetArena());
  }
  csv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_csv().empty()) {
    csv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_csv(), 
      GetArena());
  }
  delim_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delim().empty()) {
    delim_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delim(), 
      GetArena());
  }
  header_ = from.header_;
  // @@protoc_insertion_point(copy_constructor:dan.ImportVertex)
}

void ImportVertex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImportVertex_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vpname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  csv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delim_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = false;
}

ImportVertex::~ImportVertex() {
  // @@protoc_insertion_point(destructor:dan.ImportVertex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImportVertex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vpname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  csv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delim_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImportVertex::ArenaDtor(void* object) {
  ImportVertex* _this = reinterpret_cast< ImportVertex* >(object);
  (void)_this;
}
void ImportVertex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImportVertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImportVertex& ImportVertex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImportVertex_interface_2eproto.base);
  return *internal_default_instance();
}


void ImportVertex::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.ImportVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gname_.ClearToEmpty();
  vpname_.ClearToEmpty();
  csv_.ClearToEmpty();
  delim_.ClearToEmpty();
  header_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportVertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.ImportVertex.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vpname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vpname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.ImportVertex.vpname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string csv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_csv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.ImportVertex.csv"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string delim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_delim();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.ImportVertex.delim"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool header = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          header_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImportVertex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.ImportVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.ImportVertex.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // string vpname = 2;
  if (this->vpname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vpname().data(), static_cast<int>(this->_internal_vpname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.ImportVertex.vpname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vpname(), target);
  }

  // string csv = 3;
  if (this->csv().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_csv().data(), static_cast<int>(this->_internal_csv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.ImportVertex.csv");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_csv(), target);
  }

  // string delim = 4;
  if (this->delim().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delim().data(), static_cast<int>(this->_internal_delim().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.ImportVertex.delim");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_delim(), target);
  }

  // bool header = 5;
  if (this->header() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_header(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.ImportVertex)
  return target;
}

size_t ImportVertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.ImportVertex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // string vpname = 2;
  if (this->vpname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vpname());
  }

  // string csv = 3;
  if (this->csv().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_csv());
  }

  // string delim = 4;
  if (this->delim().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delim());
  }

  // bool header = 5;
  if (this->header() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImportVertex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.ImportVertex)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportVertex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImportVertex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.ImportVertex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.ImportVertex)
    MergeFrom(*source);
  }
}

void ImportVertex::MergeFrom(const ImportVertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.ImportVertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.vpname().size() > 0) {
    _internal_set_vpname(from._internal_vpname());
  }
  if (from.csv().size() > 0) {
    _internal_set_csv(from._internal_csv());
  }
  if (from.delim().size() > 0) {
    _internal_set_delim(from._internal_delim());
  }
  if (from.header() != 0) {
    _internal_set_header(from._internal_header());
  }
}

void ImportVertex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.ImportVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportVertex::CopyFrom(const ImportVertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.ImportVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportVertex::IsInitialized() const {
  return true;
}

void ImportVertex::InternalSwap(ImportVertex* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vpname_.Swap(&other->vpname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  csv_.Swap(&other->csv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  delim_.Swap(&other->delim_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportVertex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertVertex::_Internal {
 public:
  static const ::dan::Record& vprop(const InsertVertex* msg);
};

const ::dan::Record&
InsertVertex::_Internal::vprop(const InsertVertex* msg) {
  return *msg->vprop_;
}
InsertVertex::InsertVertex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.InsertVertex)
}
InsertVertex::InsertVertex(const InsertVertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  if (from._internal_has_vprop()) {
    vprop_ = new ::dan::Record(*from.vprop_);
  } else {
    vprop_ = nullptr;
  }
  vpid_ = from.vpid_;
  // @@protoc_insertion_point(copy_constructor:dan.InsertVertex)
}

void InsertVertex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertVertex_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vprop_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vpid_) -
      reinterpret_cast<char*>(&vprop_)) + sizeof(vpid_));
}

InsertVertex::~InsertVertex() {
  // @@protoc_insertion_point(destructor:dan.InsertVertex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertVertex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vprop_;
}

void InsertVertex::ArenaDtor(void* object) {
  InsertVertex* _this = reinterpret_cast< InsertVertex* >(object);
  (void)_this;
}
void InsertVertex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertVertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertVertex& InsertVertex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertVertex_interface_2eproto.base);
  return *internal_default_instance();
}


void InsertVertex::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.InsertVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gname_.ClearToEmpty();
  if (GetArena() == nullptr && vprop_ != nullptr) {
    delete vprop_;
  }
  vprop_ = nullptr;
  vpid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertVertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.InsertVertex.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Record vprop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vprop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vpid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertVertex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.InsertVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.InsertVertex.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // .dan.Record vprop = 2;
  if (this->has_vprop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vprop(this), target, stream);
  }

  // int32 vpid = 3;
  if (this->vpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vpid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.InsertVertex)
  return target;
}

size_t InsertVertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.InsertVertex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // .dan.Record vprop = 2;
  if (this->has_vprop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vprop_);
  }

  // int32 vpid = 3;
  if (this->vpid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vpid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertVertex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.InsertVertex)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertVertex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertVertex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.InsertVertex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.InsertVertex)
    MergeFrom(*source);
  }
}

void InsertVertex::MergeFrom(const InsertVertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.InsertVertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.has_vprop()) {
    _internal_mutable_vprop()->::dan::Record::MergeFrom(from._internal_vprop());
  }
  if (from.vpid() != 0) {
    _internal_set_vpid(from._internal_vpid());
  }
}

void InsertVertex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.InsertVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertVertex::CopyFrom(const InsertVertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.InsertVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertVertex::IsInitialized() const {
  return true;
}

void InsertVertex::InternalSwap(InsertVertex* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertVertex, vpid_)
      + sizeof(InsertVertex::vpid_)
      - PROTOBUF_FIELD_OFFSET(InsertVertex, vprop_)>(
          reinterpret_cast<char*>(&vprop_),
          reinterpret_cast<char*>(&other->vprop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertVertex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertVertexBatch::_Internal {
 public:
  static const ::dan::Table& vprop(const InsertVertexBatch* msg);
  static const ::dan::IntVec& vpids(const InsertVertexBatch* msg);
};

const ::dan::Table&
InsertVertexBatch::_Internal::vprop(const InsertVertexBatch* msg) {
  return *msg->vprop_;
}
const ::dan::IntVec&
InsertVertexBatch::_Internal::vpids(const InsertVertexBatch* msg) {
  return *msg->vpids_;
}
InsertVertexBatch::InsertVertexBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.InsertVertexBatch)
}
InsertVertexBatch::InsertVertexBatch(const InsertVertexBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  if (from._internal_has_vprop()) {
    vprop_ = new ::dan::Table(*from.vprop_);
  } else {
    vprop_ = nullptr;
  }
  if (from._internal_has_vpids()) {
    vpids_ = new ::dan::IntVec(*from.vpids_);
  } else {
    vpids_ = nullptr;
  }
  vpid_ = from.vpid_;
  // @@protoc_insertion_point(copy_constructor:dan.InsertVertexBatch)
}

void InsertVertexBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertVertexBatch_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vprop_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vpid_) -
      reinterpret_cast<char*>(&vprop_)) + sizeof(vpid_));
}

InsertVertexBatch::~InsertVertexBatch() {
  // @@protoc_insertion_point(destructor:dan.InsertVertexBatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertVertexBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vprop_;
  if (this != internal_default_instance()) delete vpids_;
}

void InsertVertexBatch::ArenaDtor(void* object) {
  InsertVertexBatch* _this = reinterpret_cast< InsertVertexBatch* >(object);
  (void)_this;
}
void InsertVertexBatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertVertexBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertVertexBatch& InsertVertexBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertVertexBatch_interface_2eproto.base);
  return *internal_default_instance();
}


void InsertVertexBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.InsertVertexBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gname_.ClearToEmpty();
  if (GetArena() == nullptr && vprop_ != nullptr) {
    delete vprop_;
  }
  vprop_ = nullptr;
  if (GetArena() == nullptr && vpids_ != nullptr) {
    delete vpids_;
  }
  vpids_ = nullptr;
  vpid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertVertexBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.InsertVertexBatch.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Table vprop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vprop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vpid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.IntVec vpids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertVertexBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.InsertVertexBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.InsertVertexBatch.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // .dan.Table vprop = 2;
  if (this->has_vprop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vprop(this), target, stream);
  }

  // int32 vpid = 3;
  if (this->vpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vpid(), target);
  }

  // .dan.IntVec vpids = 4;
  if (this->has_vpids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vpids(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.InsertVertexBatch)
  return target;
}

size_t InsertVertexBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.InsertVertexBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // .dan.Table vprop = 2;
  if (this->has_vprop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vprop_);
  }

  // .dan.IntVec vpids = 4;
  if (this->has_vpids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vpids_);
  }

  // int32 vpid = 3;
  if (this->vpid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vpid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertVertexBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.InsertVertexBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertVertexBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertVertexBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.InsertVertexBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.InsertVertexBatch)
    MergeFrom(*source);
  }
}

void InsertVertexBatch::MergeFrom(const InsertVertexBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.InsertVertexBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.has_vprop()) {
    _internal_mutable_vprop()->::dan::Table::MergeFrom(from._internal_vprop());
  }
  if (from.has_vpids()) {
    _internal_mutable_vpids()->::dan::IntVec::MergeFrom(from._internal_vpids());
  }
  if (from.vpid() != 0) {
    _internal_set_vpid(from._internal_vpid());
  }
}

void InsertVertexBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.InsertVertexBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertVertexBatch::CopyFrom(const InsertVertexBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.InsertVertexBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertVertexBatch::IsInitialized() const {
  return true;
}

void InsertVertexBatch::InternalSwap(InsertVertexBatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertVertexBatch, vpid_)
      + sizeof(InsertVertexBatch::vpid_)
      - PROTOBUF_FIELD_OFFSET(InsertVertexBatch, vprop_)>(
          reinterpret_cast<char*>(&vprop_),
          reinterpret_cast<char*>(&other->vprop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertVertexBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImportEdge::_Internal {
 public:
};

ImportEdge::ImportEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.ImportEdge)
}
ImportEdge::ImportEdge(const ImportEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  csv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_csv().empty()) {
    csv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_csv(), 
      GetArena());
  }
  delim_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delim().empty()) {
    delim_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delim(), 
      GetArena());
  }
  ::memcpy(&src_vpid_, &from.src_vpid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dop_) -
    reinterpret_cast<char*>(&src_vpid_)) + sizeof(dop_));
  // @@protoc_insertion_point(copy_constructor:dan.ImportEdge)
}

void ImportEdge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImportEdge_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  csv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delim_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&src_vpid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dop_) -
      reinterpret_cast<char*>(&src_vpid_)) + sizeof(dop_));
}

ImportEdge::~ImportEdge() {
  // @@protoc_insertion_point(destructor:dan.ImportEdge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImportEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  csv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delim_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImportEdge::ArenaDtor(void* object) {
  ImportEdge* _this = reinterpret_cast< ImportEdge* >(object);
  (void)_this;
}
void ImportEdge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImportEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImportEdge& ImportEdge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImportEdge_interface_2eproto.base);
  return *internal_default_instance();
}


void ImportEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.ImportEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gname_.ClearToEmpty();
  csv_.ClearToEmpty();
  delim_.ClearToEmpty();
  ::memset(&src_vpid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dop_) -
      reinterpret_cast<char*>(&src_vpid_)) + sizeof(dop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.ImportEdge.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string csv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_csv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.ImportEdge.csv"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 src_vpid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          src_vpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dst_vpid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dst_vpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string delim = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_delim();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.ImportEdge.delim"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool header = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          header_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 batch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          batch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dop = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          dop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImportEdge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.ImportEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.ImportEdge.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // string csv = 2;
  if (this->csv().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_csv().data(), static_cast<int>(this->_internal_csv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.ImportEdge.csv");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_csv(), target);
  }

  // int32 src_vpid = 3;
  if (this->src_vpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_src_vpid(), target);
  }

  // int32 dst_vpid = 4;
  if (this->dst_vpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_dst_vpid(), target);
  }

  // string delim = 5;
  if (this->delim().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delim().data(), static_cast<int>(this->_internal_delim().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.ImportEdge.delim");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_delim(), target);
  }

  // bool header = 6;
  if (this->header() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_header(), target);
  }

  // int32 batch = 7;
  if (this->batch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_batch(), target);
  }

  // int32 dop = 8;
  if (this->dop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_dop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.ImportEdge)
  return target;
}

size_t ImportEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.ImportEdge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // string csv = 2;
  if (this->csv().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_csv());
  }

  // string delim = 5;
  if (this->delim().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delim());
  }

  // int32 src_vpid = 3;
  if (this->src_vpid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src_vpid());
  }

  // int32 dst_vpid = 4;
  if (this->dst_vpid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dst_vpid());
  }

  // bool header = 6;
  if (this->header() != 0) {
    total_size += 1 + 1;
  }

  // int32 batch = 7;
  if (this->batch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch());
  }

  // int32 dop = 8;
  if (this->dop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dop());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImportEdge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.ImportEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportEdge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImportEdge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.ImportEdge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.ImportEdge)
    MergeFrom(*source);
  }
}

void ImportEdge::MergeFrom(const ImportEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.ImportEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.csv().size() > 0) {
    _internal_set_csv(from._internal_csv());
  }
  if (from.delim().size() > 0) {
    _internal_set_delim(from._internal_delim());
  }
  if (from.src_vpid() != 0) {
    _internal_set_src_vpid(from._internal_src_vpid());
  }
  if (from.dst_vpid() != 0) {
    _internal_set_dst_vpid(from._internal_dst_vpid());
  }
  if (from.header() != 0) {
    _internal_set_header(from._internal_header());
  }
  if (from.batch() != 0) {
    _internal_set_batch(from._internal_batch());
  }
  if (from.dop() != 0) {
    _internal_set_dop(from._internal_dop());
  }
}

void ImportEdge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.ImportEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportEdge::CopyFrom(const ImportEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.ImportEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportEdge::IsInitialized() const {
  return true;
}

void ImportEdge::InternalSwap(ImportEdge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  csv_.Swap(&other->csv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  delim_.Swap(&other->delim_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImportEdge, dop_)
      + sizeof(ImportEdge::dop_)
      - PROTOBUF_FIELD_OFFSET(ImportEdge, src_vpid_)>(
          reinterpret_cast<char*>(&src_vpid_),
          reinterpret_cast<char*>(&other->src_vpid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportEdge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertEdge::_Internal {
 public:
  static const ::dan::Eval& src(const InsertEdge* msg);
  static const ::dan::Eval& dest(const InsertEdge* msg);
  static const ::dan::Record& eprop(const InsertEdge* msg);
};

const ::dan::Eval&
InsertEdge::_Internal::src(const InsertEdge* msg) {
  return *msg->src_;
}
const ::dan::Eval&
InsertEdge::_Internal::dest(const InsertEdge* msg) {
  return *msg->dest_;
}
const ::dan::Record&
InsertEdge::_Internal::eprop(const InsertEdge* msg) {
  return *msg->eprop_;
}
InsertEdge::InsertEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.InsertEdge)
}
InsertEdge::InsertEdge(const InsertEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  if (from._internal_has_src()) {
    src_ = new ::dan::Eval(*from.src_);
  } else {
    src_ = nullptr;
  }
  if (from._internal_has_dest()) {
    dest_ = new ::dan::Eval(*from.dest_);
  } else {
    dest_ = nullptr;
  }
  if (from._internal_has_eprop()) {
    eprop_ = new ::dan::Record(*from.eprop_);
  } else {
    eprop_ = nullptr;
  }
  ::memcpy(&src_vpid_, &from.src_vpid_,
    static_cast<size_t>(reinterpret_cast<char*>(&only_in_) -
    reinterpret_cast<char*>(&src_vpid_)) + sizeof(only_in_));
  // @@protoc_insertion_point(copy_constructor:dan.InsertEdge)
}

void InsertEdge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertEdge_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&src_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&only_in_) -
      reinterpret_cast<char*>(&src_)) + sizeof(only_in_));
}

InsertEdge::~InsertEdge() {
  // @@protoc_insertion_point(destructor:dan.InsertEdge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete src_;
  if (this != internal_default_instance()) delete dest_;
  if (this != internal_default_instance()) delete eprop_;
}

void InsertEdge::ArenaDtor(void* object) {
  InsertEdge* _this = reinterpret_cast< InsertEdge* >(object);
  (void)_this;
}
void InsertEdge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertEdge& InsertEdge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertEdge_interface_2eproto.base);
  return *internal_default_instance();
}


void InsertEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.InsertEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gname_.ClearToEmpty();
  if (GetArena() == nullptr && src_ != nullptr) {
    delete src_;
  }
  src_ = nullptr;
  if (GetArena() == nullptr && dest_ != nullptr) {
    delete dest_;
  }
  dest_ = nullptr;
  if (GetArena() == nullptr && eprop_ != nullptr) {
    delete eprop_;
  }
  eprop_ = nullptr;
  ::memset(&src_vpid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&only_in_) -
      reinterpret_cast<char*>(&src_vpid_)) + sizeof(only_in_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.InsertEdge.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Eval src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Eval dest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 src_vpid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          src_vpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dest_vpid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dest_vpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Record eprop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_eprop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_in = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ignore_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool only_in = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          only_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertEdge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.InsertEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.InsertEdge.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // .dan.Eval src = 2;
  if (this->has_src()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::src(this), target, stream);
  }

  // .dan.Eval dest = 3;
  if (this->has_dest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dest(this), target, stream);
  }

  // int32 src_vpid = 4;
  if (this->src_vpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_src_vpid(), target);
  }

  // int32 dest_vpid = 5;
  if (this->dest_vpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_dest_vpid(), target);
  }

  // .dan.Record eprop = 6;
  if (this->has_eprop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::eprop(this), target, stream);
  }

  // bool ignore_in = 7;
  if (this->ignore_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_ignore_in(), target);
  }

  // bool only_in = 8;
  if (this->only_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_only_in(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.InsertEdge)
  return target;
}

size_t InsertEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.InsertEdge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // .dan.Eval src = 2;
  if (this->has_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  // .dan.Eval dest = 3;
  if (this->has_dest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_);
  }

  // .dan.Record eprop = 6;
  if (this->has_eprop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eprop_);
  }

  // int32 src_vpid = 4;
  if (this->src_vpid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src_vpid());
  }

  // int32 dest_vpid = 5;
  if (this->dest_vpid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dest_vpid());
  }

  // bool ignore_in = 7;
  if (this->ignore_in() != 0) {
    total_size += 1 + 1;
  }

  // bool only_in = 8;
  if (this->only_in() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertEdge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.InsertEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertEdge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertEdge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.InsertEdge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.InsertEdge)
    MergeFrom(*source);
  }
}

void InsertEdge::MergeFrom(const InsertEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.InsertEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.has_src()) {
    _internal_mutable_src()->::dan::Eval::MergeFrom(from._internal_src());
  }
  if (from.has_dest()) {
    _internal_mutable_dest()->::dan::Eval::MergeFrom(from._internal_dest());
  }
  if (from.has_eprop()) {
    _internal_mutable_eprop()->::dan::Record::MergeFrom(from._internal_eprop());
  }
  if (from.src_vpid() != 0) {
    _internal_set_src_vpid(from._internal_src_vpid());
  }
  if (from.dest_vpid() != 0) {
    _internal_set_dest_vpid(from._internal_dest_vpid());
  }
  if (from.ignore_in() != 0) {
    _internal_set_ignore_in(from._internal_ignore_in());
  }
  if (from.only_in() != 0) {
    _internal_set_only_in(from._internal_only_in());
  }
}

void InsertEdge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.InsertEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertEdge::CopyFrom(const InsertEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.InsertEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertEdge::IsInitialized() const {
  return true;
}

void InsertEdge::InternalSwap(InsertEdge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertEdge, only_in_)
      + sizeof(InsertEdge::only_in_)
      - PROTOBUF_FIELD_OFFSET(InsertEdge, src_)>(
          reinterpret_cast<char*>(&src_),
          reinterpret_cast<char*>(&other->src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertEdge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertEdgeVP::_Internal {
 public:
  static const ::dan::Record& src(const InsertEdgeVP* msg);
  static const ::dan::Record& dest(const InsertEdgeVP* msg);
  static const ::dan::Record& eprop(const InsertEdgeVP* msg);
};

const ::dan::Record&
InsertEdgeVP::_Internal::src(const InsertEdgeVP* msg) {
  return *msg->src_;
}
const ::dan::Record&
InsertEdgeVP::_Internal::dest(const InsertEdgeVP* msg) {
  return *msg->dest_;
}
const ::dan::Record&
InsertEdgeVP::_Internal::eprop(const InsertEdgeVP* msg) {
  return *msg->eprop_;
}
InsertEdgeVP::InsertEdgeVP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.InsertEdgeVP)
}
InsertEdgeVP::InsertEdgeVP(const InsertEdgeVP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  if (from._internal_has_src()) {
    src_ = new ::dan::Record(*from.src_);
  } else {
    src_ = nullptr;
  }
  if (from._internal_has_dest()) {
    dest_ = new ::dan::Record(*from.dest_);
  } else {
    dest_ = nullptr;
  }
  if (from._internal_has_eprop()) {
    eprop_ = new ::dan::Record(*from.eprop_);
  } else {
    eprop_ = nullptr;
  }
  ::memcpy(&src_vpid_, &from.src_vpid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dest_vpid_) -
    reinterpret_cast<char*>(&src_vpid_)) + sizeof(dest_vpid_));
  // @@protoc_insertion_point(copy_constructor:dan.InsertEdgeVP)
}

void InsertEdgeVP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertEdgeVP_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&src_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dest_vpid_) -
      reinterpret_cast<char*>(&src_)) + sizeof(dest_vpid_));
}

InsertEdgeVP::~InsertEdgeVP() {
  // @@protoc_insertion_point(destructor:dan.InsertEdgeVP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertEdgeVP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete src_;
  if (this != internal_default_instance()) delete dest_;
  if (this != internal_default_instance()) delete eprop_;
}

void InsertEdgeVP::ArenaDtor(void* object) {
  InsertEdgeVP* _this = reinterpret_cast< InsertEdgeVP* >(object);
  (void)_this;
}
void InsertEdgeVP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertEdgeVP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertEdgeVP& InsertEdgeVP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertEdgeVP_interface_2eproto.base);
  return *internal_default_instance();
}


void InsertEdgeVP::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.InsertEdgeVP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gname_.ClearToEmpty();
  if (GetArena() == nullptr && src_ != nullptr) {
    delete src_;
  }
  src_ = nullptr;
  if (GetArena() == nullptr && dest_ != nullptr) {
    delete dest_;
  }
  dest_ = nullptr;
  if (GetArena() == nullptr && eprop_ != nullptr) {
    delete eprop_;
  }
  eprop_ = nullptr;
  ::memset(&src_vpid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dest_vpid_) -
      reinterpret_cast<char*>(&src_vpid_)) + sizeof(dest_vpid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertEdgeVP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.InsertEdgeVP.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Record src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Record dest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 src_vpid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          src_vpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dest_vpid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dest_vpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Record eprop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_eprop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertEdgeVP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.InsertEdgeVP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.InsertEdgeVP.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // .dan.Record src = 2;
  if (this->has_src()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::src(this), target, stream);
  }

  // .dan.Record dest = 3;
  if (this->has_dest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dest(this), target, stream);
  }

  // int32 src_vpid = 4;
  if (this->src_vpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_src_vpid(), target);
  }

  // int32 dest_vpid = 5;
  if (this->dest_vpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_dest_vpid(), target);
  }

  // .dan.Record eprop = 6;
  if (this->has_eprop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::eprop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.InsertEdgeVP)
  return target;
}

size_t InsertEdgeVP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.InsertEdgeVP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // .dan.Record src = 2;
  if (this->has_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  // .dan.Record dest = 3;
  if (this->has_dest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_);
  }

  // .dan.Record eprop = 6;
  if (this->has_eprop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eprop_);
  }

  // int32 src_vpid = 4;
  if (this->src_vpid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src_vpid());
  }

  // int32 dest_vpid = 5;
  if (this->dest_vpid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dest_vpid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertEdgeVP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.InsertEdgeVP)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertEdgeVP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertEdgeVP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.InsertEdgeVP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.InsertEdgeVP)
    MergeFrom(*source);
  }
}

void InsertEdgeVP::MergeFrom(const InsertEdgeVP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.InsertEdgeVP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.has_src()) {
    _internal_mutable_src()->::dan::Record::MergeFrom(from._internal_src());
  }
  if (from.has_dest()) {
    _internal_mutable_dest()->::dan::Record::MergeFrom(from._internal_dest());
  }
  if (from.has_eprop()) {
    _internal_mutable_eprop()->::dan::Record::MergeFrom(from._internal_eprop());
  }
  if (from.src_vpid() != 0) {
    _internal_set_src_vpid(from._internal_src_vpid());
  }
  if (from.dest_vpid() != 0) {
    _internal_set_dest_vpid(from._internal_dest_vpid());
  }
}

void InsertEdgeVP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.InsertEdgeVP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertEdgeVP::CopyFrom(const InsertEdgeVP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.InsertEdgeVP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertEdgeVP::IsInitialized() const {
  return true;
}

void InsertEdgeVP::InternalSwap(InsertEdgeVP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertEdgeVP, dest_vpid_)
      + sizeof(InsertEdgeVP::dest_vpid_)
      - PROTOBUF_FIELD_OFFSET(InsertEdgeVP, src_)>(
          reinterpret_cast<char*>(&src_),
          reinterpret_cast<char*>(&other->src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertEdgeVP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertEdgeNaive::_Internal {
 public:
  static const ::dan::Record& eprop(const InsertEdgeNaive* msg);
};

const ::dan::Record&
InsertEdgeNaive::_Internal::eprop(const InsertEdgeNaive* msg) {
  return *msg->eprop_;
}
InsertEdgeNaive::InsertEdgeNaive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.InsertEdgeNaive)
}
InsertEdgeNaive::InsertEdgeNaive(const InsertEdgeNaive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  if (from._internal_has_eprop()) {
    eprop_ = new ::dan::Record(*from.eprop_);
  } else {
    eprop_ = nullptr;
  }
  ::memcpy(&src_, &from.src_,
    static_cast<size_t>(reinterpret_cast<char*>(&only_in_) -
    reinterpret_cast<char*>(&src_)) + sizeof(only_in_));
  // @@protoc_insertion_point(copy_constructor:dan.InsertEdgeNaive)
}

void InsertEdgeNaive::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertEdgeNaive_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&eprop_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&only_in_) -
      reinterpret_cast<char*>(&eprop_)) + sizeof(only_in_));
}

InsertEdgeNaive::~InsertEdgeNaive() {
  // @@protoc_insertion_point(destructor:dan.InsertEdgeNaive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertEdgeNaive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete eprop_;
}

void InsertEdgeNaive::ArenaDtor(void* object) {
  InsertEdgeNaive* _this = reinterpret_cast< InsertEdgeNaive* >(object);
  (void)_this;
}
void InsertEdgeNaive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertEdgeNaive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertEdgeNaive& InsertEdgeNaive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertEdgeNaive_interface_2eproto.base);
  return *internal_default_instance();
}


void InsertEdgeNaive::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.InsertEdgeNaive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gname_.ClearToEmpty();
  if (GetArena() == nullptr && eprop_ != nullptr) {
    delete eprop_;
  }
  eprop_ = nullptr;
  ::memset(&src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&only_in_) -
      reinterpret_cast<char*>(&src_)) + sizeof(only_in_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertEdgeNaive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.InsertEdgeNaive.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          src_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 dest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Record eprop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_eprop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_in = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ignore_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool only_in = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          only_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertEdgeNaive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.InsertEdgeNaive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.InsertEdgeNaive.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // int64 src = 2;
  if (this->src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_src(), target);
  }

  // int64 dest = 3;
  if (this->dest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_dest(), target);
  }

  // .dan.Record eprop = 4;
  if (this->has_eprop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::eprop(this), target, stream);
  }

  // bool ignore_in = 5;
  if (this->ignore_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ignore_in(), target);
  }

  // bool only_in = 6;
  if (this->only_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_only_in(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.InsertEdgeNaive)
  return target;
}

size_t InsertEdgeNaive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.InsertEdgeNaive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // .dan.Record eprop = 4;
  if (this->has_eprop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eprop_);
  }

  // int64 src = 2;
  if (this->src() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_src());
  }

  // int64 dest = 3;
  if (this->dest() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_dest());
  }

  // bool ignore_in = 5;
  if (this->ignore_in() != 0) {
    total_size += 1 + 1;
  }

  // bool only_in = 6;
  if (this->only_in() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertEdgeNaive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.InsertEdgeNaive)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertEdgeNaive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertEdgeNaive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.InsertEdgeNaive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.InsertEdgeNaive)
    MergeFrom(*source);
  }
}

void InsertEdgeNaive::MergeFrom(const InsertEdgeNaive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.InsertEdgeNaive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.has_eprop()) {
    _internal_mutable_eprop()->::dan::Record::MergeFrom(from._internal_eprop());
  }
  if (from.src() != 0) {
    _internal_set_src(from._internal_src());
  }
  if (from.dest() != 0) {
    _internal_set_dest(from._internal_dest());
  }
  if (from.ignore_in() != 0) {
    _internal_set_ignore_in(from._internal_ignore_in());
  }
  if (from.only_in() != 0) {
    _internal_set_only_in(from._internal_only_in());
  }
}

void InsertEdgeNaive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.InsertEdgeNaive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertEdgeNaive::CopyFrom(const InsertEdgeNaive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.InsertEdgeNaive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertEdgeNaive::IsInitialized() const {
  return true;
}

void InsertEdgeNaive::InternalSwap(InsertEdgeNaive* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertEdgeNaive, only_in_)
      + sizeof(InsertEdgeNaive::only_in_)
      - PROTOBUF_FIELD_OFFSET(InsertEdgeNaive, eprop_)>(
          reinterpret_cast<char*>(&eprop_),
          reinterpret_cast<char*>(&other->eprop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertEdgeNaive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertEdgeBatch::_Internal {
 public:
  static const ::dan::Record& src(const InsertEdgeBatch* msg);
  static const ::dan::Record& dest(const InsertEdgeBatch* msg);
  static const ::dan::Table& eprop(const InsertEdgeBatch* msg);
  static const ::dan::IntVec& src_vpid(const InsertEdgeBatch* msg);
  static const ::dan::IntVec& dest_vpid(const InsertEdgeBatch* msg);
};

const ::dan::Record&
InsertEdgeBatch::_Internal::src(const InsertEdgeBatch* msg) {
  return *msg->src_;
}
const ::dan::Record&
InsertEdgeBatch::_Internal::dest(const InsertEdgeBatch* msg) {
  return *msg->dest_;
}
const ::dan::Table&
InsertEdgeBatch::_Internal::eprop(const InsertEdgeBatch* msg) {
  return *msg->eprop_;
}
const ::dan::IntVec&
InsertEdgeBatch::_Internal::src_vpid(const InsertEdgeBatch* msg) {
  return *msg->src_vpid_;
}
const ::dan::IntVec&
InsertEdgeBatch::_Internal::dest_vpid(const InsertEdgeBatch* msg) {
  return *msg->dest_vpid_;
}
InsertEdgeBatch::InsertEdgeBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.InsertEdgeBatch)
}
InsertEdgeBatch::InsertEdgeBatch(const InsertEdgeBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  if (from._internal_has_src()) {
    src_ = new ::dan::Record(*from.src_);
  } else {
    src_ = nullptr;
  }
  if (from._internal_has_dest()) {
    dest_ = new ::dan::Record(*from.dest_);
  } else {
    dest_ = nullptr;
  }
  if (from._internal_has_eprop()) {
    eprop_ = new ::dan::Table(*from.eprop_);
  } else {
    eprop_ = nullptr;
  }
  if (from._internal_has_src_vpid()) {
    src_vpid_ = new ::dan::IntVec(*from.src_vpid_);
  } else {
    src_vpid_ = nullptr;
  }
  if (from._internal_has_dest_vpid()) {
    dest_vpid_ = new ::dan::IntVec(*from.dest_vpid_);
  } else {
    dest_vpid_ = nullptr;
  }
  ::memcpy(&ignore_in_, &from.ignore_in_,
    static_cast<size_t>(reinterpret_cast<char*>(&only_in_) -
    reinterpret_cast<char*>(&ignore_in_)) + sizeof(only_in_));
  // @@protoc_insertion_point(copy_constructor:dan.InsertEdgeBatch)
}

void InsertEdgeBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertEdgeBatch_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&src_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&only_in_) -
      reinterpret_cast<char*>(&src_)) + sizeof(only_in_));
}

InsertEdgeBatch::~InsertEdgeBatch() {
  // @@protoc_insertion_point(destructor:dan.InsertEdgeBatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertEdgeBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete src_;
  if (this != internal_default_instance()) delete dest_;
  if (this != internal_default_instance()) delete eprop_;
  if (this != internal_default_instance()) delete src_vpid_;
  if (this != internal_default_instance()) delete dest_vpid_;
}

void InsertEdgeBatch::ArenaDtor(void* object) {
  InsertEdgeBatch* _this = reinterpret_cast< InsertEdgeBatch* >(object);
  (void)_this;
}
void InsertEdgeBatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertEdgeBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertEdgeBatch& InsertEdgeBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertEdgeBatch_interface_2eproto.base);
  return *internal_default_instance();
}


void InsertEdgeBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.InsertEdgeBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gname_.ClearToEmpty();
  if (GetArena() == nullptr && src_ != nullptr) {
    delete src_;
  }
  src_ = nullptr;
  if (GetArena() == nullptr && dest_ != nullptr) {
    delete dest_;
  }
  dest_ = nullptr;
  if (GetArena() == nullptr && eprop_ != nullptr) {
    delete eprop_;
  }
  eprop_ = nullptr;
  if (GetArena() == nullptr && src_vpid_ != nullptr) {
    delete src_vpid_;
  }
  src_vpid_ = nullptr;
  if (GetArena() == nullptr && dest_vpid_ != nullptr) {
    delete dest_vpid_;
  }
  dest_vpid_ = nullptr;
  ::memset(&ignore_in_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&only_in_) -
      reinterpret_cast<char*>(&ignore_in_)) + sizeof(only_in_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertEdgeBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.InsertEdgeBatch.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Record src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Record dest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Table eprop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_eprop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.IntVec src_vpid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_vpid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.IntVec dest_vpid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_vpid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_in = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ignore_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool only_in = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          only_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertEdgeBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.InsertEdgeBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.InsertEdgeBatch.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // .dan.Record src = 2;
  if (this->has_src()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::src(this), target, stream);
  }

  // .dan.Record dest = 3;
  if (this->has_dest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dest(this), target, stream);
  }

  // .dan.Table eprop = 4;
  if (this->has_eprop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::eprop(this), target, stream);
  }

  // .dan.IntVec src_vpid = 5;
  if (this->has_src_vpid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::src_vpid(this), target, stream);
  }

  // .dan.IntVec dest_vpid = 6;
  if (this->has_dest_vpid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::dest_vpid(this), target, stream);
  }

  // bool ignore_in = 7;
  if (this->ignore_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_ignore_in(), target);
  }

  // bool only_in = 8;
  if (this->only_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_only_in(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.InsertEdgeBatch)
  return target;
}

size_t InsertEdgeBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.InsertEdgeBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // .dan.Record src = 2;
  if (this->has_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  // .dan.Record dest = 3;
  if (this->has_dest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_);
  }

  // .dan.Table eprop = 4;
  if (this->has_eprop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eprop_);
  }

  // .dan.IntVec src_vpid = 5;
  if (this->has_src_vpid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_vpid_);
  }

  // .dan.IntVec dest_vpid = 6;
  if (this->has_dest_vpid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_vpid_);
  }

  // bool ignore_in = 7;
  if (this->ignore_in() != 0) {
    total_size += 1 + 1;
  }

  // bool only_in = 8;
  if (this->only_in() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertEdgeBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.InsertEdgeBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertEdgeBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertEdgeBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.InsertEdgeBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.InsertEdgeBatch)
    MergeFrom(*source);
  }
}

void InsertEdgeBatch::MergeFrom(const InsertEdgeBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.InsertEdgeBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.has_src()) {
    _internal_mutable_src()->::dan::Record::MergeFrom(from._internal_src());
  }
  if (from.has_dest()) {
    _internal_mutable_dest()->::dan::Record::MergeFrom(from._internal_dest());
  }
  if (from.has_eprop()) {
    _internal_mutable_eprop()->::dan::Table::MergeFrom(from._internal_eprop());
  }
  if (from.has_src_vpid()) {
    _internal_mutable_src_vpid()->::dan::IntVec::MergeFrom(from._internal_src_vpid());
  }
  if (from.has_dest_vpid()) {
    _internal_mutable_dest_vpid()->::dan::IntVec::MergeFrom(from._internal_dest_vpid());
  }
  if (from.ignore_in() != 0) {
    _internal_set_ignore_in(from._internal_ignore_in());
  }
  if (from.only_in() != 0) {
    _internal_set_only_in(from._internal_only_in());
  }
}

void InsertEdgeBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.InsertEdgeBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertEdgeBatch::CopyFrom(const InsertEdgeBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.InsertEdgeBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertEdgeBatch::IsInitialized() const {
  return true;
}

void InsertEdgeBatch::InternalSwap(InsertEdgeBatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertEdgeBatch, only_in_)
      + sizeof(InsertEdgeBatch::only_in_)
      - PROTOBUF_FIELD_OFFSET(InsertEdgeBatch, src_)>(
          reinterpret_cast<char*>(&src_),
          reinterpret_cast<char*>(&other->src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertEdgeBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertEdgeBatchVP::_Internal {
 public:
  static const ::dan::Table& src(const InsertEdgeBatchVP* msg);
  static const ::dan::Table& dest(const InsertEdgeBatchVP* msg);
  static const ::dan::Table& eprop(const InsertEdgeBatchVP* msg);
};

const ::dan::Table&
InsertEdgeBatchVP::_Internal::src(const InsertEdgeBatchVP* msg) {
  return *msg->src_;
}
const ::dan::Table&
InsertEdgeBatchVP::_Internal::dest(const InsertEdgeBatchVP* msg) {
  return *msg->dest_;
}
const ::dan::Table&
InsertEdgeBatchVP::_Internal::eprop(const InsertEdgeBatchVP* msg) {
  return *msg->eprop_;
}
InsertEdgeBatchVP::InsertEdgeBatchVP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.InsertEdgeBatchVP)
}
InsertEdgeBatchVP::InsertEdgeBatchVP(const InsertEdgeBatchVP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  if (from._internal_has_src()) {
    src_ = new ::dan::Table(*from.src_);
  } else {
    src_ = nullptr;
  }
  if (from._internal_has_dest()) {
    dest_ = new ::dan::Table(*from.dest_);
  } else {
    dest_ = nullptr;
  }
  if (from._internal_has_eprop()) {
    eprop_ = new ::dan::Table(*from.eprop_);
  } else {
    eprop_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dan.InsertEdgeBatchVP)
}

void InsertEdgeBatchVP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertEdgeBatchVP_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&src_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&eprop_) -
      reinterpret_cast<char*>(&src_)) + sizeof(eprop_));
}

InsertEdgeBatchVP::~InsertEdgeBatchVP() {
  // @@protoc_insertion_point(destructor:dan.InsertEdgeBatchVP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertEdgeBatchVP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete src_;
  if (this != internal_default_instance()) delete dest_;
  if (this != internal_default_instance()) delete eprop_;
}

void InsertEdgeBatchVP::ArenaDtor(void* object) {
  InsertEdgeBatchVP* _this = reinterpret_cast< InsertEdgeBatchVP* >(object);
  (void)_this;
}
void InsertEdgeBatchVP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertEdgeBatchVP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertEdgeBatchVP& InsertEdgeBatchVP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertEdgeBatchVP_interface_2eproto.base);
  return *internal_default_instance();
}


void InsertEdgeBatchVP::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.InsertEdgeBatchVP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gname_.ClearToEmpty();
  if (GetArena() == nullptr && src_ != nullptr) {
    delete src_;
  }
  src_ = nullptr;
  if (GetArena() == nullptr && dest_ != nullptr) {
    delete dest_;
  }
  dest_ = nullptr;
  if (GetArena() == nullptr && eprop_ != nullptr) {
    delete eprop_;
  }
  eprop_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertEdgeBatchVP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.InsertEdgeBatchVP.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Table src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Table dest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Table eprop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_eprop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertEdgeBatchVP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.InsertEdgeBatchVP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.InsertEdgeBatchVP.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // .dan.Table src = 2;
  if (this->has_src()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::src(this), target, stream);
  }

  // .dan.Table dest = 3;
  if (this->has_dest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dest(this), target, stream);
  }

  // .dan.Table eprop = 4;
  if (this->has_eprop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::eprop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.InsertEdgeBatchVP)
  return target;
}

size_t InsertEdgeBatchVP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.InsertEdgeBatchVP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // .dan.Table src = 2;
  if (this->has_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  // .dan.Table dest = 3;
  if (this->has_dest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_);
  }

  // .dan.Table eprop = 4;
  if (this->has_eprop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eprop_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertEdgeBatchVP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.InsertEdgeBatchVP)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertEdgeBatchVP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertEdgeBatchVP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.InsertEdgeBatchVP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.InsertEdgeBatchVP)
    MergeFrom(*source);
  }
}

void InsertEdgeBatchVP::MergeFrom(const InsertEdgeBatchVP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.InsertEdgeBatchVP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.has_src()) {
    _internal_mutable_src()->::dan::Table::MergeFrom(from._internal_src());
  }
  if (from.has_dest()) {
    _internal_mutable_dest()->::dan::Table::MergeFrom(from._internal_dest());
  }
  if (from.has_eprop()) {
    _internal_mutable_eprop()->::dan::Table::MergeFrom(from._internal_eprop());
  }
}

void InsertEdgeBatchVP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.InsertEdgeBatchVP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertEdgeBatchVP::CopyFrom(const InsertEdgeBatchVP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.InsertEdgeBatchVP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertEdgeBatchVP::IsInitialized() const {
  return true;
}

void InsertEdgeBatchVP::InternalSwap(InsertEdgeBatchVP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertEdgeBatchVP, eprop_)
      + sizeof(InsertEdgeBatchVP::eprop_)
      - PROTOBUF_FIELD_OFFSET(InsertEdgeBatchVP, src_)>(
          reinterpret_cast<char*>(&src_),
          reinterpret_cast<char*>(&other->src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertEdgeBatchVP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TableScan::_Internal {
 public:
  static const ::dan::IntVec& fids(const TableScan* msg);
};

const ::dan::IntVec&
TableScan::_Internal::fids(const TableScan* msg) {
  return *msg->fids_;
}
TableScan::TableScan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.TableScan)
}
TableScan::TableScan(const TableScan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tname().empty()) {
    tname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tname(), 
      GetArena());
  }
  if (from._internal_has_fids()) {
    fids_ = new ::dan::IntVec(*from.fids_);
  } else {
    fids_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:dan.TableScan)
}

void TableScan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TableScan_interface_2eproto.base);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fids_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&fids_)) + sizeof(limit_));
}

TableScan::~TableScan() {
  // @@protoc_insertion_point(destructor:dan.TableScan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableScan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fids_;
}

void TableScan::ArenaDtor(void* object) {
  TableScan* _this = reinterpret_cast< TableScan* >(object);
  (void)_this;
}
void TableScan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableScan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableScan& TableScan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableScan_interface_2eproto.base);
  return *internal_default_instance();
}


void TableScan::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.TableScan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tname_.ClearToEmpty();
  if (GetArena() == nullptr && fids_ != nullptr) {
    delete fids_;
  }
  fids_ = nullptr;
  limit_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableScan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.TableScan.tname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.IntVec fids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableScan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.TableScan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tname = 1;
  if (this->tname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tname().data(), static_cast<int>(this->_internal_tname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.TableScan.tname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tname(), target);
  }

  // .dan.IntVec fids = 2;
  if (this->has_fids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fids(this), target, stream);
  }

  // int64 limit = 3;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.TableScan)
  return target;
}

size_t TableScan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.TableScan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tname = 1;
  if (this->tname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tname());
  }

  // .dan.IntVec fids = 2;
  if (this->has_fids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fids_);
  }

  // int64 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableScan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.TableScan)
  GOOGLE_DCHECK_NE(&from, this);
  const TableScan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableScan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.TableScan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.TableScan)
    MergeFrom(*source);
  }
}

void TableScan::MergeFrom(const TableScan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.TableScan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tname().size() > 0) {
    _internal_set_tname(from._internal_tname());
  }
  if (from.has_fids()) {
    _internal_mutable_fids()->::dan::IntVec::MergeFrom(from._internal_fids());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void TableScan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.TableScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableScan::CopyFrom(const TableScan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.TableScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableScan::IsInitialized() const {
  return true;
}

void TableScan::InternalSwap(TableScan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tname_.Swap(&other->tname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableScan, limit_)
      + sizeof(TableScan::limit_)
      - PROTOBUF_FIELD_OFFSET(TableScan, fids_)>(
          reinterpret_cast<char*>(&fids_),
          reinterpret_cast<char*>(&other->fids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableScan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IndexSearch::_Internal {
 public:
  static const ::dan::Eval& val(const IndexSearch* msg);
  static const ::dan::IntVec& fids(const IndexSearch* msg);
};

const ::dan::Eval&
IndexSearch::_Internal::val(const IndexSearch* msg) {
  return *msg->val_;
}
const ::dan::IntVec&
IndexSearch::_Internal::fids(const IndexSearch* msg) {
  return *msg->fids_;
}
IndexSearch::IndexSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.IndexSearch)
}
IndexSearch::IndexSearch(const IndexSearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tname().empty()) {
    tname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tname(), 
      GetArena());
  }
  if (from._internal_has_val()) {
    val_ = new ::dan::Eval(*from.val_);
  } else {
    val_ = nullptr;
  }
  if (from._internal_has_fids()) {
    fids_ = new ::dan::IntVec(*from.fids_);
  } else {
    fids_ = nullptr;
  }
  fid_ = from.fid_;
  // @@protoc_insertion_point(copy_constructor:dan.IndexSearch)
}

void IndexSearch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IndexSearch_interface_2eproto.base);
  tname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&val_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fid_) -
      reinterpret_cast<char*>(&val_)) + sizeof(fid_));
}

IndexSearch::~IndexSearch() {
  // @@protoc_insertion_point(destructor:dan.IndexSearch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndexSearch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete val_;
  if (this != internal_default_instance()) delete fids_;
}

void IndexSearch::ArenaDtor(void* object) {
  IndexSearch* _this = reinterpret_cast< IndexSearch* >(object);
  (void)_this;
}
void IndexSearch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexSearch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexSearch& IndexSearch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexSearch_interface_2eproto.base);
  return *internal_default_instance();
}


void IndexSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.IndexSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tname_.ClearToEmpty();
  if (GetArena() == nullptr && val_ != nullptr) {
    delete val_;
  }
  val_ = nullptr;
  if (GetArena() == nullptr && fids_ != nullptr) {
    delete fids_;
  }
  fids_ = nullptr;
  fid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexSearch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.IndexSearch.tname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Eval val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_val(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.IntVec fids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexSearch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.IndexSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tname = 1;
  if (this->tname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tname().data(), static_cast<int>(this->_internal_tname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.IndexSearch.tname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tname(), target);
  }

  // int64 fid = 2;
  if (this->fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_fid(), target);
  }

  // .dan.Eval val = 3;
  if (this->has_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::val(this), target, stream);
  }

  // .dan.IntVec fids = 4;
  if (this->has_fids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fids(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.IndexSearch)
  return target;
}

size_t IndexSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.IndexSearch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tname = 1;
  if (this->tname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tname());
  }

  // .dan.Eval val = 3;
  if (this->has_val()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *val_);
  }

  // .dan.IntVec fids = 4;
  if (this->has_fids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fids_);
  }

  // int64 fid = 2;
  if (this->fid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexSearch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.IndexSearch)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexSearch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexSearch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.IndexSearch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.IndexSearch)
    MergeFrom(*source);
  }
}

void IndexSearch::MergeFrom(const IndexSearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.IndexSearch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tname().size() > 0) {
    _internal_set_tname(from._internal_tname());
  }
  if (from.has_val()) {
    _internal_mutable_val()->::dan::Eval::MergeFrom(from._internal_val());
  }
  if (from.has_fids()) {
    _internal_mutable_fids()->::dan::IntVec::MergeFrom(from._internal_fids());
  }
  if (from.fid() != 0) {
    _internal_set_fid(from._internal_fid());
  }
}

void IndexSearch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.IndexSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexSearch::CopyFrom(const IndexSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.IndexSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexSearch::IsInitialized() const {
  return true;
}

void IndexSearch::InternalSwap(IndexSearch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tname_.Swap(&other->tname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexSearch, fid_)
      + sizeof(IndexSearch::fid_)
      - PROTOBUF_FIELD_OFFSET(IndexSearch, val_)>(
          reinterpret_cast<char*>(&val_),
          reinterpret_cast<char*>(&other->val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexSearch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AdjacentList::_Internal {
 public:
  static const ::dan::Eval& src(const AdjacentList* msg);
  static const ::dan::IntVec& fids(const AdjacentList* msg);
};

const ::dan::Eval&
AdjacentList::_Internal::src(const AdjacentList* msg) {
  return *msg->src_;
}
const ::dan::IntVec&
AdjacentList::_Internal::fids(const AdjacentList* msg) {
  return *msg->fids_;
}
AdjacentList::AdjacentList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.AdjacentList)
}
AdjacentList::AdjacentList(const AdjacentList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  if (from._internal_has_src()) {
    src_ = new ::dan::Eval(*from.src_);
  } else {
    src_ = nullptr;
  }
  if (from._internal_has_fids()) {
    fids_ = new ::dan::IntVec(*from.fids_);
  } else {
    fids_ = nullptr;
  }
  ::memcpy(&vpid_, &from.vpid_,
    static_cast<size_t>(reinterpret_cast<char*>(&incoming_) -
    reinterpret_cast<char*>(&vpid_)) + sizeof(incoming_));
  // @@protoc_insertion_point(copy_constructor:dan.AdjacentList)
}

void AdjacentList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdjacentList_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&src_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&incoming_) -
      reinterpret_cast<char*>(&src_)) + sizeof(incoming_));
}

AdjacentList::~AdjacentList() {
  // @@protoc_insertion_point(destructor:dan.AdjacentList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdjacentList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete src_;
  if (this != internal_default_instance()) delete fids_;
}

void AdjacentList::ArenaDtor(void* object) {
  AdjacentList* _this = reinterpret_cast< AdjacentList* >(object);
  (void)_this;
}
void AdjacentList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdjacentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdjacentList& AdjacentList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdjacentList_interface_2eproto.base);
  return *internal_default_instance();
}


void AdjacentList::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.AdjacentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gname_.ClearToEmpty();
  if (GetArena() == nullptr && src_ != nullptr) {
    delete src_;
  }
  src_ = nullptr;
  if (GetArena() == nullptr && fids_ != nullptr) {
    delete fids_;
  }
  fids_ = nullptr;
  ::memset(&vpid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&incoming_) -
      reinterpret_cast<char*>(&vpid_)) + sizeof(incoming_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdjacentList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.AdjacentList.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Eval src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.IntVec fids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vpid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool incoming = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          incoming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdjacentList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.AdjacentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.AdjacentList.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // .dan.Eval src = 2;
  if (this->has_src()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::src(this), target, stream);
  }

  // .dan.IntVec fids = 3;
  if (this->has_fids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fids(this), target, stream);
  }

  // int32 vpid = 4;
  if (this->vpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_vpid(), target);
  }

  // bool incoming = 5;
  if (this->incoming() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_incoming(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.AdjacentList)
  return target;
}

size_t AdjacentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.AdjacentList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // .dan.Eval src = 2;
  if (this->has_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  // .dan.IntVec fids = 3;
  if (this->has_fids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fids_);
  }

  // int32 vpid = 4;
  if (this->vpid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vpid());
  }

  // bool incoming = 5;
  if (this->incoming() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdjacentList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.AdjacentList)
  GOOGLE_DCHECK_NE(&from, this);
  const AdjacentList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdjacentList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.AdjacentList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.AdjacentList)
    MergeFrom(*source);
  }
}

void AdjacentList::MergeFrom(const AdjacentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.AdjacentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.has_src()) {
    _internal_mutable_src()->::dan::Eval::MergeFrom(from._internal_src());
  }
  if (from.has_fids()) {
    _internal_mutable_fids()->::dan::IntVec::MergeFrom(from._internal_fids());
  }
  if (from.vpid() != 0) {
    _internal_set_vpid(from._internal_vpid());
  }
  if (from.incoming() != 0) {
    _internal_set_incoming(from._internal_incoming());
  }
}

void AdjacentList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.AdjacentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdjacentList::CopyFrom(const AdjacentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.AdjacentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdjacentList::IsInitialized() const {
  return true;
}

void AdjacentList::InternalSwap(AdjacentList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdjacentList, incoming_)
      + sizeof(AdjacentList::incoming_)
      - PROTOBUF_FIELD_OFFSET(AdjacentList, src_)>(
          reinterpret_cast<char*>(&src_),
          reinterpret_cast<char*>(&other->src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdjacentList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AdjacentListResult::_Internal {
 public:
  static const ::dan::Table& dests(const AdjacentListResult* msg);
  static const ::dan::Record& eprops(const AdjacentListResult* msg);
  static const ::dan::StrVec& nodes(const AdjacentListResult* msg);
};

const ::dan::Table&
AdjacentListResult::_Internal::dests(const AdjacentListResult* msg) {
  return *msg->dests_;
}
const ::dan::Record&
AdjacentListResult::_Internal::eprops(const AdjacentListResult* msg) {
  return *msg->eprops_;
}
const ::dan::StrVec&
AdjacentListResult::_Internal::nodes(const AdjacentListResult* msg) {
  return *msg->nodes_;
}
AdjacentListResult::AdjacentListResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.AdjacentListResult)
}
AdjacentListResult::AdjacentListResult(const AdjacentListResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dests()) {
    dests_ = new ::dan::Table(*from.dests_);
  } else {
    dests_ = nullptr;
  }
  if (from._internal_has_eprops()) {
    eprops_ = new ::dan::Record(*from.eprops_);
  } else {
    eprops_ = nullptr;
  }
  if (from._internal_has_nodes()) {
    nodes_ = new ::dan::StrVec(*from.nodes_);
  } else {
    nodes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dan.AdjacentListResult)
}

void AdjacentListResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdjacentListResult_interface_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dests_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nodes_) -
      reinterpret_cast<char*>(&dests_)) + sizeof(nodes_));
}

AdjacentListResult::~AdjacentListResult() {
  // @@protoc_insertion_point(destructor:dan.AdjacentListResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdjacentListResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dests_;
  if (this != internal_default_instance()) delete eprops_;
  if (this != internal_default_instance()) delete nodes_;
}

void AdjacentListResult::ArenaDtor(void* object) {
  AdjacentListResult* _this = reinterpret_cast< AdjacentListResult* >(object);
  (void)_this;
}
void AdjacentListResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdjacentListResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdjacentListResult& AdjacentListResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdjacentListResult_interface_2eproto.base);
  return *internal_default_instance();
}


void AdjacentListResult::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.AdjacentListResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && dests_ != nullptr) {
    delete dests_;
  }
  dests_ = nullptr;
  if (GetArena() == nullptr && eprops_ != nullptr) {
    delete eprops_;
  }
  eprops_ = nullptr;
  if (GetArena() == nullptr && nodes_ != nullptr) {
    delete nodes_;
  }
  nodes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdjacentListResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dan.Table dests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dests(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Record eprops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eprops(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.StrVec nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdjacentListResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.AdjacentListResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dan.Table dests = 1;
  if (this->has_dests()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dests(this), target, stream);
  }

  // .dan.Record eprops = 2;
  if (this->has_eprops()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::eprops(this), target, stream);
  }

  // .dan.StrVec nodes = 3;
  if (this->has_nodes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::nodes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.AdjacentListResult)
  return target;
}

size_t AdjacentListResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.AdjacentListResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dan.Table dests = 1;
  if (this->has_dests()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dests_);
  }

  // .dan.Record eprops = 2;
  if (this->has_eprops()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eprops_);
  }

  // .dan.StrVec nodes = 3;
  if (this->has_nodes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodes_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdjacentListResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.AdjacentListResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AdjacentListResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdjacentListResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.AdjacentListResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.AdjacentListResult)
    MergeFrom(*source);
  }
}

void AdjacentListResult::MergeFrom(const AdjacentListResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.AdjacentListResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dests()) {
    _internal_mutable_dests()->::dan::Table::MergeFrom(from._internal_dests());
  }
  if (from.has_eprops()) {
    _internal_mutable_eprops()->::dan::Record::MergeFrom(from._internal_eprops());
  }
  if (from.has_nodes()) {
    _internal_mutable_nodes()->::dan::StrVec::MergeFrom(from._internal_nodes());
  }
}

void AdjacentListResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.AdjacentListResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdjacentListResult::CopyFrom(const AdjacentListResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.AdjacentListResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdjacentListResult::IsInitialized() const {
  return true;
}

void AdjacentListResult::InternalSwap(AdjacentListResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdjacentListResult, nodes_)
      + sizeof(AdjacentListResult::nodes_)
      - PROTOBUF_FIELD_OFFSET(AdjacentListResult, dests_)>(
          reinterpret_cast<char*>(&dests_),
          reinterpret_cast<char*>(&other->dests_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdjacentListResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetVertex::_Internal {
 public:
  static const ::dan::Eval& vkey(const GetVertex* msg);
  static const ::dan::IntVec& fids(const GetVertex* msg);
};

const ::dan::Eval&
GetVertex::_Internal::vkey(const GetVertex* msg) {
  return *msg->vkey_;
}
const ::dan::IntVec&
GetVertex::_Internal::fids(const GetVertex* msg) {
  return *msg->fids_;
}
GetVertex::GetVertex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.GetVertex)
}
GetVertex::GetVertex(const GetVertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  if (from._internal_has_vkey()) {
    vkey_ = new ::dan::Eval(*from.vkey_);
  } else {
    vkey_ = nullptr;
  }
  if (from._internal_has_fids()) {
    fids_ = new ::dan::IntVec(*from.fids_);
  } else {
    fids_ = nullptr;
  }
  ::memcpy(&vid_, &from.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&vpid_) -
    reinterpret_cast<char*>(&vid_)) + sizeof(vpid_));
  // @@protoc_insertion_point(copy_constructor:dan.GetVertex)
}

void GetVertex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetVertex_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vkey_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vpid_) -
      reinterpret_cast<char*>(&vkey_)) + sizeof(vpid_));
}

GetVertex::~GetVertex() {
  // @@protoc_insertion_point(destructor:dan.GetVertex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVertex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vkey_;
  if (this != internal_default_instance()) delete fids_;
}

void GetVertex::ArenaDtor(void* object) {
  GetVertex* _this = reinterpret_cast< GetVertex* >(object);
  (void)_this;
}
void GetVertex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVertex& GetVertex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVertex_interface_2eproto.base);
  return *internal_default_instance();
}


void GetVertex::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.GetVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gname_.ClearToEmpty();
  if (GetArena() == nullptr && vkey_ != nullptr) {
    delete vkey_;
  }
  vkey_ = nullptr;
  if (GetArena() == nullptr && fids_ != nullptr) {
    delete fids_;
  }
  fids_ = nullptr;
  ::memset(&vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vpid_) -
      reinterpret_cast<char*>(&vid_)) + sizeof(vpid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.GetVertex.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Eval vkey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vkey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vpid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 vid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.IntVec fids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVertex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.GetVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.GetVertex.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // .dan.Eval vkey = 2;
  if (this->has_vkey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vkey(this), target, stream);
  }

  // int32 vpid = 3;
  if (this->vpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vpid(), target);
  }

  // int64 vid = 4;
  if (this->vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_vid(), target);
  }

  // .dan.IntVec fids = 5;
  if (this->has_fids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::fids(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.GetVertex)
  return target;
}

size_t GetVertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.GetVertex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // .dan.Eval vkey = 2;
  if (this->has_vkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vkey_);
  }

  // .dan.IntVec fids = 5;
  if (this->has_fids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fids_);
  }

  // int64 vid = 4;
  if (this->vid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_vid());
  }

  // int32 vpid = 3;
  if (this->vpid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vpid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVertex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.GetVertex)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVertex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVertex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.GetVertex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.GetVertex)
    MergeFrom(*source);
  }
}

void GetVertex::MergeFrom(const GetVertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.GetVertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.has_vkey()) {
    _internal_mutable_vkey()->::dan::Eval::MergeFrom(from._internal_vkey());
  }
  if (from.has_fids()) {
    _internal_mutable_fids()->::dan::IntVec::MergeFrom(from._internal_fids());
  }
  if (from.vid() != 0) {
    _internal_set_vid(from._internal_vid());
  }
  if (from.vpid() != 0) {
    _internal_set_vpid(from._internal_vpid());
  }
}

void GetVertex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.GetVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVertex::CopyFrom(const GetVertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.GetVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVertex::IsInitialized() const {
  return true;
}

void GetVertex::InternalSwap(GetVertex* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetVertex, vpid_)
      + sizeof(GetVertex::vpid_)
      - PROTOBUF_FIELD_OFFSET(GetVertex, vkey_)>(
          reinterpret_cast<char*>(&vkey_),
          reinterpret_cast<char*>(&other->vkey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVertex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VertexList::_Internal {
 public:
  static const ::dan::Record& vkey(const VertexList* msg);
  static const ::dan::IntVec& vpid(const VertexList* msg);
  static const ::dan::Table& vprop(const VertexList* msg);
};

const ::dan::Record&
VertexList::_Internal::vkey(const VertexList* msg) {
  return *msg->vkey_;
}
const ::dan::IntVec&
VertexList::_Internal::vpid(const VertexList* msg) {
  return *msg->vpid_;
}
const ::dan::Table&
VertexList::_Internal::vprop(const VertexList* msg) {
  return *msg->vprop_;
}
VertexList::VertexList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.VertexList)
}
VertexList::VertexList(const VertexList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vkey()) {
    vkey_ = new ::dan::Record(*from.vkey_);
  } else {
    vkey_ = nullptr;
  }
  if (from._internal_has_vpid()) {
    vpid_ = new ::dan::IntVec(*from.vpid_);
  } else {
    vpid_ = nullptr;
  }
  if (from._internal_has_vprop()) {
    vprop_ = new ::dan::Table(*from.vprop_);
  } else {
    vprop_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dan.VertexList)
}

void VertexList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VertexList_interface_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vkey_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vprop_) -
      reinterpret_cast<char*>(&vkey_)) + sizeof(vprop_));
}

VertexList::~VertexList() {
  // @@protoc_insertion_point(destructor:dan.VertexList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VertexList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vkey_;
  if (this != internal_default_instance()) delete vpid_;
  if (this != internal_default_instance()) delete vprop_;
}

void VertexList::ArenaDtor(void* object) {
  VertexList* _this = reinterpret_cast< VertexList* >(object);
  (void)_this;
}
void VertexList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VertexList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VertexList& VertexList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VertexList_interface_2eproto.base);
  return *internal_default_instance();
}


void VertexList::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.VertexList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vkey_ != nullptr) {
    delete vkey_;
  }
  vkey_ = nullptr;
  if (GetArena() == nullptr && vpid_ != nullptr) {
    delete vpid_;
  }
  vpid_ = nullptr;
  if (GetArena() == nullptr && vprop_ != nullptr) {
    delete vprop_;
  }
  vprop_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VertexList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dan.Record vkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vkey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.IntVec vpid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Table vprop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vprop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VertexList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.VertexList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dan.Record vkey = 1;
  if (this->has_vkey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vkey(this), target, stream);
  }

  // .dan.IntVec vpid = 2;
  if (this->has_vpid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vpid(this), target, stream);
  }

  // .dan.Table vprop = 3;
  if (this->has_vprop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vprop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.VertexList)
  return target;
}

size_t VertexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.VertexList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dan.Record vkey = 1;
  if (this->has_vkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vkey_);
  }

  // .dan.IntVec vpid = 2;
  if (this->has_vpid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vpid_);
  }

  // .dan.Table vprop = 3;
  if (this->has_vprop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vprop_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VertexList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.VertexList)
  GOOGLE_DCHECK_NE(&from, this);
  const VertexList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VertexList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.VertexList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.VertexList)
    MergeFrom(*source);
  }
}

void VertexList::MergeFrom(const VertexList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.VertexList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vkey()) {
    _internal_mutable_vkey()->::dan::Record::MergeFrom(from._internal_vkey());
  }
  if (from.has_vpid()) {
    _internal_mutable_vpid()->::dan::IntVec::MergeFrom(from._internal_vpid());
  }
  if (from.has_vprop()) {
    _internal_mutable_vprop()->::dan::Table::MergeFrom(from._internal_vprop());
  }
}

void VertexList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.VertexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VertexList::CopyFrom(const VertexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.VertexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexList::IsInitialized() const {
  return true;
}

void VertexList::InternalSwap(VertexList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VertexList, vprop_)
      + sizeof(VertexList::vprop_)
      - PROTOBUF_FIELD_OFFSET(VertexList, vkey_)>(
          reinterpret_cast<char*>(&vkey_),
          reinterpret_cast<char*>(&other->vkey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EdgeList::_Internal {
 public:
  static const ::dan::Record& src(const EdgeList* msg);
  static const ::dan::Record& dst(const EdgeList* msg);
};

const ::dan::Record&
EdgeList::_Internal::src(const EdgeList* msg) {
  return *msg->src_;
}
const ::dan::Record&
EdgeList::_Internal::dst(const EdgeList* msg) {
  return *msg->dst_;
}
EdgeList::EdgeList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.EdgeList)
}
EdgeList::EdgeList(const EdgeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_src()) {
    src_ = new ::dan::Record(*from.src_);
  } else {
    src_ = nullptr;
  }
  if (from._internal_has_dst()) {
    dst_ = new ::dan::Record(*from.dst_);
  } else {
    dst_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dan.EdgeList)
}

void EdgeList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EdgeList_interface_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&src_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dst_) -
      reinterpret_cast<char*>(&src_)) + sizeof(dst_));
}

EdgeList::~EdgeList() {
  // @@protoc_insertion_point(destructor:dan.EdgeList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EdgeList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete src_;
  if (this != internal_default_instance()) delete dst_;
}

void EdgeList::ArenaDtor(void* object) {
  EdgeList* _this = reinterpret_cast< EdgeList* >(object);
  (void)_this;
}
void EdgeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EdgeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EdgeList& EdgeList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EdgeList_interface_2eproto.base);
  return *internal_default_instance();
}


void EdgeList::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.EdgeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && src_ != nullptr) {
    delete src_;
  }
  src_ = nullptr;
  if (GetArena() == nullptr && dst_ != nullptr) {
    delete dst_;
  }
  dst_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dan.Record src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Record dst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EdgeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.EdgeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dan.Record src = 1;
  if (this->has_src()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::src(this), target, stream);
  }

  // .dan.Record dst = 2;
  if (this->has_dst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dst(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.EdgeList)
  return target;
}

size_t EdgeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.EdgeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dan.Record src = 1;
  if (this->has_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  // .dan.Record dst = 2;
  if (this->has_dst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.EdgeList)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EdgeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.EdgeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.EdgeList)
    MergeFrom(*source);
  }
}

void EdgeList::MergeFrom(const EdgeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.EdgeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_src()) {
    _internal_mutable_src()->::dan::Record::MergeFrom(from._internal_src());
  }
  if (from.has_dst()) {
    _internal_mutable_dst()->::dan::Record::MergeFrom(from._internal_dst());
  }
}

void EdgeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.EdgeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeList::CopyFrom(const EdgeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.EdgeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeList::IsInitialized() const {
  return true;
}

void EdgeList::InternalSwap(EdgeList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgeList, dst_)
      + sizeof(EdgeList::dst_)
      - PROTOBUF_FIELD_OFFSET(EdgeList, src_)>(
          reinterpret_cast<char*>(&src_),
          reinterpret_cast<char*>(&other->src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemoteTask::_Internal {
 public:
};

RemoteTask::RemoteTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.RemoteTask)
}
RemoteTask::RemoteTask(const RemoteTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  func_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_func().empty()) {
    func_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_func(), 
      GetArena());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArena());
  }
  kargs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kargs().empty()) {
    kargs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kargs(), 
      GetArena());
  }
  immediate_return_ = from.immediate_return_;
  // @@protoc_insertion_point(copy_constructor:dan.RemoteTask)
}

void RemoteTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteTask_interface_2eproto.base);
  func_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kargs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  immediate_return_ = false;
}

RemoteTask::~RemoteTask() {
  // @@protoc_insertion_point(destructor:dan.RemoteTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  func_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kargs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteTask::ArenaDtor(void* object) {
  RemoteTask* _this = reinterpret_cast< RemoteTask* >(object);
  (void)_this;
}
void RemoteTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteTask& RemoteTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteTask_interface_2eproto.base);
  return *internal_default_instance();
}


void RemoteTask::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.RemoteTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  func_.ClearToEmpty();
  args_.ClearToEmpty();
  kargs_.ClearToEmpty();
  immediate_return_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes func = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_func();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes kargs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_kargs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool immediate_return = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          immediate_return_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.RemoteTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes func = 1;
  if (this->func().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_func(), target);
  }

  // bytes args = 2;
  if (this->args().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_args(), target);
  }

  // bytes kargs = 3;
  if (this->kargs().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_kargs(), target);
  }

  // bool immediate_return = 4;
  if (this->immediate_return() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_immediate_return(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.RemoteTask)
  return target;
}

size_t RemoteTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.RemoteTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes func = 1;
  if (this->func().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_func());
  }

  // bytes args = 2;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // bytes kargs = 3;
  if (this->kargs().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_kargs());
  }

  // bool immediate_return = 4;
  if (this->immediate_return() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.RemoteTask)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.RemoteTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.RemoteTask)
    MergeFrom(*source);
  }
}

void RemoteTask::MergeFrom(const RemoteTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.RemoteTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.func().size() > 0) {
    _internal_set_func(from._internal_func());
  }
  if (from.args().size() > 0) {
    _internal_set_args(from._internal_args());
  }
  if (from.kargs().size() > 0) {
    _internal_set_kargs(from._internal_kargs());
  }
  if (from.immediate_return() != 0) {
    _internal_set_immediate_return(from._internal_immediate_return());
  }
}

void RemoteTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.RemoteTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteTask::CopyFrom(const RemoteTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.RemoteTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteTask::IsInitialized() const {
  return true;
}

void RemoteTask::InternalSwap(RemoteTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  func_.Swap(&other->func_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kargs_.Swap(&other->kargs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(immediate_return_, other->immediate_return_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemoteResult::_Internal {
 public:
};

RemoteResult::RemoteResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.RemoteResult)
}
RemoteResult::RemoteResult(const RemoteResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  results_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_results().empty()) {
    results_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_results(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:dan.RemoteResult)
}

void RemoteResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteResult_interface_2eproto.base);
  results_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoteResult::~RemoteResult() {
  // @@protoc_insertion_point(destructor:dan.RemoteResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  results_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteResult::ArenaDtor(void* object) {
  RemoteResult* _this = reinterpret_cast< RemoteResult* >(object);
  (void)_this;
}
void RemoteResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteResult& RemoteResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteResult_interface_2eproto.base);
  return *internal_default_instance();
}


void RemoteResult::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.RemoteResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_results();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.RemoteResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes results = 1;
  if (this->results().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_results(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.RemoteResult)
  return target;
}

size_t RemoteResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.RemoteResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes results = 1;
  if (this->results().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_results());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.RemoteResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.RemoteResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.RemoteResult)
    MergeFrom(*source);
  }
}

void RemoteResult::MergeFrom(const RemoteResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.RemoteResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.results().size() > 0) {
    _internal_set_results(from._internal_results());
  }
}

void RemoteResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.RemoteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteResult::CopyFrom(const RemoteResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.RemoteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteResult::IsInitialized() const {
  return true;
}

void RemoteResult::InternalSwap(RemoteResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.Swap(&other->results_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemoteObject::_Internal {
 public:
};

RemoteObject::RemoteObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.RemoteObject)
}
RemoteObject::RemoteObject(const RemoteObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cls_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cls().empty()) {
    cls_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cls(), 
      GetArena());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArena());
  }
  kargs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kargs().empty()) {
    kargs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kargs(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:dan.RemoteObject)
}

void RemoteObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteObject_interface_2eproto.base);
  cls_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kargs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoteObject::~RemoteObject() {
  // @@protoc_insertion_point(destructor:dan.RemoteObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cls_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kargs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteObject::ArenaDtor(void* object) {
  RemoteObject* _this = reinterpret_cast< RemoteObject* >(object);
  (void)_this;
}
void RemoteObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteObject& RemoteObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteObject_interface_2eproto.base);
  return *internal_default_instance();
}


void RemoteObject::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.RemoteObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cls_.ClearToEmpty();
  args_.ClearToEmpty();
  kargs_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes cls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cls();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes kargs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_kargs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.RemoteObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes cls = 1;
  if (this->cls().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_cls(), target);
  }

  // bytes args = 2;
  if (this->args().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_args(), target);
  }

  // bytes kargs = 3;
  if (this->kargs().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_kargs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.RemoteObject)
  return target;
}

size_t RemoteObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.RemoteObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cls = 1;
  if (this->cls().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cls());
  }

  // bytes args = 2;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // bytes kargs = 3;
  if (this->kargs().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_kargs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.RemoteObject)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.RemoteObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.RemoteObject)
    MergeFrom(*source);
  }
}

void RemoteObject::MergeFrom(const RemoteObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.RemoteObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cls().size() > 0) {
    _internal_set_cls(from._internal_cls());
  }
  if (from.args().size() > 0) {
    _internal_set_args(from._internal_args());
  }
  if (from.kargs().size() > 0) {
    _internal_set_kargs(from._internal_kargs());
  }
}

void RemoteObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.RemoteObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteObject::CopyFrom(const RemoteObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.RemoteObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteObject::IsInitialized() const {
  return true;
}

void RemoteObject::InternalSwap(RemoteObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cls_.Swap(&other->cls_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kargs_.Swap(&other->kargs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemoteTaskResult::_Internal {
 public:
};

RemoteTaskResult::RemoteTaskResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.RemoteTaskResult)
}
RemoteTaskResult::RemoteTaskResult(const RemoteTaskResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:dan.RemoteTaskResult)
}

void RemoteTaskResult::SharedCtor() {
  object_id_ = PROTOBUF_LONGLONG(0);
}

RemoteTaskResult::~RemoteTaskResult() {
  // @@protoc_insertion_point(destructor:dan.RemoteTaskResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteTaskResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoteTaskResult::ArenaDtor(void* object) {
  RemoteTaskResult* _this = reinterpret_cast< RemoteTaskResult* >(object);
  (void)_this;
}
void RemoteTaskResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteTaskResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteTaskResult& RemoteTaskResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteTaskResult_interface_2eproto.base);
  return *internal_default_instance();
}


void RemoteTaskResult::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.RemoteTaskResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteTaskResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteTaskResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.RemoteTaskResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.RemoteTaskResult)
  return target;
}

size_t RemoteTaskResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.RemoteTaskResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteTaskResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.RemoteTaskResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteTaskResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteTaskResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.RemoteTaskResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.RemoteTaskResult)
    MergeFrom(*source);
  }
}

void RemoteTaskResult::MergeFrom(const RemoteTaskResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.RemoteTaskResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void RemoteTaskResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.RemoteTaskResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteTaskResult::CopyFrom(const RemoteTaskResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.RemoteTaskResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteTaskResult::IsInitialized() const {
  return true;
}

void RemoteTaskResult::InternalSwap(RemoteTaskResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteTaskResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemoteObjectTask::_Internal {
 public:
};

RemoteObjectTask::RemoteObjectTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.RemoteObjectTask)
}
RemoteObjectTask::RemoteObjectTask(const RemoteObjectTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fname().empty()) {
    fname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fname(), 
      GetArena());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArena());
  }
  kargs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kargs().empty()) {
    kargs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kargs(), 
      GetArena());
  }
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&immediate_return_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(immediate_return_));
  // @@protoc_insertion_point(copy_constructor:dan.RemoteObjectTask)
}

void RemoteObjectTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteObjectTask_interface_2eproto.base);
  fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kargs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&immediate_return_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(immediate_return_));
}

RemoteObjectTask::~RemoteObjectTask() {
  // @@protoc_insertion_point(destructor:dan.RemoteObjectTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteObjectTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kargs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteObjectTask::ArenaDtor(void* object) {
  RemoteObjectTask* _this = reinterpret_cast< RemoteObjectTask* >(object);
  (void)_this;
}
void RemoteObjectTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteObjectTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteObjectTask& RemoteObjectTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteObjectTask_interface_2eproto.base);
  return *internal_default_instance();
}


void RemoteObjectTask::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.RemoteObjectTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fname_.ClearToEmpty();
  args_.ClearToEmpty();
  kargs_.ClearToEmpty();
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&immediate_return_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(immediate_return_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteObjectTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.RemoteObjectTask.fname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes kargs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_kargs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool immediate_return = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          immediate_return_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteObjectTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.RemoteObjectTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // string fname = 2;
  if (this->fname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fname().data(), static_cast<int>(this->_internal_fname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.RemoteObjectTask.fname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fname(), target);
  }

  // bytes args = 3;
  if (this->args().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_args(), target);
  }

  // bytes kargs = 4;
  if (this->kargs().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_kargs(), target);
  }

  // bool immediate_return = 5;
  if (this->immediate_return() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_immediate_return(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.RemoteObjectTask)
  return target;
}

size_t RemoteObjectTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.RemoteObjectTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fname = 2;
  if (this->fname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fname());
  }

  // bytes args = 3;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // bytes kargs = 4;
  if (this->kargs().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_kargs());
  }

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_object_id());
  }

  // bool immediate_return = 5;
  if (this->immediate_return() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteObjectTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.RemoteObjectTask)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteObjectTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteObjectTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.RemoteObjectTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.RemoteObjectTask)
    MergeFrom(*source);
  }
}

void RemoteObjectTask::MergeFrom(const RemoteObjectTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.RemoteObjectTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fname().size() > 0) {
    _internal_set_fname(from._internal_fname());
  }
  if (from.args().size() > 0) {
    _internal_set_args(from._internal_args());
  }
  if (from.kargs().size() > 0) {
    _internal_set_kargs(from._internal_kargs());
  }
  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from.immediate_return() != 0) {
    _internal_set_immediate_return(from._internal_immediate_return());
  }
}

void RemoteObjectTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.RemoteObjectTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteObjectTask::CopyFrom(const RemoteObjectTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.RemoteObjectTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteObjectTask::IsInitialized() const {
  return true;
}

void RemoteObjectTask::InternalSwap(RemoteObjectTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fname_.Swap(&other->fname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kargs_.Swap(&other->kargs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteObjectTask, immediate_return_)
      + sizeof(RemoteObjectTask::immediate_return_)
      - PROTOBUF_FIELD_OFFSET(RemoteObjectTask, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteObjectTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadGraphFromFolder::_Internal {
 public:
  static const ::dan::StrVec& nodes(const LoadGraphFromFolder* msg);
};

const ::dan::StrVec&
LoadGraphFromFolder::_Internal::nodes(const LoadGraphFromFolder* msg) {
  return *msg->nodes_;
}
LoadGraphFromFolder::LoadGraphFromFolder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  eschema_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.LoadGraphFromFolder)
}
LoadGraphFromFolder::LoadGraphFromFolder(const LoadGraphFromFolder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      eschema_(from.eschema_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_folder().empty()) {
    folder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_folder(), 
      GetArena());
  }
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  vptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vptype().empty()) {
    vptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vptype(), 
      GetArena());
  }
  eptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_eptype().empty()) {
    eptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_eptype(), 
      GetArena());
  }
  if (from._internal_has_nodes()) {
    nodes_ = new ::dan::StrVec(*from.nodes_);
  } else {
    nodes_ = nullptr;
  }
  ::memcpy(&incoming_, &from.incoming_,
    static_cast<size_t>(reinterpret_cast<char*>(&part_type_) -
    reinterpret_cast<char*>(&incoming_)) + sizeof(part_type_));
  // @@protoc_insertion_point(copy_constructor:dan.LoadGraphFromFolder)
}

void LoadGraphFromFolder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadGraphFromFolder_interface_2eproto.base);
  folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nodes_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&part_type_) -
      reinterpret_cast<char*>(&nodes_)) + sizeof(part_type_));
}

LoadGraphFromFolder::~LoadGraphFromFolder() {
  // @@protoc_insertion_point(destructor:dan.LoadGraphFromFolder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadGraphFromFolder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  folder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vptype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eptype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nodes_;
}

void LoadGraphFromFolder::ArenaDtor(void* object) {
  LoadGraphFromFolder* _this = reinterpret_cast< LoadGraphFromFolder* >(object);
  (void)_this;
}
void LoadGraphFromFolder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadGraphFromFolder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadGraphFromFolder& LoadGraphFromFolder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadGraphFromFolder_interface_2eproto.base);
  return *internal_default_instance();
}


void LoadGraphFromFolder::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.LoadGraphFromFolder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eschema_.Clear();
  folder_.ClearToEmpty();
  gname_.ClearToEmpty();
  vptype_.ClearToEmpty();
  eptype_.ClearToEmpty();
  if (GetArena() == nullptr && nodes_ != nullptr) {
    delete nodes_;
  }
  nodes_ = nullptr;
  ::memset(&incoming_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&part_type_) -
      reinterpret_cast<char*>(&incoming_)) + sizeof(part_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadGraphFromFolder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string folder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_folder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.LoadGraphFromFolder.folder"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.LoadGraphFromFolder.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dan.Field eschema = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_eschema(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string vptype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_vptype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.LoadGraphFromFolder.vptype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string eptype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_eptype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.LoadGraphFromFolder.eptype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool incoming = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          incoming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool merge = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          merge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_partition = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_partition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 part_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          part_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.StrVec nodes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadGraphFromFolder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.LoadGraphFromFolder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string folder = 1;
  if (this->folder().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_folder().data(), static_cast<int>(this->_internal_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.LoadGraphFromFolder.folder");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_folder(), target);
  }

  // string gname = 2;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.LoadGraphFromFolder.gname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gname(), target);
  }

  // repeated .dan.Field eschema = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_eschema_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_eschema(i), target, stream);
  }

  // string vptype = 4;
  if (this->vptype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vptype().data(), static_cast<int>(this->_internal_vptype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.LoadGraphFromFolder.vptype");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_vptype(), target);
  }

  // string eptype = 5;
  if (this->eptype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eptype().data(), static_cast<int>(this->_internal_eptype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.LoadGraphFromFolder.eptype");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_eptype(), target);
  }

  // bool incoming = 6;
  if (this->incoming() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_incoming(), target);
  }

  // bool merge = 7;
  if (this->merge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_merge(), target);
  }

  // bool is_partition = 8;
  if (this->is_partition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_partition(), target);
  }

  // int32 part_type = 9;
  if (this->part_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_part_type(), target);
  }

  // .dan.StrVec nodes = 10;
  if (this->has_nodes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::nodes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.LoadGraphFromFolder)
  return target;
}

size_t LoadGraphFromFolder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.LoadGraphFromFolder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dan.Field eschema = 3;
  total_size += 1UL * this->_internal_eschema_size();
  for (const auto& msg : this->eschema_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string folder = 1;
  if (this->folder().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_folder());
  }

  // string gname = 2;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // string vptype = 4;
  if (this->vptype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vptype());
  }

  // string eptype = 5;
  if (this->eptype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eptype());
  }

  // .dan.StrVec nodes = 10;
  if (this->has_nodes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodes_);
  }

  // bool incoming = 6;
  if (this->incoming() != 0) {
    total_size += 1 + 1;
  }

  // bool merge = 7;
  if (this->merge() != 0) {
    total_size += 1 + 1;
  }

  // bool is_partition = 8;
  if (this->is_partition() != 0) {
    total_size += 1 + 1;
  }

  // int32 part_type = 9;
  if (this->part_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_part_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadGraphFromFolder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.LoadGraphFromFolder)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadGraphFromFolder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadGraphFromFolder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.LoadGraphFromFolder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.LoadGraphFromFolder)
    MergeFrom(*source);
  }
}

void LoadGraphFromFolder::MergeFrom(const LoadGraphFromFolder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.LoadGraphFromFolder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  eschema_.MergeFrom(from.eschema_);
  if (from.folder().size() > 0) {
    _internal_set_folder(from._internal_folder());
  }
  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.vptype().size() > 0) {
    _internal_set_vptype(from._internal_vptype());
  }
  if (from.eptype().size() > 0) {
    _internal_set_eptype(from._internal_eptype());
  }
  if (from.has_nodes()) {
    _internal_mutable_nodes()->::dan::StrVec::MergeFrom(from._internal_nodes());
  }
  if (from.incoming() != 0) {
    _internal_set_incoming(from._internal_incoming());
  }
  if (from.merge() != 0) {
    _internal_set_merge(from._internal_merge());
  }
  if (from.is_partition() != 0) {
    _internal_set_is_partition(from._internal_is_partition());
  }
  if (from.part_type() != 0) {
    _internal_set_part_type(from._internal_part_type());
  }
}

void LoadGraphFromFolder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.LoadGraphFromFolder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadGraphFromFolder::CopyFrom(const LoadGraphFromFolder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.LoadGraphFromFolder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadGraphFromFolder::IsInitialized() const {
  return true;
}

void LoadGraphFromFolder::InternalSwap(LoadGraphFromFolder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  eschema_.InternalSwap(&other->eschema_);
  folder_.Swap(&other->folder_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vptype_.Swap(&other->vptype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  eptype_.Swap(&other->eptype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadGraphFromFolder, part_type_)
      + sizeof(LoadGraphFromFolder::part_type_)
      - PROTOBUF_FIELD_OFFSET(LoadGraphFromFolder, nodes_)>(
          reinterpret_cast<char*>(&nodes_),
          reinterpret_cast<char*>(&other->nodes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadGraphFromFolder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VertexExists::_Internal {
 public:
  static const ::dan::Eval& vkey(const VertexExists* msg);
};

const ::dan::Eval&
VertexExists::_Internal::vkey(const VertexExists* msg) {
  return *msg->vkey_;
}
VertexExists::VertexExists(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.VertexExists)
}
VertexExists::VertexExists(const VertexExists& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  if (from._internal_has_vkey()) {
    vkey_ = new ::dan::Eval(*from.vkey_);
  } else {
    vkey_ = nullptr;
  }
  vpid_ = from.vpid_;
  // @@protoc_insertion_point(copy_constructor:dan.VertexExists)
}

void VertexExists::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VertexExists_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vkey_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vpid_) -
      reinterpret_cast<char*>(&vkey_)) + sizeof(vpid_));
}

VertexExists::~VertexExists() {
  // @@protoc_insertion_point(destructor:dan.VertexExists)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VertexExists::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vkey_;
}

void VertexExists::ArenaDtor(void* object) {
  VertexExists* _this = reinterpret_cast< VertexExists* >(object);
  (void)_this;
}
void VertexExists::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VertexExists::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VertexExists& VertexExists::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VertexExists_interface_2eproto.base);
  return *internal_default_instance();
}


void VertexExists::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.VertexExists)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gname_.ClearToEmpty();
  if (GetArena() == nullptr && vkey_ != nullptr) {
    delete vkey_;
  }
  vkey_ = nullptr;
  vpid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VertexExists::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.VertexExists.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Eval vkey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vkey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vpid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VertexExists::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.VertexExists)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.VertexExists.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // .dan.Eval vkey = 2;
  if (this->has_vkey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vkey(this), target, stream);
  }

  // int32 vpid = 3;
  if (this->vpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vpid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.VertexExists)
  return target;
}

size_t VertexExists::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.VertexExists)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // .dan.Eval vkey = 2;
  if (this->has_vkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vkey_);
  }

  // int32 vpid = 3;
  if (this->vpid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vpid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VertexExists::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.VertexExists)
  GOOGLE_DCHECK_NE(&from, this);
  const VertexExists* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VertexExists>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.VertexExists)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.VertexExists)
    MergeFrom(*source);
  }
}

void VertexExists::MergeFrom(const VertexExists& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.VertexExists)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.has_vkey()) {
    _internal_mutable_vkey()->::dan::Eval::MergeFrom(from._internal_vkey());
  }
  if (from.vpid() != 0) {
    _internal_set_vpid(from._internal_vpid());
  }
}

void VertexExists::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.VertexExists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VertexExists::CopyFrom(const VertexExists& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.VertexExists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexExists::IsInitialized() const {
  return true;
}

void VertexExists::InternalSwap(VertexExists* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VertexExists, vpid_)
      + sizeof(VertexExists::vpid_)
      - PROTOBUF_FIELD_OFFSET(VertexExists, vkey_)>(
          reinterpret_cast<char*>(&vkey_),
          reinterpret_cast<char*>(&other->vkey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexExists::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestStream::_Internal {
 public:
  static const ::dan::Table& data(const TestStream* msg);
};

const ::dan::Table&
TestStream::_Internal::data(const TestStream* msg) {
  return *msg->data_;
}
TestStream::TestStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.TestStream)
}
TestStream::TestStream(const TestStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::dan::Table(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dan.TestStream)
}

void TestStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestStream_interface_2eproto.base);
  data_ = nullptr;
}

TestStream::~TestStream() {
  // @@protoc_insertion_point(destructor:dan.TestStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void TestStream::ArenaDtor(void* object) {
  TestStream* _this = reinterpret_cast< TestStream* >(object);
  (void)_this;
}
void TestStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestStream& TestStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestStream_interface_2eproto.base);
  return *internal_default_instance();
}


void TestStream::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.TestStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dan.Table data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.TestStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dan.Table data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.TestStream)
  return target;
}

size_t TestStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.TestStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dan.Table data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.TestStream)
  GOOGLE_DCHECK_NE(&from, this);
  const TestStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.TestStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.TestStream)
    MergeFrom(*source);
  }
}

void TestStream::MergeFrom(const TestStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.TestStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::dan::Table::MergeFrom(from._internal_data());
  }
}

void TestStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.TestStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestStream::CopyFrom(const TestStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.TestStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestStream::IsInitialized() const {
  return true;
}

void TestStream::InternalSwap(TestStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HostInfo::_Internal {
 public:
};

HostInfo::HostInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.HostInfo)
}
HostInfo::HostInfo(const HostInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addr(), 
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:dan.HostInfo)
}

void HostInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostInfo_interface_2eproto.base);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

HostInfo::~HostInfo() {
  // @@protoc_insertion_point(destructor:dan.HostInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HostInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostInfo::ArenaDtor(void* object) {
  HostInfo* _this = reinterpret_cast< HostInfo* >(object);
  (void)_this;
}
void HostInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostInfo& HostInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostInfo_interface_2eproto.base);
  return *internal_default_instance();
}


void HostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.HostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.HostInfo.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.HostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.HostInfo.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.HostInfo)
  return target;
}

size_t HostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.HostInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.HostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HostInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.HostInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.HostInfo)
    MergeFrom(*source);
  }
}

void HostInfo::MergeFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.HostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {
    _internal_set_addr(from._internal_addr());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void HostInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.HostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostInfo::CopyFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.HostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostInfo::IsInitialized() const {
  return true;
}

void HostInfo::InternalSwap(HostInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Binary::_Internal {
 public:
};

Binary::Binary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.Binary)
}
Binary::Binary(const Binary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v().empty()) {
    v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_v(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:dan.Binary)
}

void Binary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Binary_interface_2eproto.base);
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Binary::~Binary() {
  // @@protoc_insertion_point(destructor:dan.Binary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Binary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  v_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Binary::ArenaDtor(void* object) {
  Binary* _this = reinterpret_cast< Binary* >(object);
  (void)_this;
}
void Binary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Binary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Binary& Binary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Binary_interface_2eproto.base);
  return *internal_default_instance();
}


void Binary::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.Binary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Binary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_v();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Binary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.Binary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes v = 1;
  if (this->v().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.Binary)
  return target;
}

size_t Binary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.Binary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes v = 1;
  if (this->v().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Binary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.Binary)
  GOOGLE_DCHECK_NE(&from, this);
  const Binary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Binary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.Binary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.Binary)
    MergeFrom(*source);
  }
}

void Binary::MergeFrom(const Binary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.Binary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v().size() > 0) {
    _internal_set_v(from._internal_v());
  }
}

void Binary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.Binary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Binary::CopyFrom(const Binary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.Binary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Binary::IsInitialized() const {
  return true;
}

void Binary::InternalSwap(Binary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v_.Swap(&other->v_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Binary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MergeInfo::_Internal {
 public:
};

MergeInfo::MergeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.MergeInfo)
}
MergeInfo::MergeInfo(const MergeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  ::memcpy(&least_, &from.least_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_split_) -
    reinterpret_cast<char*>(&least_)) + sizeof(num_split_));
  // @@protoc_insertion_point(copy_constructor:dan.MergeInfo)
}

void MergeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MergeInfo_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&least_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_split_) -
      reinterpret_cast<char*>(&least_)) + sizeof(num_split_));
}

MergeInfo::~MergeInfo() {
  // @@protoc_insertion_point(destructor:dan.MergeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MergeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MergeInfo::ArenaDtor(void* object) {
  MergeInfo* _this = reinterpret_cast< MergeInfo* >(object);
  (void)_this;
}
void MergeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MergeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MergeInfo& MergeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MergeInfo_interface_2eproto.base);
  return *internal_default_instance();
}


void MergeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.MergeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gname_.ClearToEmpty();
  ::memset(&least_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_split_) -
      reinterpret_cast<char*>(&least_)) + sizeof(num_split_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.MergeInfo.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 least = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          least_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_split = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_split_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MergeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.MergeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.MergeInfo.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // int32 least = 2;
  if (this->least() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_least(), target);
  }

  // int32 num_split = 3;
  if (this->num_split() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_split(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.MergeInfo)
  return target;
}

size_t MergeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.MergeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // int32 least = 2;
  if (this->least() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_least());
  }

  // int32 num_split = 3;
  if (this->num_split() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_split());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MergeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.MergeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MergeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MergeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.MergeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.MergeInfo)
    MergeFrom(*source);
  }
}

void MergeInfo::MergeFrom(const MergeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.MergeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.least() != 0) {
    _internal_set_least(from._internal_least());
  }
  if (from.num_split() != 0) {
    _internal_set_num_split(from._internal_num_split());
  }
}

void MergeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.MergeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeInfo::CopyFrom(const MergeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.MergeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeInfo::IsInitialized() const {
  return true;
}

void MergeInfo::InternalSwap(MergeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MergeInfo, num_split_)
      + sizeof(MergeInfo::num_split_)
      - PROTOBUF_FIELD_OFFSET(MergeInfo, least_)>(
          reinterpret_cast<char*>(&least_),
          reinterpret_cast<char*>(&other->least_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferBinary::_Internal {
 public:
  static const ::dan::Binary& binary(const TransferBinary* msg);
};

const ::dan::Binary&
TransferBinary::_Internal::binary(const TransferBinary* msg) {
  return *msg->binary_;
}
TransferBinary::TransferBinary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.TransferBinary)
}
TransferBinary::TransferBinary(const TransferBinary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_binary()) {
    binary_ = new ::dan::Binary(*from.binary_);
  } else {
    binary_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sgmt_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(sgmt_id_));
  // @@protoc_insertion_point(copy_constructor:dan.TransferBinary)
}

void TransferBinary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferBinary_interface_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&binary_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sgmt_id_) -
      reinterpret_cast<char*>(&binary_)) + sizeof(sgmt_id_));
}

TransferBinary::~TransferBinary() {
  // @@protoc_insertion_point(destructor:dan.TransferBinary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferBinary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete binary_;
}

void TransferBinary::ArenaDtor(void* object) {
  TransferBinary* _this = reinterpret_cast< TransferBinary* >(object);
  (void)_this;
}
void TransferBinary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferBinary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferBinary& TransferBinary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferBinary_interface_2eproto.base);
  return *internal_default_instance();
}


void TransferBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.TransferBinary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && binary_ != nullptr) {
    delete binary_;
  }
  binary_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sgmt_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(sgmt_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferBinary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.TransferBinary.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pa_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pa_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sgmt_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sgmt_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.Binary binary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_binary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferBinary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.TransferBinary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.TransferBinary.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 pa_id = 3;
  if (this->pa_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pa_id(), target);
  }

  // int32 sgmt_id = 4;
  if (this->sgmt_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sgmt_id(), target);
  }

  // .dan.Binary binary = 5;
  if (this->has_binary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::binary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.TransferBinary)
  return target;
}

size_t TransferBinary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.TransferBinary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .dan.Binary binary = 5;
  if (this->has_binary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *binary_);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 pa_id = 3;
  if (this->pa_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pa_id());
  }

  // int32 sgmt_id = 4;
  if (this->sgmt_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sgmt_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferBinary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.TransferBinary)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferBinary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferBinary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.TransferBinary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.TransferBinary)
    MergeFrom(*source);
  }
}

void TransferBinary::MergeFrom(const TransferBinary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.TransferBinary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_binary()) {
    _internal_mutable_binary()->::dan::Binary::MergeFrom(from._internal_binary());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.pa_id() != 0) {
    _internal_set_pa_id(from._internal_pa_id());
  }
  if (from.sgmt_id() != 0) {
    _internal_set_sgmt_id(from._internal_sgmt_id());
  }
}

void TransferBinary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.TransferBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferBinary::CopyFrom(const TransferBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.TransferBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferBinary::IsInitialized() const {
  return true;
}

void TransferBinary::InternalSwap(TransferBinary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferBinary, sgmt_id_)
      + sizeof(TransferBinary::sgmt_id_)
      - PROTOBUF_FIELD_OFFSET(TransferBinary, binary_)>(
          reinterpret_cast<char*>(&binary_),
          reinterpret_cast<char*>(&other->binary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferBinary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MemoryStat::_Internal {
 public:
  static const ::dan::StrVec& nodes(const MemoryStat* msg);
};

const ::dan::StrVec&
MemoryStat::_Internal::nodes(const MemoryStat* msg) {
  return *msg->nodes_;
}
MemoryStat::MemoryStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.MemoryStat)
}
MemoryStat::MemoryStat(const MemoryStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  if (from._internal_has_nodes()) {
    nodes_ = new ::dan::StrVec(*from.nodes_);
  } else {
    nodes_ = nullptr;
  }
  ::memcpy(&verbose_, &from.verbose_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&verbose_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:dan.MemoryStat)
}

void MemoryStat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoryStat_interface_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nodes_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&nodes_)) + sizeof(level_));
}

MemoryStat::~MemoryStat() {
  // @@protoc_insertion_point(destructor:dan.MemoryStat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemoryStat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nodes_;
}

void MemoryStat::ArenaDtor(void* object) {
  MemoryStat* _this = reinterpret_cast< MemoryStat* >(object);
  (void)_this;
}
void MemoryStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryStat& MemoryStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryStat_interface_2eproto.base);
  return *internal_default_instance();
}


void MemoryStat::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.MemoryStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  if (GetArena() == nullptr && nodes_ != nullptr) {
    delete nodes_;
  }
  nodes_ = nullptr;
  ::memset(&verbose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&verbose_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool verbose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.MemoryStat.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.StrVec nodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.MemoryStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool verbose = 1;
  if (this->verbose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_verbose(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.MemoryStat.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // int32 level = 3;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // .dan.StrVec nodes = 4;
  if (this->has_nodes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::nodes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.MemoryStat)
  return target;
}

size_t MemoryStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.MemoryStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .dan.StrVec nodes = 4;
  if (this->has_nodes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodes_);
  }

  // bool verbose = 1;
  if (this->verbose() != 0) {
    total_size += 1 + 1;
  }

  // int32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.MemoryStat)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.MemoryStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.MemoryStat)
    MergeFrom(*source);
  }
}

void MemoryStat::MergeFrom(const MemoryStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.MemoryStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.has_nodes()) {
    _internal_mutable_nodes()->::dan::StrVec::MergeFrom(from._internal_nodes());
  }
  if (from.verbose() != 0) {
    _internal_set_verbose(from._internal_verbose());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void MemoryStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.MemoryStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryStat::CopyFrom(const MemoryStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.MemoryStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryStat::IsInitialized() const {
  return true;
}

void MemoryStat::InternalSwap(MemoryStat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryStat, level_)
      + sizeof(MemoryStat::level_)
      - PROTOBUF_FIELD_OFFSET(MemoryStat, nodes_)>(
          reinterpret_cast<char*>(&nodes_),
          reinterpret_cast<char*>(&other->nodes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class APPNP::_Internal {
 public:
};

APPNP::APPNP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.APPNP)
}
APPNP::APPNP(const APPNP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&k_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(k_));
  // @@protoc_insertion_point(copy_constructor:dan.APPNP)
}

void APPNP::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&k_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(k_));
}

APPNP::~APPNP() {
  // @@protoc_insertion_point(destructor:dan.APPNP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void APPNP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void APPNP::ArenaDtor(void* object) {
  APPNP* _this = reinterpret_cast< APPNP* >(object);
  (void)_this;
}
void APPNP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void APPNP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const APPNP& APPNP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_APPNP_interface_2eproto.base);
  return *internal_default_instance();
}


void APPNP::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.APPNP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(k_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APPNP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* APPNP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.APPNP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  // int32 k = 2;
  if (this->k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_k(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.APPNP)
  return target;
}

size_t APPNP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.APPNP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 k = 2;
  if (this->k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_k());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APPNP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.APPNP)
  GOOGLE_DCHECK_NE(&from, this);
  const APPNP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APPNP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.APPNP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.APPNP)
    MergeFrom(*source);
  }
}

void APPNP::MergeFrom(const APPNP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.APPNP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (from.k() != 0) {
    _internal_set_k(from._internal_k());
  }
}

void APPNP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.APPNP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APPNP::CopyFrom(const APPNP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.APPNP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APPNP::IsInitialized() const {
  return true;
}

void APPNP::InternalSwap(APPNP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APPNP, k_)
      + sizeof(APPNP::k_)
      - PROTOBUF_FIELD_OFFSET(APPNP, alpha_)>(
          reinterpret_cast<char*>(&alpha_),
          reinterpret_cast<char*>(&other->alpha_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APPNP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GAT::_Internal {
 public:
};

GAT::GAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.GAT)
}
GAT::GAT(const GAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_head_, &from.num_head_,
    static_cast<size_t>(reinterpret_cast<char*>(&importance_spl_) -
    reinterpret_cast<char*>(&num_head_)) + sizeof(importance_spl_));
  // @@protoc_insertion_point(copy_constructor:dan.GAT)
}

void GAT::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&num_head_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&importance_spl_) -
      reinterpret_cast<char*>(&num_head_)) + sizeof(importance_spl_));
}

GAT::~GAT() {
  // @@protoc_insertion_point(destructor:dan.GAT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GAT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GAT::ArenaDtor(void* object) {
  GAT* _this = reinterpret_cast< GAT* >(object);
  (void)_this;
}
void GAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GAT& GAT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GAT_interface_2eproto.base);
  return *internal_default_instance();
}


void GAT::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.GAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&importance_spl_) -
      reinterpret_cast<char*>(&num_head_)) + sizeof(importance_spl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_head_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool agg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          agg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 importance_spl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          importance_spl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.GAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_head = 1;
  if (this->num_head() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_head(), target);
  }

  // bool agg = 2;
  if (this->agg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_agg(), target);
  }

  // int32 importance_spl = 3;
  if (this->importance_spl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_importance_spl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.GAT)
  return target;
}

size_t GAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.GAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num_head = 1;
  if (this->num_head() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_head());
  }

  // bool agg = 2;
  if (this->agg() != 0) {
    total_size += 1 + 1;
  }

  // int32 importance_spl = 3;
  if (this->importance_spl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_importance_spl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.GAT)
  GOOGLE_DCHECK_NE(&from, this);
  const GAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.GAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.GAT)
    MergeFrom(*source);
  }
}

void GAT::MergeFrom(const GAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.GAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_head() != 0) {
    _internal_set_num_head(from._internal_num_head());
  }
  if (from.agg() != 0) {
    _internal_set_agg(from._internal_agg());
  }
  if (from.importance_spl() != 0) {
    _internal_set_importance_spl(from._internal_importance_spl());
  }
}

void GAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.GAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GAT::CopyFrom(const GAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.GAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GAT::IsInitialized() const {
  return true;
}

void GAT::InternalSwap(GAT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GAT, importance_spl_)
      + sizeof(GAT::importance_spl_)
      - PROTOBUF_FIELD_OFFSET(GAT, num_head_)>(
          reinterpret_cast<char*>(&num_head_),
          reinterpret_cast<char*>(&other->num_head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GAT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelInfo::_Internal {
 public:
  static const ::dan::APPNP& appnp(const ModelInfo* msg);
  static const ::dan::GAT& gat(const ModelInfo* msg);
};

const ::dan::APPNP&
ModelInfo::_Internal::appnp(const ModelInfo* msg) {
  return *msg->m_.appnp_;
}
const ::dan::GAT&
ModelInfo::_Internal::gat(const ModelInfo* msg) {
  return *msg->m_.gat_;
}
void ModelInfo::set_allocated_appnp(::dan::APPNP* appnp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_m();
  if (appnp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appnp);
    if (message_arena != submessage_arena) {
      appnp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appnp, submessage_arena);
    }
    set_has_appnp();
    m_.appnp_ = appnp;
  }
  // @@protoc_insertion_point(field_set_allocated:dan.ModelInfo.appnp)
}
void ModelInfo::set_allocated_gat(::dan::GAT* gat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_m();
  if (gat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gat);
    if (message_arena != submessage_arena) {
      gat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gat, submessage_arena);
    }
    set_has_gat();
    m_.gat_ = gat;
  }
  // @@protoc_insertion_point(field_set_allocated:dan.ModelInfo.gat)
}
ModelInfo::ModelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.ModelInfo)
}
ModelInfo::ModelInfo(const ModelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_m();
  switch (from.m_case()) {
    case kAppnp: {
      _internal_mutable_appnp()->::dan::APPNP::MergeFrom(from._internal_appnp());
      break;
    }
    case kGat: {
      _internal_mutable_gat()->::dan::GAT::MergeFrom(from._internal_gat());
      break;
    }
    case M_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dan.ModelInfo)
}

void ModelInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelInfo_interface_2eproto.base);
  clear_has_m();
}

ModelInfo::~ModelInfo() {
  // @@protoc_insertion_point(destructor:dan.ModelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_m()) {
    clear_m();
  }
}

void ModelInfo::ArenaDtor(void* object) {
  ModelInfo* _this = reinterpret_cast< ModelInfo* >(object);
  (void)_this;
}
void ModelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelInfo& ModelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelInfo_interface_2eproto.base);
  return *internal_default_instance();
}


void ModelInfo::clear_m() {
// @@protoc_insertion_point(one_of_clear_start:dan.ModelInfo)
  switch (m_case()) {
    case kAppnp: {
      if (GetArena() == nullptr) {
        delete m_.appnp_;
      }
      break;
    }
    case kGat: {
      if (GetArena() == nullptr) {
        delete m_.gat_;
      }
      break;
    }
    case M_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = M_NOT_SET;
}


void ModelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.ModelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_m();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dan.APPNP appnp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_appnp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.GAT gat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.ModelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dan.APPNP appnp = 1;
  if (_internal_has_appnp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::appnp(this), target, stream);
  }

  // .dan.GAT gat = 2;
  if (_internal_has_gat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.ModelInfo)
  return target;
}

size_t ModelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.ModelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (m_case()) {
    // .dan.APPNP appnp = 1;
    case kAppnp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *m_.appnp_);
      break;
    }
    // .dan.GAT gat = 2;
    case kGat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *m_.gat_);
      break;
    }
    case M_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.ModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.ModelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.ModelInfo)
    MergeFrom(*source);
  }
}

void ModelInfo::MergeFrom(const ModelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.ModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.m_case()) {
    case kAppnp: {
      _internal_mutable_appnp()->::dan::APPNP::MergeFrom(from._internal_appnp());
      break;
    }
    case kGat: {
      _internal_mutable_gat()->::dan::GAT::MergeFrom(from._internal_gat());
      break;
    }
    case M_NOT_SET: {
      break;
    }
  }
}

void ModelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInfo::CopyFrom(const ModelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInfo::IsInitialized() const {
  return true;
}

void ModelInfo::InternalSwap(ModelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(m_, other->m_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeClassifierInfo::_Internal {
 public:
  static const ::dan::IntVec& fids(const NodeClassifierInfo* msg);
  static const ::dan::ModelInfo& model_info(const NodeClassifierInfo* msg);
};

const ::dan::IntVec&
NodeClassifierInfo::_Internal::fids(const NodeClassifierInfo* msg) {
  return *msg->fids_;
}
const ::dan::ModelInfo&
NodeClassifierInfo::_Internal::model_info(const NodeClassifierInfo* msg) {
  return *msg->model_info_;
}
NodeClassifierInfo::NodeClassifierInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dan.NodeClassifierInfo)
}
NodeClassifierInfo::NodeClassifierInfo(const NodeClassifierInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gname().empty()) {
    gname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gname(), 
      GetArena());
  }
  log_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log_file().empty()) {
    log_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log_file(), 
      GetArena());
  }
  if (from._internal_has_fids()) {
    fids_ = new ::dan::IntVec(*from.fids_);
  } else {
    fids_ = nullptr;
  }
  if (from._internal_has_model_info()) {
    model_info_ = new ::dan::ModelInfo(*from.model_info_);
  } else {
    model_info_ = nullptr;
  }
  ::memcpy(&input_size_, &from.input_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_epochs_) -
    reinterpret_cast<char*>(&input_size_)) + sizeof(num_epochs_));
  // @@protoc_insertion_point(copy_constructor:dan.NodeClassifierInfo)
}

void NodeClassifierInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeClassifierInfo_interface_2eproto.base);
  gname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fids_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_epochs_) -
      reinterpret_cast<char*>(&fids_)) + sizeof(num_epochs_));
}

NodeClassifierInfo::~NodeClassifierInfo() {
  // @@protoc_insertion_point(destructor:dan.NodeClassifierInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeClassifierInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fids_;
  if (this != internal_default_instance()) delete model_info_;
}

void NodeClassifierInfo::ArenaDtor(void* object) {
  NodeClassifierInfo* _this = reinterpret_cast< NodeClassifierInfo* >(object);
  (void)_this;
}
void NodeClassifierInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeClassifierInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeClassifierInfo& NodeClassifierInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeClassifierInfo_interface_2eproto.base);
  return *internal_default_instance();
}


void NodeClassifierInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dan.NodeClassifierInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gname_.ClearToEmpty();
  log_file_.ClearToEmpty();
  if (GetArena() == nullptr && fids_ != nullptr) {
    delete fids_;
  }
  fids_ = nullptr;
  if (GetArena() == nullptr && model_info_ != nullptr) {
    delete model_info_;
  }
  model_info_ = nullptr;
  ::memset(&input_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_epochs_) -
      reinterpret_cast<char*>(&input_size_)) + sizeof(num_epochs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeClassifierInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.NodeClassifierInfo.gname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.IntVec fids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 input_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          input_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hidden_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hidden_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_class = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float dropout = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          dropout_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float learning_rate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 data_update_interval = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          data_update_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool merge_manually = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          merge_manually_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_epochs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          num_epochs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dan.ModelInfo model_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string log_file = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_log_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dan.NodeClassifierInfo.log_file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeClassifierInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dan.NodeClassifierInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gname().data(), static_cast<int>(this->_internal_gname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.NodeClassifierInfo.gname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gname(), target);
  }

  // .dan.IntVec fids = 2;
  if (this->has_fids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fids(this), target, stream);
  }

  // int32 input_size = 3;
  if (this->input_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_input_size(), target);
  }

  // int32 hidden_size = 4;
  if (this->hidden_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_hidden_size(), target);
  }

  // int32 num_class = 5;
  if (this->num_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_num_class(), target);
  }

  // float dropout = 6;
  if (!(this->dropout() <= 0 && this->dropout() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_dropout(), target);
  }

  // float learning_rate = 7;
  if (!(this->learning_rate() <= 0 && this->learning_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_learning_rate(), target);
  }

  // int32 data_update_interval = 8;
  if (this->data_update_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_data_update_interval(), target);
  }

  // bool merge_manually = 9;
  if (this->merge_manually() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_merge_manually(), target);
  }

  // int32 num_epochs = 10;
  if (this->num_epochs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_num_epochs(), target);
  }

  // .dan.ModelInfo model_info = 11;
  if (this->has_model_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::model_info(this), target, stream);
  }

  // string log_file = 12;
  if (this->log_file().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_file().data(), static_cast<int>(this->_internal_log_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dan.NodeClassifierInfo.log_file");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_log_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dan.NodeClassifierInfo)
  return target;
}

size_t NodeClassifierInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dan.NodeClassifierInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gname = 1;
  if (this->gname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gname());
  }

  // string log_file = 12;
  if (this->log_file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_file());
  }

  // .dan.IntVec fids = 2;
  if (this->has_fids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fids_);
  }

  // .dan.ModelInfo model_info = 11;
  if (this->has_model_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_info_);
  }

  // int32 input_size = 3;
  if (this->input_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_input_size());
  }

  // int32 hidden_size = 4;
  if (this->hidden_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hidden_size());
  }

  // int32 num_class = 5;
  if (this->num_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_class());
  }

  // float dropout = 6;
  if (!(this->dropout() <= 0 && this->dropout() >= 0)) {
    total_size += 1 + 4;
  }

  // float learning_rate = 7;
  if (!(this->learning_rate() <= 0 && this->learning_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 data_update_interval = 8;
  if (this->data_update_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data_update_interval());
  }

  // bool merge_manually = 9;
  if (this->merge_manually() != 0) {
    total_size += 1 + 1;
  }

  // int32 num_epochs = 10;
  if (this->num_epochs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_epochs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeClassifierInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dan.NodeClassifierInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeClassifierInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeClassifierInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dan.NodeClassifierInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dan.NodeClassifierInfo)
    MergeFrom(*source);
  }
}

void NodeClassifierInfo::MergeFrom(const NodeClassifierInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dan.NodeClassifierInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gname().size() > 0) {
    _internal_set_gname(from._internal_gname());
  }
  if (from.log_file().size() > 0) {
    _internal_set_log_file(from._internal_log_file());
  }
  if (from.has_fids()) {
    _internal_mutable_fids()->::dan::IntVec::MergeFrom(from._internal_fids());
  }
  if (from.has_model_info()) {
    _internal_mutable_model_info()->::dan::ModelInfo::MergeFrom(from._internal_model_info());
  }
  if (from.input_size() != 0) {
    _internal_set_input_size(from._internal_input_size());
  }
  if (from.hidden_size() != 0) {
    _internal_set_hidden_size(from._internal_hidden_size());
  }
  if (from.num_class() != 0) {
    _internal_set_num_class(from._internal_num_class());
  }
  if (!(from.dropout() <= 0 && from.dropout() >= 0)) {
    _internal_set_dropout(from._internal_dropout());
  }
  if (!(from.learning_rate() <= 0 && from.learning_rate() >= 0)) {
    _internal_set_learning_rate(from._internal_learning_rate());
  }
  if (from.data_update_interval() != 0) {
    _internal_set_data_update_interval(from._internal_data_update_interval());
  }
  if (from.merge_manually() != 0) {
    _internal_set_merge_manually(from._internal_merge_manually());
  }
  if (from.num_epochs() != 0) {
    _internal_set_num_epochs(from._internal_num_epochs());
  }
}

void NodeClassifierInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dan.NodeClassifierInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeClassifierInfo::CopyFrom(const NodeClassifierInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dan.NodeClassifierInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeClassifierInfo::IsInitialized() const {
  return true;
}

void NodeClassifierInfo::InternalSwap(NodeClassifierInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gname_.Swap(&other->gname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  log_file_.Swap(&other->log_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeClassifierInfo, num_epochs_)
      + sizeof(NodeClassifierInfo::num_epochs_)
      - PROTOBUF_FIELD_OFFSET(NodeClassifierInfo, fids_)>(
          reinterpret_cast<char*>(&fids_),
          reinterpret_cast<char*>(&other->fids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeClassifierInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dan::Void* Arena::CreateMaybeMessage< ::dan::Void >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::Void >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::Int* Arena::CreateMaybeMessage< ::dan::Int >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::Int >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::IntVec* Arena::CreateMaybeMessage< ::dan::IntVec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::IntVec >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::Long* Arena::CreateMaybeMessage< ::dan::Long >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::Long >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::LongVec* Arena::CreateMaybeMessage< ::dan::LongVec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::LongVec >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::Float* Arena::CreateMaybeMessage< ::dan::Float >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::Float >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::FloatVec* Arena::CreateMaybeMessage< ::dan::FloatVec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::FloatVec >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::Double* Arena::CreateMaybeMessage< ::dan::Double >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::Double >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::DoubleVec* Arena::CreateMaybeMessage< ::dan::DoubleVec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::DoubleVec >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::Str* Arena::CreateMaybeMessage< ::dan::Str >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::Str >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::StrVec* Arena::CreateMaybeMessage< ::dan::StrVec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::StrVec >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::Eval* Arena::CreateMaybeMessage< ::dan::Eval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::Eval >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::Record* Arena::CreateMaybeMessage< ::dan::Record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::Record >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::Table* Arena::CreateMaybeMessage< ::dan::Table >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::Table >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::Code* Arena::CreateMaybeMessage< ::dan::Code >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::Code >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::NodeInfo* Arena::CreateMaybeMessage< ::dan::NodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::NodeInfoVec* Arena::CreateMaybeMessage< ::dan::NodeInfoVec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::NodeInfoVec >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::Field* Arena::CreateMaybeMessage< ::dan::Field >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::Field >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::CreateTable* Arena::CreateMaybeMessage< ::dan::CreateTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::CreateTable >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::CreateIndex* Arena::CreateMaybeMessage< ::dan::CreateIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::CreateIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::TablePartition* Arena::CreateMaybeMessage< ::dan::TablePartition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::TablePartition >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::TableInfo* Arena::CreateMaybeMessage< ::dan::TableInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::TableInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::CreateGraph* Arena::CreateMaybeMessage< ::dan::CreateGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::CreateGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::GraphPartition* Arena::CreateMaybeMessage< ::dan::GraphPartition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::GraphPartition >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::GraphInfo* Arena::CreateMaybeMessage< ::dan::GraphInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::GraphInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::InsertRecord* Arena::CreateMaybeMessage< ::dan::InsertRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::InsertRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::InsertRecordStr* Arena::CreateMaybeMessage< ::dan::InsertRecordStr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::InsertRecordStr >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::InsertRecordBatch* Arena::CreateMaybeMessage< ::dan::InsertRecordBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::InsertRecordBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::DefineVertex* Arena::CreateMaybeMessage< ::dan::DefineVertex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::DefineVertex >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::ImportVertex* Arena::CreateMaybeMessage< ::dan::ImportVertex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::ImportVertex >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::InsertVertex* Arena::CreateMaybeMessage< ::dan::InsertVertex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::InsertVertex >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::InsertVertexBatch* Arena::CreateMaybeMessage< ::dan::InsertVertexBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::InsertVertexBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::ImportEdge* Arena::CreateMaybeMessage< ::dan::ImportEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::ImportEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::InsertEdge* Arena::CreateMaybeMessage< ::dan::InsertEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::InsertEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::InsertEdgeVP* Arena::CreateMaybeMessage< ::dan::InsertEdgeVP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::InsertEdgeVP >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::InsertEdgeNaive* Arena::CreateMaybeMessage< ::dan::InsertEdgeNaive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::InsertEdgeNaive >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::InsertEdgeBatch* Arena::CreateMaybeMessage< ::dan::InsertEdgeBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::InsertEdgeBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::InsertEdgeBatchVP* Arena::CreateMaybeMessage< ::dan::InsertEdgeBatchVP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::InsertEdgeBatchVP >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::TableScan* Arena::CreateMaybeMessage< ::dan::TableScan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::TableScan >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::IndexSearch* Arena::CreateMaybeMessage< ::dan::IndexSearch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::IndexSearch >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::AdjacentList* Arena::CreateMaybeMessage< ::dan::AdjacentList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::AdjacentList >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::AdjacentListResult* Arena::CreateMaybeMessage< ::dan::AdjacentListResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::AdjacentListResult >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::GetVertex* Arena::CreateMaybeMessage< ::dan::GetVertex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::GetVertex >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::VertexList* Arena::CreateMaybeMessage< ::dan::VertexList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::VertexList >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::EdgeList* Arena::CreateMaybeMessage< ::dan::EdgeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::EdgeList >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::RemoteTask* Arena::CreateMaybeMessage< ::dan::RemoteTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::RemoteTask >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::RemoteResult* Arena::CreateMaybeMessage< ::dan::RemoteResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::RemoteResult >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::RemoteObject* Arena::CreateMaybeMessage< ::dan::RemoteObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::RemoteObject >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::RemoteTaskResult* Arena::CreateMaybeMessage< ::dan::RemoteTaskResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::RemoteTaskResult >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::RemoteObjectTask* Arena::CreateMaybeMessage< ::dan::RemoteObjectTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::RemoteObjectTask >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::LoadGraphFromFolder* Arena::CreateMaybeMessage< ::dan::LoadGraphFromFolder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::LoadGraphFromFolder >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::VertexExists* Arena::CreateMaybeMessage< ::dan::VertexExists >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::VertexExists >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::TestStream* Arena::CreateMaybeMessage< ::dan::TestStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::TestStream >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::HostInfo* Arena::CreateMaybeMessage< ::dan::HostInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::HostInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::Binary* Arena::CreateMaybeMessage< ::dan::Binary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::Binary >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::MergeInfo* Arena::CreateMaybeMessage< ::dan::MergeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::MergeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::TransferBinary* Arena::CreateMaybeMessage< ::dan::TransferBinary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::TransferBinary >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::MemoryStat* Arena::CreateMaybeMessage< ::dan::MemoryStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::MemoryStat >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::APPNP* Arena::CreateMaybeMessage< ::dan::APPNP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::APPNP >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::GAT* Arena::CreateMaybeMessage< ::dan::GAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::GAT >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::ModelInfo* Arena::CreateMaybeMessage< ::dan::ModelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::ModelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dan::NodeClassifierInfo* Arena::CreateMaybeMessage< ::dan::NodeClassifierInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dan::NodeClassifierInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
