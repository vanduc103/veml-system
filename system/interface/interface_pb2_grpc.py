# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import interface_pb2 as interface__pb2


class DANInterfaceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ping = channel.unary_unary(
                '/dan.DANInterface/ping',
                request_serializer=interface__pb2.Void.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.test_stream = channel.stream_unary(
                '/dan.DANInterface/test_stream',
                request_serializer=interface__pb2.TestStream.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.test_multiunary = channel.unary_unary(
                '/dan.DANInterface/test_multiunary',
                request_serializer=interface__pb2.TestStream.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.test_size = channel.unary_unary(
                '/dan.DANInterface/test_size',
                request_serializer=interface__pb2.DoubleVec.SerializeToString,
                response_deserializer=interface__pb2.DoubleVec.FromString,
                )
        self.archive = channel.unary_unary(
                '/dan.DANInterface/archive',
                request_serializer=interface__pb2.Str.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.recover = channel.unary_unary(
                '/dan.DANInterface/recover',
                request_serializer=interface__pb2.Str.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.request_node_list = channel.unary_unary(
                '/dan.DANInterface/request_node_list',
                request_serializer=interface__pb2.Void.SerializeToString,
                response_deserializer=interface__pb2.NodeInfoVec.FromString,
                )
        self.request_register_node = channel.unary_unary(
                '/dan.DANInterface/request_register_node',
                request_serializer=interface__pb2.Str.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.request_socket = channel.unary_unary(
                '/dan.DANInterface/request_socket',
                request_serializer=interface__pb2.Void.SerializeToString,
                response_deserializer=interface__pb2.HostInfo.FromString,
                )
        self.memory_statistics = channel.unary_unary(
                '/dan.DANInterface/memory_statistics',
                request_serializer=interface__pb2.MemoryStat.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.create_table = channel.unary_unary(
                '/dan.DANInterface/create_table',
                request_serializer=interface__pb2.CreateTable.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.drop_table = channel.unary_unary(
                '/dan.DANInterface/drop_table',
                request_serializer=interface__pb2.Str.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.drop_table_if_exists = channel.unary_unary(
                '/dan.DANInterface/drop_table_if_exists',
                request_serializer=interface__pb2.Str.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.load_table = channel.unary_unary(
                '/dan.DANInterface/load_table',
                request_serializer=interface__pb2.StrVec.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.create_index = channel.unary_unary(
                '/dan.DANInterface/create_index',
                request_serializer=interface__pb2.CreateIndex.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.table_partition = channel.unary_unary(
                '/dan.DANInterface/table_partition',
                request_serializer=interface__pb2.TablePartition.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.set_partition = channel.unary_unary(
                '/dan.DANInterface/set_partition',
                request_serializer=interface__pb2.Str.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.create_graph = channel.unary_unary(
                '/dan.DANInterface/create_graph',
                request_serializer=interface__pb2.CreateGraph.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.drop_graph = channel.unary_unary(
                '/dan.DANInterface/drop_graph',
                request_serializer=interface__pb2.Str.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.drop_graph_if_exists = channel.unary_unary(
                '/dan.DANInterface/drop_graph_if_exists',
                request_serializer=interface__pb2.Str.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.define_vertex = channel.unary_unary(
                '/dan.DANInterface/define_vertex',
                request_serializer=interface__pb2.DefineVertex.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.graph_partition = channel.unary_unary(
                '/dan.DANInterface/graph_partition',
                request_serializer=interface__pb2.GraphPartition.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.graph_merge = channel.unary_unary(
                '/dan.DANInterface/graph_merge',
                request_serializer=interface__pb2.MergeInfo.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.transfer_data = channel.unary_unary(
                '/dan.DANInterface/transfer_data',
                request_serializer=interface__pb2.TransferBinary.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.insert_record = channel.unary_unary(
                '/dan.DANInterface/insert_record',
                request_serializer=interface__pb2.InsertRecord.SerializeToString,
                response_deserializer=interface__pb2.Str.FromString,
                )
        self.insert_record_batch = channel.unary_unary(
                '/dan.DANInterface/insert_record_batch',
                request_serializer=interface__pb2.InsertRecordBatch.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.import_vertex = channel.unary_unary(
                '/dan.DANInterface/import_vertex',
                request_serializer=interface__pb2.ImportVertex.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.insert_vertex = channel.unary_unary(
                '/dan.DANInterface/insert_vertex',
                request_serializer=interface__pb2.InsertVertex.SerializeToString,
                response_deserializer=interface__pb2.Long.FromString,
                )
        self.insert_vertex_batch = channel.unary_unary(
                '/dan.DANInterface/insert_vertex_batch',
                request_serializer=interface__pb2.InsertVertexBatch.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.import_edge = channel.unary_unary(
                '/dan.DANInterface/import_edge',
                request_serializer=interface__pb2.ImportEdge.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.insert_edge = channel.unary_unary(
                '/dan.DANInterface/insert_edge',
                request_serializer=interface__pb2.InsertEdge.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.insert_edge_vp = channel.unary_unary(
                '/dan.DANInterface/insert_edge_vp',
                request_serializer=interface__pb2.InsertEdgeVP.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.insert_edge_naive = channel.unary_unary(
                '/dan.DANInterface/insert_edge_naive',
                request_serializer=interface__pb2.InsertEdgeNaive.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.insert_edge_batch = channel.unary_unary(
                '/dan.DANInterface/insert_edge_batch',
                request_serializer=interface__pb2.InsertEdgeBatch.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.insert_edge_batch_vp = channel.unary_unary(
                '/dan.DANInterface/insert_edge_batch_vp',
                request_serializer=interface__pb2.InsertEdgeBatchVP.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.get_table_info = channel.unary_unary(
                '/dan.DANInterface/get_table_info',
                request_serializer=interface__pb2.Str.SerializeToString,
                response_deserializer=interface__pb2.TableInfo.FromString,
                )
        self.get_num_records = channel.unary_unary(
                '/dan.DANInterface/get_num_records',
                request_serializer=interface__pb2.Str.SerializeToString,
                response_deserializer=interface__pb2.Long.FromString,
                )
        self.table_scan = channel.unary_unary(
                '/dan.DANInterface/table_scan',
                request_serializer=interface__pb2.TableScan.SerializeToString,
                response_deserializer=interface__pb2.Table.FromString,
                )
        self.index_search = channel.unary_unary(
                '/dan.DANInterface/index_search',
                request_serializer=interface__pb2.IndexSearch.SerializeToString,
                response_deserializer=interface__pb2.Table.FromString,
                )
        self.get_graph_info = channel.unary_unary(
                '/dan.DANInterface/get_graph_info',
                request_serializer=interface__pb2.Str.SerializeToString,
                response_deserializer=interface__pb2.GraphInfo.FromString,
                )
        self.get_num_vertex = channel.unary_unary(
                '/dan.DANInterface/get_num_vertex',
                request_serializer=interface__pb2.Str.SerializeToString,
                response_deserializer=interface__pb2.Long.FromString,
                )
        self.get_num_edges = channel.unary_unary(
                '/dan.DANInterface/get_num_edges',
                request_serializer=interface__pb2.Str.SerializeToString,
                response_deserializer=interface__pb2.Long.FromString,
                )
        self.adjacent_list = channel.unary_unary(
                '/dan.DANInterface/adjacent_list',
                request_serializer=interface__pb2.AdjacentList.SerializeToString,
                response_deserializer=interface__pb2.AdjacentListResult.FromString,
                )
        self.get_edge_list = channel.unary_stream(
                '/dan.DANInterface/get_edge_list',
                request_serializer=interface__pb2.Str.SerializeToString,
                response_deserializer=interface__pb2.EdgeList.FromString,
                )
        self.get_vertex = channel.unary_unary(
                '/dan.DANInterface/get_vertex',
                request_serializer=interface__pb2.GetVertex.SerializeToString,
                response_deserializer=interface__pb2.Record.FromString,
                )
        self.get_vertex_list = channel.unary_stream(
                '/dan.DANInterface/get_vertex_list',
                request_serializer=interface__pb2.Str.SerializeToString,
                response_deserializer=interface__pb2.VertexList.FromString,
                )
        self.vertex_exists = channel.unary_unary(
                '/dan.DANInterface/vertex_exists',
                request_serializer=interface__pb2.VertexExists.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.remote_task = channel.unary_unary(
                '/dan.DANInterface/remote_task',
                request_serializer=interface__pb2.RemoteTask.SerializeToString,
                response_deserializer=interface__pb2.RemoteResult.FromString,
                )
        self.remote_object = channel.unary_unary(
                '/dan.DANInterface/remote_object',
                request_serializer=interface__pb2.RemoteObject.SerializeToString,
                response_deserializer=interface__pb2.RemoteResult.FromString,
                )
        self.remove_remote_object = channel.unary_unary(
                '/dan.DANInterface/remove_remote_object',
                request_serializer=interface__pb2.RemoteTaskResult.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.remote_object_task = channel.unary_unary(
                '/dan.DANInterface/remote_object_task',
                request_serializer=interface__pb2.RemoteObjectTask.SerializeToString,
                response_deserializer=interface__pb2.RemoteResult.FromString,
                )
        self.remote_task_result = channel.unary_unary(
                '/dan.DANInterface/remote_task_result',
                request_serializer=interface__pb2.RemoteTaskResult.SerializeToString,
                response_deserializer=interface__pb2.RemoteResult.FromString,
                )
        self.remove_task_result = channel.unary_unary(
                '/dan.DANInterface/remove_task_result',
                request_serializer=interface__pb2.RemoteTaskResult.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.load_graph_from_folder = channel.unary_unary(
                '/dan.DANInterface/load_graph_from_folder',
                request_serializer=interface__pb2.LoadGraphFromFolder.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )
        self.train_node_classifier = channel.unary_unary(
                '/dan.DANInterface/train_node_classifier',
                request_serializer=interface__pb2.NodeClassifierInfo.SerializeToString,
                response_deserializer=interface__pb2.Code.FromString,
                )


class DANInterfaceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ping(self, request, context):
        """system API
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_stream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_multiunary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_size(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def archive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def recover(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def request_node_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def request_register_node(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def request_socket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def memory_statistics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_table(self, request, context):
        """ddl API
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def drop_table(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def drop_table_if_exists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def load_table(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_index(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def table_partition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_partition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_graph(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def drop_graph(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def drop_graph_if_exists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def define_vertex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def graph_partition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def graph_merge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def transfer_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_record(self, request, context):
        """dml API
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_record_batch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def import_vertex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_vertex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_vertex_batch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def import_edge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_edge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_edge_vp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_edge_naive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_edge_batch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_edge_batch_vp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_table_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_num_records(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def table_scan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def index_search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_graph_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_num_vertex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_num_edges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def adjacent_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_edge_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_vertex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_vertex_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def vertex_exists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remote_task(self, request, context):
        """remote execution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remote_object(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove_remote_object(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remote_object_task(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remote_task_result(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove_task_result(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def load_graph_from_folder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def train_node_classifier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DANInterfaceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=interface__pb2.Void.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'test_stream': grpc.stream_unary_rpc_method_handler(
                    servicer.test_stream,
                    request_deserializer=interface__pb2.TestStream.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'test_multiunary': grpc.unary_unary_rpc_method_handler(
                    servicer.test_multiunary,
                    request_deserializer=interface__pb2.TestStream.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'test_size': grpc.unary_unary_rpc_method_handler(
                    servicer.test_size,
                    request_deserializer=interface__pb2.DoubleVec.FromString,
                    response_serializer=interface__pb2.DoubleVec.SerializeToString,
            ),
            'archive': grpc.unary_unary_rpc_method_handler(
                    servicer.archive,
                    request_deserializer=interface__pb2.Str.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'recover': grpc.unary_unary_rpc_method_handler(
                    servicer.recover,
                    request_deserializer=interface__pb2.Str.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'request_node_list': grpc.unary_unary_rpc_method_handler(
                    servicer.request_node_list,
                    request_deserializer=interface__pb2.Void.FromString,
                    response_serializer=interface__pb2.NodeInfoVec.SerializeToString,
            ),
            'request_register_node': grpc.unary_unary_rpc_method_handler(
                    servicer.request_register_node,
                    request_deserializer=interface__pb2.Str.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'request_socket': grpc.unary_unary_rpc_method_handler(
                    servicer.request_socket,
                    request_deserializer=interface__pb2.Void.FromString,
                    response_serializer=interface__pb2.HostInfo.SerializeToString,
            ),
            'memory_statistics': grpc.unary_unary_rpc_method_handler(
                    servicer.memory_statistics,
                    request_deserializer=interface__pb2.MemoryStat.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'create_table': grpc.unary_unary_rpc_method_handler(
                    servicer.create_table,
                    request_deserializer=interface__pb2.CreateTable.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'drop_table': grpc.unary_unary_rpc_method_handler(
                    servicer.drop_table,
                    request_deserializer=interface__pb2.Str.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'drop_table_if_exists': grpc.unary_unary_rpc_method_handler(
                    servicer.drop_table_if_exists,
                    request_deserializer=interface__pb2.Str.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'load_table': grpc.unary_unary_rpc_method_handler(
                    servicer.load_table,
                    request_deserializer=interface__pb2.StrVec.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'create_index': grpc.unary_unary_rpc_method_handler(
                    servicer.create_index,
                    request_deserializer=interface__pb2.CreateIndex.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'table_partition': grpc.unary_unary_rpc_method_handler(
                    servicer.table_partition,
                    request_deserializer=interface__pb2.TablePartition.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'set_partition': grpc.unary_unary_rpc_method_handler(
                    servicer.set_partition,
                    request_deserializer=interface__pb2.Str.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'create_graph': grpc.unary_unary_rpc_method_handler(
                    servicer.create_graph,
                    request_deserializer=interface__pb2.CreateGraph.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'drop_graph': grpc.unary_unary_rpc_method_handler(
                    servicer.drop_graph,
                    request_deserializer=interface__pb2.Str.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'drop_graph_if_exists': grpc.unary_unary_rpc_method_handler(
                    servicer.drop_graph_if_exists,
                    request_deserializer=interface__pb2.Str.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'define_vertex': grpc.unary_unary_rpc_method_handler(
                    servicer.define_vertex,
                    request_deserializer=interface__pb2.DefineVertex.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'graph_partition': grpc.unary_unary_rpc_method_handler(
                    servicer.graph_partition,
                    request_deserializer=interface__pb2.GraphPartition.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'graph_merge': grpc.unary_unary_rpc_method_handler(
                    servicer.graph_merge,
                    request_deserializer=interface__pb2.MergeInfo.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'transfer_data': grpc.unary_unary_rpc_method_handler(
                    servicer.transfer_data,
                    request_deserializer=interface__pb2.TransferBinary.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'insert_record': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_record,
                    request_deserializer=interface__pb2.InsertRecord.FromString,
                    response_serializer=interface__pb2.Str.SerializeToString,
            ),
            'insert_record_batch': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_record_batch,
                    request_deserializer=interface__pb2.InsertRecordBatch.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'import_vertex': grpc.unary_unary_rpc_method_handler(
                    servicer.import_vertex,
                    request_deserializer=interface__pb2.ImportVertex.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'insert_vertex': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_vertex,
                    request_deserializer=interface__pb2.InsertVertex.FromString,
                    response_serializer=interface__pb2.Long.SerializeToString,
            ),
            'insert_vertex_batch': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_vertex_batch,
                    request_deserializer=interface__pb2.InsertVertexBatch.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'import_edge': grpc.unary_unary_rpc_method_handler(
                    servicer.import_edge,
                    request_deserializer=interface__pb2.ImportEdge.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'insert_edge': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_edge,
                    request_deserializer=interface__pb2.InsertEdge.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'insert_edge_vp': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_edge_vp,
                    request_deserializer=interface__pb2.InsertEdgeVP.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'insert_edge_naive': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_edge_naive,
                    request_deserializer=interface__pb2.InsertEdgeNaive.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'insert_edge_batch': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_edge_batch,
                    request_deserializer=interface__pb2.InsertEdgeBatch.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'insert_edge_batch_vp': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_edge_batch_vp,
                    request_deserializer=interface__pb2.InsertEdgeBatchVP.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'get_table_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_table_info,
                    request_deserializer=interface__pb2.Str.FromString,
                    response_serializer=interface__pb2.TableInfo.SerializeToString,
            ),
            'get_num_records': grpc.unary_unary_rpc_method_handler(
                    servicer.get_num_records,
                    request_deserializer=interface__pb2.Str.FromString,
                    response_serializer=interface__pb2.Long.SerializeToString,
            ),
            'table_scan': grpc.unary_unary_rpc_method_handler(
                    servicer.table_scan,
                    request_deserializer=interface__pb2.TableScan.FromString,
                    response_serializer=interface__pb2.Table.SerializeToString,
            ),
            'index_search': grpc.unary_unary_rpc_method_handler(
                    servicer.index_search,
                    request_deserializer=interface__pb2.IndexSearch.FromString,
                    response_serializer=interface__pb2.Table.SerializeToString,
            ),
            'get_graph_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_graph_info,
                    request_deserializer=interface__pb2.Str.FromString,
                    response_serializer=interface__pb2.GraphInfo.SerializeToString,
            ),
            'get_num_vertex': grpc.unary_unary_rpc_method_handler(
                    servicer.get_num_vertex,
                    request_deserializer=interface__pb2.Str.FromString,
                    response_serializer=interface__pb2.Long.SerializeToString,
            ),
            'get_num_edges': grpc.unary_unary_rpc_method_handler(
                    servicer.get_num_edges,
                    request_deserializer=interface__pb2.Str.FromString,
                    response_serializer=interface__pb2.Long.SerializeToString,
            ),
            'adjacent_list': grpc.unary_unary_rpc_method_handler(
                    servicer.adjacent_list,
                    request_deserializer=interface__pb2.AdjacentList.FromString,
                    response_serializer=interface__pb2.AdjacentListResult.SerializeToString,
            ),
            'get_edge_list': grpc.unary_stream_rpc_method_handler(
                    servicer.get_edge_list,
                    request_deserializer=interface__pb2.Str.FromString,
                    response_serializer=interface__pb2.EdgeList.SerializeToString,
            ),
            'get_vertex': grpc.unary_unary_rpc_method_handler(
                    servicer.get_vertex,
                    request_deserializer=interface__pb2.GetVertex.FromString,
                    response_serializer=interface__pb2.Record.SerializeToString,
            ),
            'get_vertex_list': grpc.unary_stream_rpc_method_handler(
                    servicer.get_vertex_list,
                    request_deserializer=interface__pb2.Str.FromString,
                    response_serializer=interface__pb2.VertexList.SerializeToString,
            ),
            'vertex_exists': grpc.unary_unary_rpc_method_handler(
                    servicer.vertex_exists,
                    request_deserializer=interface__pb2.VertexExists.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'remote_task': grpc.unary_unary_rpc_method_handler(
                    servicer.remote_task,
                    request_deserializer=interface__pb2.RemoteTask.FromString,
                    response_serializer=interface__pb2.RemoteResult.SerializeToString,
            ),
            'remote_object': grpc.unary_unary_rpc_method_handler(
                    servicer.remote_object,
                    request_deserializer=interface__pb2.RemoteObject.FromString,
                    response_serializer=interface__pb2.RemoteResult.SerializeToString,
            ),
            'remove_remote_object': grpc.unary_unary_rpc_method_handler(
                    servicer.remove_remote_object,
                    request_deserializer=interface__pb2.RemoteTaskResult.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'remote_object_task': grpc.unary_unary_rpc_method_handler(
                    servicer.remote_object_task,
                    request_deserializer=interface__pb2.RemoteObjectTask.FromString,
                    response_serializer=interface__pb2.RemoteResult.SerializeToString,
            ),
            'remote_task_result': grpc.unary_unary_rpc_method_handler(
                    servicer.remote_task_result,
                    request_deserializer=interface__pb2.RemoteTaskResult.FromString,
                    response_serializer=interface__pb2.RemoteResult.SerializeToString,
            ),
            'remove_task_result': grpc.unary_unary_rpc_method_handler(
                    servicer.remove_task_result,
                    request_deserializer=interface__pb2.RemoteTaskResult.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'load_graph_from_folder': grpc.unary_unary_rpc_method_handler(
                    servicer.load_graph_from_folder,
                    request_deserializer=interface__pb2.LoadGraphFromFolder.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
            'train_node_classifier': grpc.unary_unary_rpc_method_handler(
                    servicer.train_node_classifier,
                    request_deserializer=interface__pb2.NodeClassifierInfo.FromString,
                    response_serializer=interface__pb2.Code.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dan.DANInterface', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DANInterface(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/ping',
            interface__pb2.Void.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def test_stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/dan.DANInterface/test_stream',
            interface__pb2.TestStream.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def test_multiunary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/test_multiunary',
            interface__pb2.TestStream.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def test_size(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/test_size',
            interface__pb2.DoubleVec.SerializeToString,
            interface__pb2.DoubleVec.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def archive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/archive',
            interface__pb2.Str.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def recover(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/recover',
            interface__pb2.Str.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def request_node_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/request_node_list',
            interface__pb2.Void.SerializeToString,
            interface__pb2.NodeInfoVec.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def request_register_node(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/request_register_node',
            interface__pb2.Str.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def request_socket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/request_socket',
            interface__pb2.Void.SerializeToString,
            interface__pb2.HostInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def memory_statistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/memory_statistics',
            interface__pb2.MemoryStat.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_table(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/create_table',
            interface__pb2.CreateTable.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def drop_table(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/drop_table',
            interface__pb2.Str.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def drop_table_if_exists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/drop_table_if_exists',
            interface__pb2.Str.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def load_table(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/load_table',
            interface__pb2.StrVec.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_index(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/create_index',
            interface__pb2.CreateIndex.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def table_partition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/table_partition',
            interface__pb2.TablePartition.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_partition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/set_partition',
            interface__pb2.Str.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_graph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/create_graph',
            interface__pb2.CreateGraph.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def drop_graph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/drop_graph',
            interface__pb2.Str.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def drop_graph_if_exists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/drop_graph_if_exists',
            interface__pb2.Str.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def define_vertex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/define_vertex',
            interface__pb2.DefineVertex.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def graph_partition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/graph_partition',
            interface__pb2.GraphPartition.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def graph_merge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/graph_merge',
            interface__pb2.MergeInfo.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def transfer_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/transfer_data',
            interface__pb2.TransferBinary.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_record(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/insert_record',
            interface__pb2.InsertRecord.SerializeToString,
            interface__pb2.Str.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_record_batch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/insert_record_batch',
            interface__pb2.InsertRecordBatch.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def import_vertex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/import_vertex',
            interface__pb2.ImportVertex.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_vertex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/insert_vertex',
            interface__pb2.InsertVertex.SerializeToString,
            interface__pb2.Long.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_vertex_batch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/insert_vertex_batch',
            interface__pb2.InsertVertexBatch.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def import_edge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/import_edge',
            interface__pb2.ImportEdge.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_edge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/insert_edge',
            interface__pb2.InsertEdge.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_edge_vp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/insert_edge_vp',
            interface__pb2.InsertEdgeVP.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_edge_naive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/insert_edge_naive',
            interface__pb2.InsertEdgeNaive.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_edge_batch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/insert_edge_batch',
            interface__pb2.InsertEdgeBatch.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_edge_batch_vp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/insert_edge_batch_vp',
            interface__pb2.InsertEdgeBatchVP.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_table_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/get_table_info',
            interface__pb2.Str.SerializeToString,
            interface__pb2.TableInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_num_records(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/get_num_records',
            interface__pb2.Str.SerializeToString,
            interface__pb2.Long.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def table_scan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/table_scan',
            interface__pb2.TableScan.SerializeToString,
            interface__pb2.Table.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def index_search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/index_search',
            interface__pb2.IndexSearch.SerializeToString,
            interface__pb2.Table.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_graph_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/get_graph_info',
            interface__pb2.Str.SerializeToString,
            interface__pb2.GraphInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_num_vertex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/get_num_vertex',
            interface__pb2.Str.SerializeToString,
            interface__pb2.Long.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_num_edges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/get_num_edges',
            interface__pb2.Str.SerializeToString,
            interface__pb2.Long.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def adjacent_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/adjacent_list',
            interface__pb2.AdjacentList.SerializeToString,
            interface__pb2.AdjacentListResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_edge_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/dan.DANInterface/get_edge_list',
            interface__pb2.Str.SerializeToString,
            interface__pb2.EdgeList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_vertex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/get_vertex',
            interface__pb2.GetVertex.SerializeToString,
            interface__pb2.Record.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_vertex_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/dan.DANInterface/get_vertex_list',
            interface__pb2.Str.SerializeToString,
            interface__pb2.VertexList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def vertex_exists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/vertex_exists',
            interface__pb2.VertexExists.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remote_task(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/remote_task',
            interface__pb2.RemoteTask.SerializeToString,
            interface__pb2.RemoteResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remote_object(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/remote_object',
            interface__pb2.RemoteObject.SerializeToString,
            interface__pb2.RemoteResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove_remote_object(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/remove_remote_object',
            interface__pb2.RemoteTaskResult.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remote_object_task(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/remote_object_task',
            interface__pb2.RemoteObjectTask.SerializeToString,
            interface__pb2.RemoteResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remote_task_result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/remote_task_result',
            interface__pb2.RemoteTaskResult.SerializeToString,
            interface__pb2.RemoteResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove_task_result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/remove_task_result',
            interface__pb2.RemoteTaskResult.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def load_graph_from_folder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/load_graph_from_folder',
            interface__pb2.LoadGraphFromFolder.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def train_node_classifier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dan.DANInterface/train_node_classifier',
            interface__pb2.NodeClassifierInfo.SerializeToString,
            interface__pb2.Code.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
